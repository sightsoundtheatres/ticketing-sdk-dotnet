/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// WatchList
    /// </summary>
    [DataContract(Name = "WatchList")]
    public partial class WatchList : IEquatable<WatchList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WatchList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WatchList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WatchList" /> class.
        /// </summary>
        /// <param name="watchListNumber">watchListNumber.</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="deadlineDate">deadlineDate.</param>
        /// <param name="comments">comments.</param>
        /// <param name="addUserId">addUserId.</param>
        /// <param name="addDate">addDate.</param>
        /// <param name="active">active (required).</param>
        /// <param name="deactivateDate">deactivateDate.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="deactivateUserId">deactivateUserId.</param>
        /// <param name="lastModifiedDate">lastModifiedDate.</param>
        /// <param name="assignedToUserId">assignedToUserId.</param>
        /// <param name="order">order.</param>
        public WatchList(int watchListNumber = default(int), long orderNumber = default(long), DateTime deadlineDate = default(DateTime), string comments = default(string), string addUserId = default(string), DateTime addDate = default(DateTime), bool active = default(bool), DateTime deactivateDate = default(DateTime), long customerNumber = default(long), string deactivateUserId = default(string), DateTime lastModifiedDate = default(DateTime), string assignedToUserId = default(string), Order order = default(Order))
        {
            this.Active = active;
            this.WatchListNumber = watchListNumber;
            this.OrderNumber = orderNumber;
            this.DeadlineDate = deadlineDate;
            this.Comments = comments;
            this.AddUserId = addUserId;
            this.AddDate = addDate;
            this.DeactivateDate = deactivateDate;
            this.CustomerNumber = customerNumber;
            this.DeactivateUserId = deactivateUserId;
            this.LastModifiedDate = lastModifiedDate;
            this.AssignedToUserId = assignedToUserId;
            this.Order = order;
        }

        /// <summary>
        /// Gets or Sets WatchListNumber
        /// </summary>
        [DataMember(Name = "watchListNumber", EmitDefaultValue = false)]
        public int WatchListNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeadlineDate
        /// </summary>
        [DataMember(Name = "deadlineDate", EmitDefaultValue = false)]
        public DateTime DeadlineDate { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets AddDate
        /// </summary>
        [DataMember(Name = "addDate", EmitDefaultValue = false)]
        public DateTime AddDate { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets DeactivateDate
        /// </summary>
        [DataMember(Name = "deactivateDate", EmitDefaultValue = false)]
        public DateTime DeactivateDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets DeactivateUserId
        /// </summary>
        [DataMember(Name = "deactivateUserId", EmitDefaultValue = false)]
        public string DeactivateUserId { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDate
        /// </summary>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets AssignedToUserId
        /// </summary>
        [DataMember(Name = "assignedToUserId", EmitDefaultValue = false)]
        public string AssignedToUserId { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WatchList {\n");
            sb.Append("  WatchListNumber: ").Append(WatchListNumber).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  DeadlineDate: ").Append(DeadlineDate).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  AddDate: ").Append(AddDate).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DeactivateDate: ").Append(DeactivateDate).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  DeactivateUserId: ").Append(DeactivateUserId).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  AssignedToUserId: ").Append(AssignedToUserId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WatchList);
        }

        /// <summary>
        /// Returns true if WatchList instances are equal
        /// </summary>
        /// <param name="input">Instance of WatchList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WatchList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WatchListNumber == input.WatchListNumber ||
                    this.WatchListNumber.Equals(input.WatchListNumber)
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.DeadlineDate == input.DeadlineDate ||
                    (this.DeadlineDate != null &&
                    this.DeadlineDate.Equals(input.DeadlineDate))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.AddDate == input.AddDate ||
                    (this.AddDate != null &&
                    this.AddDate.Equals(input.AddDate))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.DeactivateDate == input.DeactivateDate ||
                    (this.DeactivateDate != null &&
                    this.DeactivateDate.Equals(input.DeactivateDate))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.DeactivateUserId == input.DeactivateUserId ||
                    (this.DeactivateUserId != null &&
                    this.DeactivateUserId.Equals(input.DeactivateUserId))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) && 
                (
                    this.AssignedToUserId == input.AssignedToUserId ||
                    (this.AssignedToUserId != null &&
                    this.AssignedToUserId.Equals(input.AssignedToUserId))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.WatchListNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                if (this.DeadlineDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeadlineDate.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                if (this.AddDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.DeactivateDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeactivateDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                if (this.DeactivateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.DeactivateUserId.GetHashCode();
                }
                if (this.LastModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedDate.GetHashCode();
                }
                if (this.AssignedToUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AssignedToUserId.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Comments (string) maxLength
            if (this.Comments != null && this.Comments.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 1000.", new [] { "Comments" });
            }

            // Comments (string) minLength
            if (this.Comments != null && this.Comments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be greater than 0.", new [] { "Comments" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            // DeactivateUserId (string) maxLength
            if (this.DeactivateUserId != null && this.DeactivateUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeactivateUserId, length must be less than 50.", new [] { "DeactivateUserId" });
            }

            // DeactivateUserId (string) minLength
            if (this.DeactivateUserId != null && this.DeactivateUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeactivateUserId, length must be greater than 0.", new [] { "DeactivateUserId" });
            }

            // AssignedToUserId (string) maxLength
            if (this.AssignedToUserId != null && this.AssignedToUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssignedToUserId, length must be less than 50.", new [] { "AssignedToUserId" });
            }

            // AssignedToUserId (string) minLength
            if (this.AssignedToUserId != null && this.AssignedToUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssignedToUserId, length must be greater than 0.", new [] { "AssignedToUserId" });
            }

            yield break;
        }
    }

}
