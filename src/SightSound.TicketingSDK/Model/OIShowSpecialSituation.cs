/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// OIShowSpecialSituation
    /// </summary>
    [DataContract(Name = "OIShowSpecialSituation")]
    public partial class OIShowSpecialSituation : IEquatable<OIShowSpecialSituation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OIShowSpecialSituation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OIShowSpecialSituation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OIShowSpecialSituation" /> class.
        /// </summary>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="itemNumber">itemNumber.</param>
        /// <param name="specialSituationCode">specialSituationCode (required).</param>
        /// <param name="orderItem">orderItem.</param>
        /// <param name="specialSituationDefinition">specialSituationDefinition.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="_new">_new.</param>
        public OIShowSpecialSituation(long orderNumber = default(long), int itemNumber = default(int), string specialSituationCode = default(string), OrderItem orderItem = default(OrderItem), SpecialSituationDefinition specialSituationDefinition = default(SpecialSituationDefinition), bool deleted = default(bool), bool _new = default(bool))
        {
            // to ensure "specialSituationCode" is required (not null)
            if (specialSituationCode == null)
            {
                throw new ArgumentNullException("specialSituationCode is a required property for OIShowSpecialSituation and cannot be null");
            }
            this.SpecialSituationCode = specialSituationCode;
            this.OrderNumber = orderNumber;
            this.ItemNumber = itemNumber;
            this.OrderItem = orderItem;
            this.SpecialSituationDefinition = specialSituationDefinition;
            this.Deleted = deleted;
            this.New = _new;
        }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets SpecialSituationCode
        /// </summary>
        [DataMember(Name = "specialSituationCode", IsRequired = true, EmitDefaultValue = false)]
        public string SpecialSituationCode { get; set; }

        /// <summary>
        /// Gets or Sets OrderItem
        /// </summary>
        [DataMember(Name = "orderItem", EmitDefaultValue = false)]
        public OrderItem OrderItem { get; set; }

        /// <summary>
        /// Gets or Sets SpecialSituationDefinition
        /// </summary>
        [DataMember(Name = "specialSituationDefinition", EmitDefaultValue = false)]
        public SpecialSituationDefinition SpecialSituationDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets New
        /// </summary>
        [DataMember(Name = "new", EmitDefaultValue = true)]
        public bool New { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OIShowSpecialSituation {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  SpecialSituationCode: ").Append(SpecialSituationCode).Append("\n");
            sb.Append("  OrderItem: ").Append(OrderItem).Append("\n");
            sb.Append("  SpecialSituationDefinition: ").Append(SpecialSituationDefinition).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OIShowSpecialSituation);
        }

        /// <summary>
        /// Returns true if OIShowSpecialSituation instances are equal
        /// </summary>
        /// <param name="input">Instance of OIShowSpecialSituation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OIShowSpecialSituation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.SpecialSituationCode == input.SpecialSituationCode ||
                    (this.SpecialSituationCode != null &&
                    this.SpecialSituationCode.Equals(input.SpecialSituationCode))
                ) && 
                (
                    this.OrderItem == input.OrderItem ||
                    (this.OrderItem != null &&
                    this.OrderItem.Equals(input.OrderItem))
                ) && 
                (
                    this.SpecialSituationDefinition == input.SpecialSituationDefinition ||
                    (this.SpecialSituationDefinition != null &&
                    this.SpecialSituationDefinition.Equals(input.SpecialSituationDefinition))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.New == input.New ||
                    this.New.Equals(input.New)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                if (this.SpecialSituationCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialSituationCode.GetHashCode();
                }
                if (this.OrderItem != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItem.GetHashCode();
                }
                if (this.SpecialSituationDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialSituationDefinition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                hashCode = (hashCode * 59) + this.New.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SpecialSituationCode (string) maxLength
            if (this.SpecialSituationCode != null && this.SpecialSituationCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialSituationCode, length must be less than 20.", new [] { "SpecialSituationCode" });
            }

            // SpecialSituationCode (string) minLength
            if (this.SpecialSituationCode != null && this.SpecialSituationCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialSituationCode, length must be greater than 0.", new [] { "SpecialSituationCode" });
            }

            yield break;
        }
    }

}
