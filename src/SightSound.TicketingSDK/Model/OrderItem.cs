/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract(Name = "OrderItem")]
    public partial class OrderItem : IEquatable<OrderItem>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OrderItemStatusCode
        /// </summary>
        [DataMember(Name = "orderItemStatusCode", IsRequired = true, EmitDefaultValue = false)]
        public OrderItemStatus OrderItemStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", EmitDefaultValue = false)]
        public ItemType? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets EmpBenefitCode
        /// </summary>
        [DataMember(Name = "empBenefitCode", EmitDefaultValue = false)]
        public EmployeeBenefitType? EmpBenefitCode { get; set; }

        /// <summary>
        /// Gets or Sets SkuTaxType
        /// </summary>
        [DataMember(Name = "skuTaxType", EmitDefaultValue = false)]
        public TaxType? SkuTaxType { get; set; }

        /// <summary>
        /// Gets or Sets LogActivity
        /// </summary>
        [DataMember(Name = "logActivity", EmitDefaultValue = false)]
        public ActivityType? LogActivity { get; set; }

        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name = "taxType", EmitDefaultValue = false)]
        public TaxType? TaxType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="itemNumber">itemNumber.</param>
        /// <param name="seatDriverWithGroup">seatDriverWithGroup.</param>
        /// <param name="confirmed">confirmed.</param>
        /// <param name="canDoSteps">canDoSteps.</param>
        /// <param name="mealDateTime">mealDateTime.</param>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="showDateTime">showDateTime.</param>
        /// <param name="lumpSumDiscount">lumpSumDiscount.</param>
        /// <param name="itemTotalPrice">itemTotalPrice (required).</param>
        /// <param name="overflowCount">overflowCount (required).</param>
        /// <param name="orderItemStatusCode">orderItemStatusCode (required).</param>
        /// <param name="custTanDCProfileCode">custTanDCProfileCode.</param>
        /// <param name="priceListCode">priceListCode.</param>
        /// <param name="printedCount">printedCount.</param>
        /// <param name="voucherPrinted">voucherPrinted (required).</param>
        /// <param name="cancelUserId">cancelUserId.</param>
        /// <param name="cancelDate">cancelDate.</param>
        /// <param name="cancelConfirmDate">cancelConfirmDate.</param>
        /// <param name="confirmDate">confirmDate.</param>
        /// <param name="activeWithOrder">activeWithOrder.</param>
        /// <param name="restContactName">restContactName.</param>
        /// <param name="addUserId">addUserId.</param>
        /// <param name="addLocation">addLocation.</param>
        /// <param name="addDate">addDate.</param>
        /// <param name="cancelLocation">cancelLocation.</param>
        /// <param name="transFromItem">transFromItem.</param>
        /// <param name="transToItem">transToItem.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="eventDateTime">eventDateTime.</param>
        /// <param name="voucherExpirationDate">voucherExpirationDate.</param>
        /// <param name="busCount">busCount.</param>
        /// <param name="givexNumber">givexNumber.</param>
        /// <param name="givexSecurityCode">givexSecurityCode.</param>
        /// <param name="activateUserId">activateUserId.</param>
        /// <param name="activateDate">activateDate.</param>
        /// <param name="empBenefitCode">empBenefitCode.</param>
        /// <param name="partnerConfirm">partnerConfirm.</param>
        /// <param name="partnerEvent">partnerEvent.</param>
        /// <param name="pluNumber">pluNumber.</param>
        /// <param name="skuCode">skuCode.</param>
        /// <param name="skuDescription">skuDescription.</param>
        /// <param name="skuBinLocation">skuBinLocation.</param>
        /// <param name="skuTaxType">skuTaxType.</param>
        /// <param name="sale">sale.</param>
        /// <param name="manDiscountCode">manDiscountCode.</param>
        /// <param name="miscSkuRef">miscSkuRef.</param>
        /// <param name="shipDate">shipDate.</param>
        /// <param name="trackNumber">trackNumber.</param>
        /// <param name="damaged">damaged.</param>
        /// <param name="shipMethod">shipMethod.</param>
        /// <param name="comments">comments.</param>
        /// <param name="itemGrandTotalPrice">itemGrandTotalPrice.</param>
        /// <param name="traDevCount">traDevCount.</param>
        /// <param name="miscSkuDescription">miscSkuDescription.</param>
        /// <param name="free">free.</param>
        /// <param name="oldPartnerConfirm">oldPartnerConfirm.</param>
        /// <param name="freeForItemNumber">freeForItemNumber.</param>
        /// <param name="traDevLangCode">traDevLangCode.</param>
        /// <param name="bus">bus.</param>
        /// <param name="travelPhoneNumber">travelPhoneNumber.</param>
        /// <param name="order">order.</param>
        /// <param name="specialSituations">specialSituations.</param>
        /// <param name="orderItemDetails">orderItemDetails.</param>
        /// <param name="seats">seats.</param>
        /// <param name="overflowSeats">overflowSeats.</param>
        /// <param name="itemFees">itemFees.</param>
        /// <param name="itemTaxes">itemTaxes.</param>
        /// <param name="itemComps">itemComps.</param>
        /// <param name="groupInfo">groupInfo.</param>
        /// <param name="_event">_event.</param>
        /// <param name="miscEvent">miscEvent.</param>
        /// <param name="logActivity">logActivity.</param>
        /// <param name="logChanges">logChanges.</param>
        /// <param name="seatOverBooked">seatOverBooked.</param>
        /// <param name="seatOverbookCount">seatOverbookCount.</param>
        /// <param name="sendToAccpac">sendToAccpac.</param>
        /// <param name="persisted">persisted.</param>
        /// <param name="count">count.</param>
        /// <param name="itemCount">itemCount.</param>
        /// <param name="cancelled">cancelled.</param>
        /// <param name="totalCustomerDiscount">totalCustomerDiscount.</param>
        /// <param name="firstOccurringFeeDate">firstOccurringFeeDate.</param>
        /// <param name="_new">_new.</param>
        /// <param name="allAssignedSeatCount">allAssignedSeatCount.</param>
        /// <param name="transactionChargeItem">transactionChargeItem.</param>
        /// <param name="totalFee">totalFee.</param>
        /// <param name="taxType">taxType.</param>
        /// <param name="totalTax">totalTax.</param>
        /// <param name="totalGratuity">totalGratuity.</param>
        /// <param name="totalDesignationCount">totalDesignationCount.</param>
        /// <param name="seatedCount">seatedCount.</param>
        /// <param name="totalDiscount">totalDiscount.</param>
        /// <param name="paidCount">paidCount.</param>
        /// <param name="unprintedCount">unprintedCount.</param>
        /// <param name="compCount">compCount.</param>
        /// <param name="zonedEventDateTime">zonedEventDateTime.</param>
        /// <param name="assignedSeatCount">assignedSeatCount.</param>
        /// <param name="manualDiscountValue">manualDiscountValue.</param>
        /// <param name="grandTotalSavings">grandTotalSavings.</param>
        /// <param name="netPrice">netPrice.</param>
        /// <param name="totalSavings">totalSavings.</param>
        /// <param name="taxable">taxable.</param>
        public OrderItem(long orderNumber = default(long), int itemNumber = default(int), bool seatDriverWithGroup = default(bool), bool confirmed = default(bool), bool canDoSteps = default(bool), DateTime mealDateTime = default(DateTime), string eventCode = default(string), DateTime showDateTime = default(DateTime), decimal lumpSumDiscount = default(decimal), decimal itemTotalPrice = default(decimal), int overflowCount = default(int), OrderItemStatus orderItemStatusCode = default(OrderItemStatus), string custTanDCProfileCode = default(string), string priceListCode = default(string), int printedCount = default(int), bool voucherPrinted = default(bool), string cancelUserId = default(string), DateTime cancelDate = default(DateTime), DateTime cancelConfirmDate = default(DateTime), DateTime confirmDate = default(DateTime), bool activeWithOrder = default(bool), string restContactName = default(string), string addUserId = default(string), string addLocation = default(string), DateTime addDate = default(DateTime), string cancelLocation = default(string), long transFromItem = default(long), long transToItem = default(long), ItemType? itemType = default(ItemType?), DateTime eventDateTime = default(DateTime), DateTime voucherExpirationDate = default(DateTime), int busCount = default(int), string givexNumber = default(string), string givexSecurityCode = default(string), string activateUserId = default(string), DateTime activateDate = default(DateTime), EmployeeBenefitType? empBenefitCode = default(EmployeeBenefitType?), string partnerConfirm = default(string), bool partnerEvent = default(bool), string pluNumber = default(string), string skuCode = default(string), string skuDescription = default(string), string skuBinLocation = default(string), TaxType? skuTaxType = default(TaxType?), bool sale = default(bool), string manDiscountCode = default(string), string miscSkuRef = default(string), DateTime shipDate = default(DateTime), string trackNumber = default(string), bool damaged = default(bool), string shipMethod = default(string), string comments = default(string), decimal itemGrandTotalPrice = default(decimal), int traDevCount = default(int), string miscSkuDescription = default(string), bool free = default(bool), string oldPartnerConfirm = default(string), int freeForItemNumber = default(int), string traDevLangCode = default(string), bool bus = default(bool), string travelPhoneNumber = default(string), Order order = default(Order), List<OIShowSpecialSituation> specialSituations = default(List<OIShowSpecialSituation>), List<OrderItemDetail> orderItemDetails = default(List<OrderItemDetail>), List<ShowScheduleSeat> seats = default(List<ShowScheduleSeat>), List<ShowOverflowSeat> overflowSeats = default(List<ShowOverflowSeat>), List<FeeItem> itemFees = default(List<FeeItem>), List<OrderItemTax> itemTaxes = default(List<OrderItemTax>), List<OrderItemComp> itemComps = default(List<OrderItemComp>), GroupInfo groupInfo = default(GroupInfo), Event _event = default(Event), MiscEvent miscEvent = default(MiscEvent), ActivityType? logActivity = default(ActivityType?), bool logChanges = default(bool), bool seatOverBooked = default(bool), int seatOverbookCount = default(int), bool sendToAccpac = default(bool), bool persisted = default(bool), int count = default(int), int itemCount = default(int), bool cancelled = default(bool), decimal totalCustomerDiscount = default(decimal), DateTime firstOccurringFeeDate = default(DateTime), bool _new = default(bool), int allAssignedSeatCount = default(int), bool transactionChargeItem = default(bool), decimal totalFee = default(decimal), TaxType? taxType = default(TaxType?), decimal totalTax = default(decimal), decimal totalGratuity = default(decimal), int totalDesignationCount = default(int), int seatedCount = default(int), decimal totalDiscount = default(decimal), int paidCount = default(int), int unprintedCount = default(int), int compCount = default(int), DateTime zonedEventDateTime = default(DateTime), int assignedSeatCount = default(int), decimal manualDiscountValue = default(decimal), decimal grandTotalSavings = default(decimal), decimal netPrice = default(decimal), decimal totalSavings = default(decimal), bool taxable = default(bool))
        {
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for OrderItem and cannot be null");
            }
            this.EventCode = eventCode;
            this.ItemTotalPrice = itemTotalPrice;
            this.OverflowCount = overflowCount;
            this.OrderItemStatusCode = orderItemStatusCode;
            this.VoucherPrinted = voucherPrinted;
            this.OrderNumber = orderNumber;
            this.ItemNumber = itemNumber;
            this.SeatDriverWithGroup = seatDriverWithGroup;
            this.Confirmed = confirmed;
            this.CanDoSteps = canDoSteps;
            this.MealDateTime = mealDateTime;
            this.ShowDateTime = showDateTime;
            this.LumpSumDiscount = lumpSumDiscount;
            this.CustTanDCProfileCode = custTanDCProfileCode;
            this.PriceListCode = priceListCode;
            this.PrintedCount = printedCount;
            this.CancelUserId = cancelUserId;
            this.CancelDate = cancelDate;
            this.CancelConfirmDate = cancelConfirmDate;
            this.ConfirmDate = confirmDate;
            this.ActiveWithOrder = activeWithOrder;
            this.RestContactName = restContactName;
            this.AddUserId = addUserId;
            this.AddLocation = addLocation;
            this.AddDate = addDate;
            this.CancelLocation = cancelLocation;
            this.TransFromItem = transFromItem;
            this.TransToItem = transToItem;
            this.ItemType = itemType;
            this.EventDateTime = eventDateTime;
            this.VoucherExpirationDate = voucherExpirationDate;
            this.BusCount = busCount;
            this.GivexNumber = givexNumber;
            this.GivexSecurityCode = givexSecurityCode;
            this.ActivateUserId = activateUserId;
            this.ActivateDate = activateDate;
            this.EmpBenefitCode = empBenefitCode;
            this.PartnerConfirm = partnerConfirm;
            this.PartnerEvent = partnerEvent;
            this.PluNumber = pluNumber;
            this.SkuCode = skuCode;
            this.SkuDescription = skuDescription;
            this.SkuBinLocation = skuBinLocation;
            this.SkuTaxType = skuTaxType;
            this.Sale = sale;
            this.ManDiscountCode = manDiscountCode;
            this.MiscSkuRef = miscSkuRef;
            this.ShipDate = shipDate;
            this.TrackNumber = trackNumber;
            this.Damaged = damaged;
            this.ShipMethod = shipMethod;
            this.Comments = comments;
            this.ItemGrandTotalPrice = itemGrandTotalPrice;
            this.TraDevCount = traDevCount;
            this.MiscSkuDescription = miscSkuDescription;
            this.Free = free;
            this.OldPartnerConfirm = oldPartnerConfirm;
            this.FreeForItemNumber = freeForItemNumber;
            this.TraDevLangCode = traDevLangCode;
            this.Bus = bus;
            this.TravelPhoneNumber = travelPhoneNumber;
            this.Order = order;
            this.SpecialSituations = specialSituations;
            this.OrderItemDetails = orderItemDetails;
            this.Seats = seats;
            this.OverflowSeats = overflowSeats;
            this.ItemFees = itemFees;
            this.ItemTaxes = itemTaxes;
            this.ItemComps = itemComps;
            this.GroupInfo = groupInfo;
            this.Event = _event;
            this.MiscEvent = miscEvent;
            this.LogActivity = logActivity;
            this.LogChanges = logChanges;
            this.SeatOverBooked = seatOverBooked;
            this.SeatOverbookCount = seatOverbookCount;
            this.SendToAccpac = sendToAccpac;
            this.Persisted = persisted;
            this.Count = count;
            this.ItemCount = itemCount;
            this.Cancelled = cancelled;
            this.TotalCustomerDiscount = totalCustomerDiscount;
            this.FirstOccurringFeeDate = firstOccurringFeeDate;
            this.New = _new;
            this.AllAssignedSeatCount = allAssignedSeatCount;
            this.TransactionChargeItem = transactionChargeItem;
            this.TotalFee = totalFee;
            this.TaxType = taxType;
            this.TotalTax = totalTax;
            this.TotalGratuity = totalGratuity;
            this.TotalDesignationCount = totalDesignationCount;
            this.SeatedCount = seatedCount;
            this.TotalDiscount = totalDiscount;
            this.PaidCount = paidCount;
            this.UnprintedCount = unprintedCount;
            this.CompCount = compCount;
            this.ZonedEventDateTime = zonedEventDateTime;
            this.AssignedSeatCount = assignedSeatCount;
            this.ManualDiscountValue = manualDiscountValue;
            this.GrandTotalSavings = grandTotalSavings;
            this.NetPrice = netPrice;
            this.TotalSavings = totalSavings;
            this.Taxable = taxable;
        }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets SeatDriverWithGroup
        /// </summary>
        [DataMember(Name = "seatDriverWithGroup", EmitDefaultValue = true)]
        public bool SeatDriverWithGroup { get; set; }

        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [DataMember(Name = "confirmed", EmitDefaultValue = true)]
        public bool Confirmed { get; set; }

        /// <summary>
        /// Gets or Sets CanDoSteps
        /// </summary>
        [DataMember(Name = "canDoSteps", EmitDefaultValue = true)]
        public bool CanDoSteps { get; set; }

        /// <summary>
        /// Gets or Sets MealDateTime
        /// </summary>
        [DataMember(Name = "mealDateTime", EmitDefaultValue = false)]
        public DateTime MealDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets ShowDateTime
        /// </summary>
        [DataMember(Name = "showDateTime", EmitDefaultValue = false)]
        [Obsolete]
        public DateTime ShowDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LumpSumDiscount
        /// </summary>
        [DataMember(Name = "lumpSumDiscount", EmitDefaultValue = false)]
        public decimal LumpSumDiscount { get; set; }

        /// <summary>
        /// Gets or Sets ItemTotalPrice
        /// </summary>
        [DataMember(Name = "itemTotalPrice", IsRequired = true, EmitDefaultValue = false)]
        public decimal ItemTotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets OverflowCount
        /// </summary>
        [DataMember(Name = "overflowCount", IsRequired = true, EmitDefaultValue = false)]
        [Obsolete]
        public int OverflowCount { get; set; }

        /// <summary>
        /// Gets or Sets CustTanDCProfileCode
        /// </summary>
        [DataMember(Name = "custTanDCProfileCode", EmitDefaultValue = false)]
        public string CustTanDCProfileCode { get; set; }

        /// <summary>
        /// Gets or Sets PriceListCode
        /// </summary>
        [DataMember(Name = "priceListCode", EmitDefaultValue = false)]
        public string PriceListCode { get; set; }

        /// <summary>
        /// Gets or Sets PrintedCount
        /// </summary>
        [DataMember(Name = "printedCount", EmitDefaultValue = false)]
        public int PrintedCount { get; set; }

        /// <summary>
        /// Gets or Sets VoucherPrinted
        /// </summary>
        [DataMember(Name = "voucherPrinted", IsRequired = true, EmitDefaultValue = true)]
        public bool VoucherPrinted { get; set; }

        /// <summary>
        /// Gets or Sets CancelUserId
        /// </summary>
        [DataMember(Name = "cancelUserId", EmitDefaultValue = false)]
        public string CancelUserId { get; set; }

        /// <summary>
        /// Gets or Sets CancelDate
        /// </summary>
        [DataMember(Name = "cancelDate", EmitDefaultValue = false)]
        public DateTime CancelDate { get; set; }

        /// <summary>
        /// Gets or Sets CancelConfirmDate
        /// </summary>
        [DataMember(Name = "cancelConfirmDate", EmitDefaultValue = false)]
        public DateTime CancelConfirmDate { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmDate
        /// </summary>
        [DataMember(Name = "confirmDate", EmitDefaultValue = false)]
        public DateTime ConfirmDate { get; set; }

        /// <summary>
        /// Gets or Sets ActiveWithOrder
        /// </summary>
        [DataMember(Name = "activeWithOrder", EmitDefaultValue = true)]
        public bool ActiveWithOrder { get; set; }

        /// <summary>
        /// Gets or Sets RestContactName
        /// </summary>
        [DataMember(Name = "restContactName", EmitDefaultValue = false)]
        public string RestContactName { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets AddLocation
        /// </summary>
        [DataMember(Name = "addLocation", EmitDefaultValue = false)]
        public string AddLocation { get; set; }

        /// <summary>
        /// Gets or Sets AddDate
        /// </summary>
        [DataMember(Name = "addDate", EmitDefaultValue = false)]
        public DateTime AddDate { get; set; }

        /// <summary>
        /// Gets or Sets CancelLocation
        /// </summary>
        [DataMember(Name = "cancelLocation", EmitDefaultValue = false)]
        public string CancelLocation { get; set; }

        /// <summary>
        /// Gets or Sets TransFromItem
        /// </summary>
        [DataMember(Name = "transFromItem", EmitDefaultValue = false)]
        public long TransFromItem { get; set; }

        /// <summary>
        /// Gets or Sets TransToItem
        /// </summary>
        [DataMember(Name = "transToItem", EmitDefaultValue = false)]
        public long TransToItem { get; set; }

        /// <summary>
        /// Gets or Sets EventDateTime
        /// </summary>
        [DataMember(Name = "eventDateTime", EmitDefaultValue = false)]
        public DateTime EventDateTime { get; set; }

        /// <summary>
        /// Gets or Sets VoucherExpirationDate
        /// </summary>
        [DataMember(Name = "voucherExpirationDate", EmitDefaultValue = false)]
        public DateTime VoucherExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets BusCount
        /// </summary>
        [DataMember(Name = "busCount", EmitDefaultValue = false)]
        public int BusCount { get; set; }

        /// <summary>
        /// Gets or Sets GivexNumber
        /// </summary>
        [DataMember(Name = "givexNumber", EmitDefaultValue = false)]
        public string GivexNumber { get; set; }

        /// <summary>
        /// Gets or Sets GivexSecurityCode
        /// </summary>
        [DataMember(Name = "givexSecurityCode", EmitDefaultValue = false)]
        public string GivexSecurityCode { get; set; }

        /// <summary>
        /// Gets or Sets ActivateUserId
        /// </summary>
        [DataMember(Name = "activateUserId", EmitDefaultValue = false)]
        public string ActivateUserId { get; set; }

        /// <summary>
        /// Gets or Sets ActivateDate
        /// </summary>
        [DataMember(Name = "activateDate", EmitDefaultValue = false)]
        public DateTime ActivateDate { get; set; }

        /// <summary>
        /// Gets or Sets PartnerConfirm
        /// </summary>
        [DataMember(Name = "partnerConfirm", EmitDefaultValue = false)]
        public string PartnerConfirm { get; set; }

        /// <summary>
        /// Gets or Sets PartnerEvent
        /// </summary>
        [DataMember(Name = "partnerEvent", EmitDefaultValue = true)]
        public bool PartnerEvent { get; set; }

        /// <summary>
        /// Gets or Sets PluNumber
        /// </summary>
        [DataMember(Name = "pluNumber", EmitDefaultValue = false)]
        public string PluNumber { get; set; }

        /// <summary>
        /// Gets or Sets SkuCode
        /// </summary>
        [DataMember(Name = "skuCode", EmitDefaultValue = false)]
        public string SkuCode { get; set; }

        /// <summary>
        /// Gets or Sets SkuDescription
        /// </summary>
        [DataMember(Name = "skuDescription", EmitDefaultValue = false)]
        public string SkuDescription { get; set; }

        /// <summary>
        /// Gets or Sets SkuBinLocation
        /// </summary>
        [DataMember(Name = "skuBinLocation", EmitDefaultValue = false)]
        public string SkuBinLocation { get; set; }

        /// <summary>
        /// Gets or Sets Sale
        /// </summary>
        [DataMember(Name = "sale", EmitDefaultValue = true)]
        public bool Sale { get; set; }

        /// <summary>
        /// Gets or Sets ManDiscountCode
        /// </summary>
        [DataMember(Name = "manDiscountCode", EmitDefaultValue = false)]
        public string ManDiscountCode { get; set; }

        /// <summary>
        /// Gets or Sets MiscSkuRef
        /// </summary>
        [DataMember(Name = "miscSkuRef", EmitDefaultValue = false)]
        public string MiscSkuRef { get; set; }

        /// <summary>
        /// Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets TrackNumber
        /// </summary>
        [DataMember(Name = "trackNumber", EmitDefaultValue = false)]
        public string TrackNumber { get; set; }

        /// <summary>
        /// Gets or Sets Damaged
        /// </summary>
        [DataMember(Name = "damaged", EmitDefaultValue = true)]
        public bool Damaged { get; set; }

        /// <summary>
        /// Gets or Sets ShipMethod
        /// </summary>
        [DataMember(Name = "shipMethod", EmitDefaultValue = false)]
        public string ShipMethod { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets ItemGrandTotalPrice
        /// </summary>
        [DataMember(Name = "itemGrandTotalPrice", EmitDefaultValue = false)]
        public decimal ItemGrandTotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TraDevCount
        /// </summary>
        [DataMember(Name = "traDevCount", EmitDefaultValue = false)]
        public int TraDevCount { get; set; }

        /// <summary>
        /// Gets or Sets MiscSkuDescription
        /// </summary>
        [DataMember(Name = "miscSkuDescription", EmitDefaultValue = false)]
        public string MiscSkuDescription { get; set; }

        /// <summary>
        /// Gets or Sets Free
        /// </summary>
        [DataMember(Name = "free", EmitDefaultValue = true)]
        public bool Free { get; set; }

        /// <summary>
        /// Gets or Sets OldPartnerConfirm
        /// </summary>
        [DataMember(Name = "oldPartnerConfirm", EmitDefaultValue = false)]
        public string OldPartnerConfirm { get; set; }

        /// <summary>
        /// Gets or Sets FreeForItemNumber
        /// </summary>
        [DataMember(Name = "freeForItemNumber", EmitDefaultValue = false)]
        public int FreeForItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets TraDevLangCode
        /// </summary>
        [DataMember(Name = "traDevLangCode", EmitDefaultValue = false)]
        public string TraDevLangCode { get; set; }

        /// <summary>
        /// Gets or Sets Bus
        /// </summary>
        [DataMember(Name = "bus", EmitDefaultValue = true)]
        public bool Bus { get; set; }

        /// <summary>
        /// Gets or Sets TravelPhoneNumber
        /// </summary>
        [DataMember(Name = "travelPhoneNumber", EmitDefaultValue = false)]
        public string TravelPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets SpecialSituations
        /// </summary>
        [DataMember(Name = "specialSituations", EmitDefaultValue = false)]
        public List<OIShowSpecialSituation> SpecialSituations { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemDetails
        /// </summary>
        [DataMember(Name = "orderItemDetails", EmitDefaultValue = false)]
        public List<OrderItemDetail> OrderItemDetails { get; set; }

        /// <summary>
        /// Gets or Sets Seats
        /// </summary>
        [DataMember(Name = "seats", EmitDefaultValue = false)]
        public List<ShowScheduleSeat> Seats { get; set; }

        /// <summary>
        /// Gets or Sets OverflowSeats
        /// </summary>
        [DataMember(Name = "overflowSeats", EmitDefaultValue = false)]
        public List<ShowOverflowSeat> OverflowSeats { get; set; }

        /// <summary>
        /// Gets or Sets ItemFees
        /// </summary>
        [DataMember(Name = "itemFees", EmitDefaultValue = false)]
        public List<FeeItem> ItemFees { get; set; }

        /// <summary>
        /// Gets or Sets ItemTaxes
        /// </summary>
        [DataMember(Name = "itemTaxes", EmitDefaultValue = false)]
        public List<OrderItemTax> ItemTaxes { get; set; }

        /// <summary>
        /// Gets or Sets ItemComps
        /// </summary>
        [DataMember(Name = "itemComps", EmitDefaultValue = false)]
        public List<OrderItemComp> ItemComps { get; set; }

        /// <summary>
        /// Gets or Sets GroupInfo
        /// </summary>
        [DataMember(Name = "groupInfo", EmitDefaultValue = false)]
        public GroupInfo GroupInfo { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public Event Event { get; set; }

        /// <summary>
        /// Gets or Sets MiscEvent
        /// </summary>
        [DataMember(Name = "miscEvent", EmitDefaultValue = false)]
        public MiscEvent MiscEvent { get; set; }

        /// <summary>
        /// Gets or Sets LogChanges
        /// </summary>
        [DataMember(Name = "logChanges", EmitDefaultValue = true)]
        public bool LogChanges { get; set; }

        /// <summary>
        /// Gets or Sets SeatOverBooked
        /// </summary>
        [DataMember(Name = "seatOverBooked", EmitDefaultValue = true)]
        public bool SeatOverBooked { get; set; }

        /// <summary>
        /// Gets or Sets SeatOverbookCount
        /// </summary>
        [DataMember(Name = "seatOverbookCount", EmitDefaultValue = false)]
        public int SeatOverbookCount { get; set; }

        /// <summary>
        /// Gets or Sets SendToAccpac
        /// </summary>
        [DataMember(Name = "sendToAccpac", EmitDefaultValue = true)]
        public bool SendToAccpac { get; set; }

        /// <summary>
        /// Gets or Sets Persisted
        /// </summary>
        [DataMember(Name = "persisted", EmitDefaultValue = true)]
        public bool Persisted { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets ItemCount
        /// </summary>
        [DataMember(Name = "itemCount", EmitDefaultValue = false)]
        public int ItemCount { get; set; }

        /// <summary>
        /// Gets or Sets Cancelled
        /// </summary>
        [DataMember(Name = "cancelled", EmitDefaultValue = true)]
        public bool Cancelled { get; set; }

        /// <summary>
        /// Gets or Sets TotalCustomerDiscount
        /// </summary>
        [DataMember(Name = "totalCustomerDiscount", EmitDefaultValue = false)]
        public decimal TotalCustomerDiscount { get; set; }

        /// <summary>
        /// Gets or Sets FirstOccurringFeeDate
        /// </summary>
        [DataMember(Name = "firstOccurringFeeDate", EmitDefaultValue = false)]
        public DateTime FirstOccurringFeeDate { get; set; }

        /// <summary>
        /// Gets or Sets New
        /// </summary>
        [DataMember(Name = "new", EmitDefaultValue = true)]
        public bool New { get; set; }

        /// <summary>
        /// Gets or Sets AllAssignedSeatCount
        /// </summary>
        [DataMember(Name = "allAssignedSeatCount", EmitDefaultValue = false)]
        public int AllAssignedSeatCount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionChargeItem
        /// </summary>
        [DataMember(Name = "transactionChargeItem", EmitDefaultValue = true)]
        public bool TransactionChargeItem { get; set; }

        /// <summary>
        /// Gets or Sets TotalFee
        /// </summary>
        [DataMember(Name = "totalFee", EmitDefaultValue = false)]
        public decimal TotalFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalTax
        /// </summary>
        [DataMember(Name = "totalTax", EmitDefaultValue = false)]
        public decimal TotalTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalGratuity
        /// </summary>
        [DataMember(Name = "totalGratuity", EmitDefaultValue = false)]
        public decimal TotalGratuity { get; set; }

        /// <summary>
        /// Gets or Sets TotalDesignationCount
        /// </summary>
        [DataMember(Name = "totalDesignationCount", EmitDefaultValue = false)]
        public int TotalDesignationCount { get; set; }

        /// <summary>
        /// Gets or Sets SeatedCount
        /// </summary>
        [DataMember(Name = "seatedCount", EmitDefaultValue = false)]
        public int SeatedCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalDiscount
        /// </summary>
        [DataMember(Name = "totalDiscount", EmitDefaultValue = false)]
        public decimal TotalDiscount { get; set; }

        /// <summary>
        /// Gets or Sets PaidCount
        /// </summary>
        [DataMember(Name = "paidCount", EmitDefaultValue = false)]
        public int PaidCount { get; set; }

        /// <summary>
        /// Gets or Sets UnprintedCount
        /// </summary>
        [DataMember(Name = "unprintedCount", EmitDefaultValue = false)]
        public int UnprintedCount { get; set; }

        /// <summary>
        /// Gets or Sets CompCount
        /// </summary>
        [DataMember(Name = "compCount", EmitDefaultValue = false)]
        public int CompCount { get; set; }

        /// <summary>
        /// Gets or Sets ZonedEventDateTime
        /// </summary>
        [DataMember(Name = "zonedEventDateTime", EmitDefaultValue = false)]
        public DateTime ZonedEventDateTime { get; set; }

        /// <summary>
        /// Gets or Sets AssignedSeatCount
        /// </summary>
        [DataMember(Name = "assignedSeatCount", EmitDefaultValue = false)]
        public int AssignedSeatCount { get; set; }

        /// <summary>
        /// Gets or Sets ManualDiscountValue
        /// </summary>
        [DataMember(Name = "manualDiscountValue", EmitDefaultValue = false)]
        public decimal ManualDiscountValue { get; set; }

        /// <summary>
        /// Gets or Sets GrandTotalSavings
        /// </summary>
        [DataMember(Name = "grandTotalSavings", EmitDefaultValue = false)]
        public decimal GrandTotalSavings { get; set; }

        /// <summary>
        /// Gets or Sets NetPrice
        /// </summary>
        [DataMember(Name = "netPrice", EmitDefaultValue = false)]
        public decimal NetPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalSavings
        /// </summary>
        [DataMember(Name = "totalSavings", EmitDefaultValue = false)]
        public decimal TotalSavings { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name = "taxable", EmitDefaultValue = true)]
        public bool Taxable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  SeatDriverWithGroup: ").Append(SeatDriverWithGroup).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  CanDoSteps: ").Append(CanDoSteps).Append("\n");
            sb.Append("  MealDateTime: ").Append(MealDateTime).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  ShowDateTime: ").Append(ShowDateTime).Append("\n");
            sb.Append("  LumpSumDiscount: ").Append(LumpSumDiscount).Append("\n");
            sb.Append("  ItemTotalPrice: ").Append(ItemTotalPrice).Append("\n");
            sb.Append("  OverflowCount: ").Append(OverflowCount).Append("\n");
            sb.Append("  OrderItemStatusCode: ").Append(OrderItemStatusCode).Append("\n");
            sb.Append("  CustTanDCProfileCode: ").Append(CustTanDCProfileCode).Append("\n");
            sb.Append("  PriceListCode: ").Append(PriceListCode).Append("\n");
            sb.Append("  PrintedCount: ").Append(PrintedCount).Append("\n");
            sb.Append("  VoucherPrinted: ").Append(VoucherPrinted).Append("\n");
            sb.Append("  CancelUserId: ").Append(CancelUserId).Append("\n");
            sb.Append("  CancelDate: ").Append(CancelDate).Append("\n");
            sb.Append("  CancelConfirmDate: ").Append(CancelConfirmDate).Append("\n");
            sb.Append("  ConfirmDate: ").Append(ConfirmDate).Append("\n");
            sb.Append("  ActiveWithOrder: ").Append(ActiveWithOrder).Append("\n");
            sb.Append("  RestContactName: ").Append(RestContactName).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  AddLocation: ").Append(AddLocation).Append("\n");
            sb.Append("  AddDate: ").Append(AddDate).Append("\n");
            sb.Append("  CancelLocation: ").Append(CancelLocation).Append("\n");
            sb.Append("  TransFromItem: ").Append(TransFromItem).Append("\n");
            sb.Append("  TransToItem: ").Append(TransToItem).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  EventDateTime: ").Append(EventDateTime).Append("\n");
            sb.Append("  VoucherExpirationDate: ").Append(VoucherExpirationDate).Append("\n");
            sb.Append("  BusCount: ").Append(BusCount).Append("\n");
            sb.Append("  GivexNumber: ").Append(GivexNumber).Append("\n");
            sb.Append("  GivexSecurityCode: ").Append(GivexSecurityCode).Append("\n");
            sb.Append("  ActivateUserId: ").Append(ActivateUserId).Append("\n");
            sb.Append("  ActivateDate: ").Append(ActivateDate).Append("\n");
            sb.Append("  EmpBenefitCode: ").Append(EmpBenefitCode).Append("\n");
            sb.Append("  PartnerConfirm: ").Append(PartnerConfirm).Append("\n");
            sb.Append("  PartnerEvent: ").Append(PartnerEvent).Append("\n");
            sb.Append("  PluNumber: ").Append(PluNumber).Append("\n");
            sb.Append("  SkuCode: ").Append(SkuCode).Append("\n");
            sb.Append("  SkuDescription: ").Append(SkuDescription).Append("\n");
            sb.Append("  SkuBinLocation: ").Append(SkuBinLocation).Append("\n");
            sb.Append("  SkuTaxType: ").Append(SkuTaxType).Append("\n");
            sb.Append("  Sale: ").Append(Sale).Append("\n");
            sb.Append("  ManDiscountCode: ").Append(ManDiscountCode).Append("\n");
            sb.Append("  MiscSkuRef: ").Append(MiscSkuRef).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  TrackNumber: ").Append(TrackNumber).Append("\n");
            sb.Append("  Damaged: ").Append(Damaged).Append("\n");
            sb.Append("  ShipMethod: ").Append(ShipMethod).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ItemGrandTotalPrice: ").Append(ItemGrandTotalPrice).Append("\n");
            sb.Append("  TraDevCount: ").Append(TraDevCount).Append("\n");
            sb.Append("  MiscSkuDescription: ").Append(MiscSkuDescription).Append("\n");
            sb.Append("  Free: ").Append(Free).Append("\n");
            sb.Append("  OldPartnerConfirm: ").Append(OldPartnerConfirm).Append("\n");
            sb.Append("  FreeForItemNumber: ").Append(FreeForItemNumber).Append("\n");
            sb.Append("  TraDevLangCode: ").Append(TraDevLangCode).Append("\n");
            sb.Append("  Bus: ").Append(Bus).Append("\n");
            sb.Append("  TravelPhoneNumber: ").Append(TravelPhoneNumber).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  SpecialSituations: ").Append(SpecialSituations).Append("\n");
            sb.Append("  OrderItemDetails: ").Append(OrderItemDetails).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("  OverflowSeats: ").Append(OverflowSeats).Append("\n");
            sb.Append("  ItemFees: ").Append(ItemFees).Append("\n");
            sb.Append("  ItemTaxes: ").Append(ItemTaxes).Append("\n");
            sb.Append("  ItemComps: ").Append(ItemComps).Append("\n");
            sb.Append("  GroupInfo: ").Append(GroupInfo).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  MiscEvent: ").Append(MiscEvent).Append("\n");
            sb.Append("  LogActivity: ").Append(LogActivity).Append("\n");
            sb.Append("  LogChanges: ").Append(LogChanges).Append("\n");
            sb.Append("  SeatOverBooked: ").Append(SeatOverBooked).Append("\n");
            sb.Append("  SeatOverbookCount: ").Append(SeatOverbookCount).Append("\n");
            sb.Append("  SendToAccpac: ").Append(SendToAccpac).Append("\n");
            sb.Append("  Persisted: ").Append(Persisted).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  ItemCount: ").Append(ItemCount).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  TotalCustomerDiscount: ").Append(TotalCustomerDiscount).Append("\n");
            sb.Append("  FirstOccurringFeeDate: ").Append(FirstOccurringFeeDate).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  AllAssignedSeatCount: ").Append(AllAssignedSeatCount).Append("\n");
            sb.Append("  TransactionChargeItem: ").Append(TransactionChargeItem).Append("\n");
            sb.Append("  TotalFee: ").Append(TotalFee).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  TotalGratuity: ").Append(TotalGratuity).Append("\n");
            sb.Append("  TotalDesignationCount: ").Append(TotalDesignationCount).Append("\n");
            sb.Append("  SeatedCount: ").Append(SeatedCount).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  PaidCount: ").Append(PaidCount).Append("\n");
            sb.Append("  UnprintedCount: ").Append(UnprintedCount).Append("\n");
            sb.Append("  CompCount: ").Append(CompCount).Append("\n");
            sb.Append("  ZonedEventDateTime: ").Append(ZonedEventDateTime).Append("\n");
            sb.Append("  AssignedSeatCount: ").Append(AssignedSeatCount).Append("\n");
            sb.Append("  ManualDiscountValue: ").Append(ManualDiscountValue).Append("\n");
            sb.Append("  GrandTotalSavings: ").Append(GrandTotalSavings).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  TotalSavings: ").Append(TotalSavings).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.SeatDriverWithGroup == input.SeatDriverWithGroup ||
                    this.SeatDriverWithGroup.Equals(input.SeatDriverWithGroup)
                ) && 
                (
                    this.Confirmed == input.Confirmed ||
                    this.Confirmed.Equals(input.Confirmed)
                ) && 
                (
                    this.CanDoSteps == input.CanDoSteps ||
                    this.CanDoSteps.Equals(input.CanDoSteps)
                ) && 
                (
                    this.MealDateTime == input.MealDateTime ||
                    (this.MealDateTime != null &&
                    this.MealDateTime.Equals(input.MealDateTime))
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.ShowDateTime == input.ShowDateTime ||
                    (this.ShowDateTime != null &&
                    this.ShowDateTime.Equals(input.ShowDateTime))
                ) && 
                (
                    this.LumpSumDiscount == input.LumpSumDiscount ||
                    this.LumpSumDiscount.Equals(input.LumpSumDiscount)
                ) && 
                (
                    this.ItemTotalPrice == input.ItemTotalPrice ||
                    this.ItemTotalPrice.Equals(input.ItemTotalPrice)
                ) && 
                (
                    this.OverflowCount == input.OverflowCount ||
                    this.OverflowCount.Equals(input.OverflowCount)
                ) && 
                (
                    this.OrderItemStatusCode == input.OrderItemStatusCode ||
                    this.OrderItemStatusCode.Equals(input.OrderItemStatusCode)
                ) && 
                (
                    this.CustTanDCProfileCode == input.CustTanDCProfileCode ||
                    (this.CustTanDCProfileCode != null &&
                    this.CustTanDCProfileCode.Equals(input.CustTanDCProfileCode))
                ) && 
                (
                    this.PriceListCode == input.PriceListCode ||
                    (this.PriceListCode != null &&
                    this.PriceListCode.Equals(input.PriceListCode))
                ) && 
                (
                    this.PrintedCount == input.PrintedCount ||
                    this.PrintedCount.Equals(input.PrintedCount)
                ) && 
                (
                    this.VoucherPrinted == input.VoucherPrinted ||
                    this.VoucherPrinted.Equals(input.VoucherPrinted)
                ) && 
                (
                    this.CancelUserId == input.CancelUserId ||
                    (this.CancelUserId != null &&
                    this.CancelUserId.Equals(input.CancelUserId))
                ) && 
                (
                    this.CancelDate == input.CancelDate ||
                    (this.CancelDate != null &&
                    this.CancelDate.Equals(input.CancelDate))
                ) && 
                (
                    this.CancelConfirmDate == input.CancelConfirmDate ||
                    (this.CancelConfirmDate != null &&
                    this.CancelConfirmDate.Equals(input.CancelConfirmDate))
                ) && 
                (
                    this.ConfirmDate == input.ConfirmDate ||
                    (this.ConfirmDate != null &&
                    this.ConfirmDate.Equals(input.ConfirmDate))
                ) && 
                (
                    this.ActiveWithOrder == input.ActiveWithOrder ||
                    this.ActiveWithOrder.Equals(input.ActiveWithOrder)
                ) && 
                (
                    this.RestContactName == input.RestContactName ||
                    (this.RestContactName != null &&
                    this.RestContactName.Equals(input.RestContactName))
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.AddLocation == input.AddLocation ||
                    (this.AddLocation != null &&
                    this.AddLocation.Equals(input.AddLocation))
                ) && 
                (
                    this.AddDate == input.AddDate ||
                    (this.AddDate != null &&
                    this.AddDate.Equals(input.AddDate))
                ) && 
                (
                    this.CancelLocation == input.CancelLocation ||
                    (this.CancelLocation != null &&
                    this.CancelLocation.Equals(input.CancelLocation))
                ) && 
                (
                    this.TransFromItem == input.TransFromItem ||
                    this.TransFromItem.Equals(input.TransFromItem)
                ) && 
                (
                    this.TransToItem == input.TransToItem ||
                    this.TransToItem.Equals(input.TransToItem)
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    this.ItemType.Equals(input.ItemType)
                ) && 
                (
                    this.EventDateTime == input.EventDateTime ||
                    (this.EventDateTime != null &&
                    this.EventDateTime.Equals(input.EventDateTime))
                ) && 
                (
                    this.VoucherExpirationDate == input.VoucherExpirationDate ||
                    (this.VoucherExpirationDate != null &&
                    this.VoucherExpirationDate.Equals(input.VoucherExpirationDate))
                ) && 
                (
                    this.BusCount == input.BusCount ||
                    this.BusCount.Equals(input.BusCount)
                ) && 
                (
                    this.GivexNumber == input.GivexNumber ||
                    (this.GivexNumber != null &&
                    this.GivexNumber.Equals(input.GivexNumber))
                ) && 
                (
                    this.GivexSecurityCode == input.GivexSecurityCode ||
                    (this.GivexSecurityCode != null &&
                    this.GivexSecurityCode.Equals(input.GivexSecurityCode))
                ) && 
                (
                    this.ActivateUserId == input.ActivateUserId ||
                    (this.ActivateUserId != null &&
                    this.ActivateUserId.Equals(input.ActivateUserId))
                ) && 
                (
                    this.ActivateDate == input.ActivateDate ||
                    (this.ActivateDate != null &&
                    this.ActivateDate.Equals(input.ActivateDate))
                ) && 
                (
                    this.EmpBenefitCode == input.EmpBenefitCode ||
                    this.EmpBenefitCode.Equals(input.EmpBenefitCode)
                ) && 
                (
                    this.PartnerConfirm == input.PartnerConfirm ||
                    (this.PartnerConfirm != null &&
                    this.PartnerConfirm.Equals(input.PartnerConfirm))
                ) && 
                (
                    this.PartnerEvent == input.PartnerEvent ||
                    this.PartnerEvent.Equals(input.PartnerEvent)
                ) && 
                (
                    this.PluNumber == input.PluNumber ||
                    (this.PluNumber != null &&
                    this.PluNumber.Equals(input.PluNumber))
                ) && 
                (
                    this.SkuCode == input.SkuCode ||
                    (this.SkuCode != null &&
                    this.SkuCode.Equals(input.SkuCode))
                ) && 
                (
                    this.SkuDescription == input.SkuDescription ||
                    (this.SkuDescription != null &&
                    this.SkuDescription.Equals(input.SkuDescription))
                ) && 
                (
                    this.SkuBinLocation == input.SkuBinLocation ||
                    (this.SkuBinLocation != null &&
                    this.SkuBinLocation.Equals(input.SkuBinLocation))
                ) && 
                (
                    this.SkuTaxType == input.SkuTaxType ||
                    this.SkuTaxType.Equals(input.SkuTaxType)
                ) && 
                (
                    this.Sale == input.Sale ||
                    this.Sale.Equals(input.Sale)
                ) && 
                (
                    this.ManDiscountCode == input.ManDiscountCode ||
                    (this.ManDiscountCode != null &&
                    this.ManDiscountCode.Equals(input.ManDiscountCode))
                ) && 
                (
                    this.MiscSkuRef == input.MiscSkuRef ||
                    (this.MiscSkuRef != null &&
                    this.MiscSkuRef.Equals(input.MiscSkuRef))
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.TrackNumber == input.TrackNumber ||
                    (this.TrackNumber != null &&
                    this.TrackNumber.Equals(input.TrackNumber))
                ) && 
                (
                    this.Damaged == input.Damaged ||
                    this.Damaged.Equals(input.Damaged)
                ) && 
                (
                    this.ShipMethod == input.ShipMethod ||
                    (this.ShipMethod != null &&
                    this.ShipMethod.Equals(input.ShipMethod))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ItemGrandTotalPrice == input.ItemGrandTotalPrice ||
                    this.ItemGrandTotalPrice.Equals(input.ItemGrandTotalPrice)
                ) && 
                (
                    this.TraDevCount == input.TraDevCount ||
                    this.TraDevCount.Equals(input.TraDevCount)
                ) && 
                (
                    this.MiscSkuDescription == input.MiscSkuDescription ||
                    (this.MiscSkuDescription != null &&
                    this.MiscSkuDescription.Equals(input.MiscSkuDescription))
                ) && 
                (
                    this.Free == input.Free ||
                    this.Free.Equals(input.Free)
                ) && 
                (
                    this.OldPartnerConfirm == input.OldPartnerConfirm ||
                    (this.OldPartnerConfirm != null &&
                    this.OldPartnerConfirm.Equals(input.OldPartnerConfirm))
                ) && 
                (
                    this.FreeForItemNumber == input.FreeForItemNumber ||
                    this.FreeForItemNumber.Equals(input.FreeForItemNumber)
                ) && 
                (
                    this.TraDevLangCode == input.TraDevLangCode ||
                    (this.TraDevLangCode != null &&
                    this.TraDevLangCode.Equals(input.TraDevLangCode))
                ) && 
                (
                    this.Bus == input.Bus ||
                    this.Bus.Equals(input.Bus)
                ) && 
                (
                    this.TravelPhoneNumber == input.TravelPhoneNumber ||
                    (this.TravelPhoneNumber != null &&
                    this.TravelPhoneNumber.Equals(input.TravelPhoneNumber))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.SpecialSituations == input.SpecialSituations ||
                    this.SpecialSituations != null &&
                    input.SpecialSituations != null &&
                    this.SpecialSituations.SequenceEqual(input.SpecialSituations)
                ) && 
                (
                    this.OrderItemDetails == input.OrderItemDetails ||
                    this.OrderItemDetails != null &&
                    input.OrderItemDetails != null &&
                    this.OrderItemDetails.SequenceEqual(input.OrderItemDetails)
                ) && 
                (
                    this.Seats == input.Seats ||
                    this.Seats != null &&
                    input.Seats != null &&
                    this.Seats.SequenceEqual(input.Seats)
                ) && 
                (
                    this.OverflowSeats == input.OverflowSeats ||
                    this.OverflowSeats != null &&
                    input.OverflowSeats != null &&
                    this.OverflowSeats.SequenceEqual(input.OverflowSeats)
                ) && 
                (
                    this.ItemFees == input.ItemFees ||
                    this.ItemFees != null &&
                    input.ItemFees != null &&
                    this.ItemFees.SequenceEqual(input.ItemFees)
                ) && 
                (
                    this.ItemTaxes == input.ItemTaxes ||
                    this.ItemTaxes != null &&
                    input.ItemTaxes != null &&
                    this.ItemTaxes.SequenceEqual(input.ItemTaxes)
                ) && 
                (
                    this.ItemComps == input.ItemComps ||
                    this.ItemComps != null &&
                    input.ItemComps != null &&
                    this.ItemComps.SequenceEqual(input.ItemComps)
                ) && 
                (
                    this.GroupInfo == input.GroupInfo ||
                    (this.GroupInfo != null &&
                    this.GroupInfo.Equals(input.GroupInfo))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.MiscEvent == input.MiscEvent ||
                    (this.MiscEvent != null &&
                    this.MiscEvent.Equals(input.MiscEvent))
                ) && 
                (
                    this.LogActivity == input.LogActivity ||
                    this.LogActivity.Equals(input.LogActivity)
                ) && 
                (
                    this.LogChanges == input.LogChanges ||
                    this.LogChanges.Equals(input.LogChanges)
                ) && 
                (
                    this.SeatOverBooked == input.SeatOverBooked ||
                    this.SeatOverBooked.Equals(input.SeatOverBooked)
                ) && 
                (
                    this.SeatOverbookCount == input.SeatOverbookCount ||
                    this.SeatOverbookCount.Equals(input.SeatOverbookCount)
                ) && 
                (
                    this.SendToAccpac == input.SendToAccpac ||
                    this.SendToAccpac.Equals(input.SendToAccpac)
                ) && 
                (
                    this.Persisted == input.Persisted ||
                    this.Persisted.Equals(input.Persisted)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.ItemCount == input.ItemCount ||
                    this.ItemCount.Equals(input.ItemCount)
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    this.Cancelled.Equals(input.Cancelled)
                ) && 
                (
                    this.TotalCustomerDiscount == input.TotalCustomerDiscount ||
                    this.TotalCustomerDiscount.Equals(input.TotalCustomerDiscount)
                ) && 
                (
                    this.FirstOccurringFeeDate == input.FirstOccurringFeeDate ||
                    (this.FirstOccurringFeeDate != null &&
                    this.FirstOccurringFeeDate.Equals(input.FirstOccurringFeeDate))
                ) && 
                (
                    this.New == input.New ||
                    this.New.Equals(input.New)
                ) && 
                (
                    this.AllAssignedSeatCount == input.AllAssignedSeatCount ||
                    this.AllAssignedSeatCount.Equals(input.AllAssignedSeatCount)
                ) && 
                (
                    this.TransactionChargeItem == input.TransactionChargeItem ||
                    this.TransactionChargeItem.Equals(input.TransactionChargeItem)
                ) && 
                (
                    this.TotalFee == input.TotalFee ||
                    this.TotalFee.Equals(input.TotalFee)
                ) && 
                (
                    this.TaxType == input.TaxType ||
                    this.TaxType.Equals(input.TaxType)
                ) && 
                (
                    this.TotalTax == input.TotalTax ||
                    this.TotalTax.Equals(input.TotalTax)
                ) && 
                (
                    this.TotalGratuity == input.TotalGratuity ||
                    this.TotalGratuity.Equals(input.TotalGratuity)
                ) && 
                (
                    this.TotalDesignationCount == input.TotalDesignationCount ||
                    this.TotalDesignationCount.Equals(input.TotalDesignationCount)
                ) && 
                (
                    this.SeatedCount == input.SeatedCount ||
                    this.SeatedCount.Equals(input.SeatedCount)
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    this.TotalDiscount.Equals(input.TotalDiscount)
                ) && 
                (
                    this.PaidCount == input.PaidCount ||
                    this.PaidCount.Equals(input.PaidCount)
                ) && 
                (
                    this.UnprintedCount == input.UnprintedCount ||
                    this.UnprintedCount.Equals(input.UnprintedCount)
                ) && 
                (
                    this.CompCount == input.CompCount ||
                    this.CompCount.Equals(input.CompCount)
                ) && 
                (
                    this.ZonedEventDateTime == input.ZonedEventDateTime ||
                    (this.ZonedEventDateTime != null &&
                    this.ZonedEventDateTime.Equals(input.ZonedEventDateTime))
                ) && 
                (
                    this.AssignedSeatCount == input.AssignedSeatCount ||
                    this.AssignedSeatCount.Equals(input.AssignedSeatCount)
                ) && 
                (
                    this.ManualDiscountValue == input.ManualDiscountValue ||
                    this.ManualDiscountValue.Equals(input.ManualDiscountValue)
                ) && 
                (
                    this.GrandTotalSavings == input.GrandTotalSavings ||
                    this.GrandTotalSavings.Equals(input.GrandTotalSavings)
                ) && 
                (
                    this.NetPrice == input.NetPrice ||
                    this.NetPrice.Equals(input.NetPrice)
                ) && 
                (
                    this.TotalSavings == input.TotalSavings ||
                    this.TotalSavings.Equals(input.TotalSavings)
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    this.Taxable.Equals(input.Taxable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatDriverWithGroup.GetHashCode();
                hashCode = (hashCode * 59) + this.Confirmed.GetHashCode();
                hashCode = (hashCode * 59) + this.CanDoSteps.GetHashCode();
                if (this.MealDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.MealDateTime.GetHashCode();
                }
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.ShowDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ShowDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LumpSumDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemTotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.OverflowCount.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderItemStatusCode.GetHashCode();
                if (this.CustTanDCProfileCode != null)
                {
                    hashCode = (hashCode * 59) + this.CustTanDCProfileCode.GetHashCode();
                }
                if (this.PriceListCode != null)
                {
                    hashCode = (hashCode * 59) + this.PriceListCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrintedCount.GetHashCode();
                hashCode = (hashCode * 59) + this.VoucherPrinted.GetHashCode();
                if (this.CancelUserId != null)
                {
                    hashCode = (hashCode * 59) + this.CancelUserId.GetHashCode();
                }
                if (this.CancelDate != null)
                {
                    hashCode = (hashCode * 59) + this.CancelDate.GetHashCode();
                }
                if (this.CancelConfirmDate != null)
                {
                    hashCode = (hashCode * 59) + this.CancelConfirmDate.GetHashCode();
                }
                if (this.ConfirmDate != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActiveWithOrder.GetHashCode();
                if (this.RestContactName != null)
                {
                    hashCode = (hashCode * 59) + this.RestContactName.GetHashCode();
                }
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                if (this.AddLocation != null)
                {
                    hashCode = (hashCode * 59) + this.AddLocation.GetHashCode();
                }
                if (this.AddDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddDate.GetHashCode();
                }
                if (this.CancelLocation != null)
                {
                    hashCode = (hashCode * 59) + this.CancelLocation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransFromItem.GetHashCode();
                hashCode = (hashCode * 59) + this.TransToItem.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                if (this.EventDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventDateTime.GetHashCode();
                }
                if (this.VoucherExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.VoucherExpirationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BusCount.GetHashCode();
                if (this.GivexNumber != null)
                {
                    hashCode = (hashCode * 59) + this.GivexNumber.GetHashCode();
                }
                if (this.GivexSecurityCode != null)
                {
                    hashCode = (hashCode * 59) + this.GivexSecurityCode.GetHashCode();
                }
                if (this.ActivateUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ActivateUserId.GetHashCode();
                }
                if (this.ActivateDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActivateDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmpBenefitCode.GetHashCode();
                if (this.PartnerConfirm != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerConfirm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PartnerEvent.GetHashCode();
                if (this.PluNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PluNumber.GetHashCode();
                }
                if (this.SkuCode != null)
                {
                    hashCode = (hashCode * 59) + this.SkuCode.GetHashCode();
                }
                if (this.SkuDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SkuDescription.GetHashCode();
                }
                if (this.SkuBinLocation != null)
                {
                    hashCode = (hashCode * 59) + this.SkuBinLocation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkuTaxType.GetHashCode();
                hashCode = (hashCode * 59) + this.Sale.GetHashCode();
                if (this.ManDiscountCode != null)
                {
                    hashCode = (hashCode * 59) + this.ManDiscountCode.GetHashCode();
                }
                if (this.MiscSkuRef != null)
                {
                    hashCode = (hashCode * 59) + this.MiscSkuRef.GetHashCode();
                }
                if (this.ShipDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShipDate.GetHashCode();
                }
                if (this.TrackNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TrackNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Damaged.GetHashCode();
                if (this.ShipMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShipMethod.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemGrandTotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TraDevCount.GetHashCode();
                if (this.MiscSkuDescription != null)
                {
                    hashCode = (hashCode * 59) + this.MiscSkuDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Free.GetHashCode();
                if (this.OldPartnerConfirm != null)
                {
                    hashCode = (hashCode * 59) + this.OldPartnerConfirm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FreeForItemNumber.GetHashCode();
                if (this.TraDevLangCode != null)
                {
                    hashCode = (hashCode * 59) + this.TraDevLangCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Bus.GetHashCode();
                if (this.TravelPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TravelPhoneNumber.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.SpecialSituations != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialSituations.GetHashCode();
                }
                if (this.OrderItemDetails != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItemDetails.GetHashCode();
                }
                if (this.Seats != null)
                {
                    hashCode = (hashCode * 59) + this.Seats.GetHashCode();
                }
                if (this.OverflowSeats != null)
                {
                    hashCode = (hashCode * 59) + this.OverflowSeats.GetHashCode();
                }
                if (this.ItemFees != null)
                {
                    hashCode = (hashCode * 59) + this.ItemFees.GetHashCode();
                }
                if (this.ItemTaxes != null)
                {
                    hashCode = (hashCode * 59) + this.ItemTaxes.GetHashCode();
                }
                if (this.ItemComps != null)
                {
                    hashCode = (hashCode * 59) + this.ItemComps.GetHashCode();
                }
                if (this.GroupInfo != null)
                {
                    hashCode = (hashCode * 59) + this.GroupInfo.GetHashCode();
                }
                if (this.Event != null)
                {
                    hashCode = (hashCode * 59) + this.Event.GetHashCode();
                }
                if (this.MiscEvent != null)
                {
                    hashCode = (hashCode * 59) + this.MiscEvent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogActivity.GetHashCode();
                hashCode = (hashCode * 59) + this.LogChanges.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatOverBooked.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatOverbookCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SendToAccpac.GetHashCode();
                hashCode = (hashCode * 59) + this.Persisted.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Cancelled.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCustomerDiscount.GetHashCode();
                if (this.FirstOccurringFeeDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOccurringFeeDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.New.GetHashCode();
                hashCode = (hashCode * 59) + this.AllAssignedSeatCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionChargeItem.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalFee.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxType.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalTax.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalGratuity.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDesignationCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatedCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidCount.GetHashCode();
                hashCode = (hashCode * 59) + this.UnprintedCount.GetHashCode();
                hashCode = (hashCode * 59) + this.CompCount.GetHashCode();
                if (this.ZonedEventDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ZonedEventDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssignedSeatCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ManualDiscountValue.GetHashCode();
                hashCode = (hashCode * 59) + this.GrandTotalSavings.GetHashCode();
                hashCode = (hashCode * 59) + this.NetPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalSavings.GetHashCode();
                hashCode = (hashCode * 59) + this.Taxable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CustTanDCProfileCode (string) maxLength
            if (this.CustTanDCProfileCode != null && this.CustTanDCProfileCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustTanDCProfileCode, length must be less than 20.", new [] { "CustTanDCProfileCode" });
            }

            // CustTanDCProfileCode (string) minLength
            if (this.CustTanDCProfileCode != null && this.CustTanDCProfileCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustTanDCProfileCode, length must be greater than 0.", new [] { "CustTanDCProfileCode" });
            }

            // PriceListCode (string) maxLength
            if (this.PriceListCode != null && this.PriceListCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceListCode, length must be less than 20.", new [] { "PriceListCode" });
            }

            // PriceListCode (string) minLength
            if (this.PriceListCode != null && this.PriceListCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceListCode, length must be greater than 0.", new [] { "PriceListCode" });
            }

            // CancelUserId (string) maxLength
            if (this.CancelUserId != null && this.CancelUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelUserId, length must be less than 50.", new [] { "CancelUserId" });
            }

            // CancelUserId (string) minLength
            if (this.CancelUserId != null && this.CancelUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelUserId, length must be greater than 0.", new [] { "CancelUserId" });
            }

            // RestContactName (string) maxLength
            if (this.RestContactName != null && this.RestContactName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RestContactName, length must be less than 30.", new [] { "RestContactName" });
            }

            // RestContactName (string) minLength
            if (this.RestContactName != null && this.RestContactName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RestContactName, length must be greater than 0.", new [] { "RestContactName" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            // AddLocation (string) maxLength
            if (this.AddLocation != null && this.AddLocation.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddLocation, length must be less than 50.", new [] { "AddLocation" });
            }

            // AddLocation (string) minLength
            if (this.AddLocation != null && this.AddLocation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddLocation, length must be greater than 0.", new [] { "AddLocation" });
            }

            // CancelLocation (string) maxLength
            if (this.CancelLocation != null && this.CancelLocation.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelLocation, length must be less than 50.", new [] { "CancelLocation" });
            }

            // CancelLocation (string) minLength
            if (this.CancelLocation != null && this.CancelLocation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelLocation, length must be greater than 0.", new [] { "CancelLocation" });
            }

            // GivexNumber (string) maxLength
            if (this.GivexNumber != null && this.GivexNumber.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GivexNumber, length must be less than 25.", new [] { "GivexNumber" });
            }

            // GivexNumber (string) minLength
            if (this.GivexNumber != null && this.GivexNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GivexNumber, length must be greater than 0.", new [] { "GivexNumber" });
            }

            // GivexSecurityCode (string) maxLength
            if (this.GivexSecurityCode != null && this.GivexSecurityCode.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GivexSecurityCode, length must be less than 25.", new [] { "GivexSecurityCode" });
            }

            // GivexSecurityCode (string) minLength
            if (this.GivexSecurityCode != null && this.GivexSecurityCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GivexSecurityCode, length must be greater than 0.", new [] { "GivexSecurityCode" });
            }

            // ActivateUserId (string) maxLength
            if (this.ActivateUserId != null && this.ActivateUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActivateUserId, length must be less than 50.", new [] { "ActivateUserId" });
            }

            // ActivateUserId (string) minLength
            if (this.ActivateUserId != null && this.ActivateUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActivateUserId, length must be greater than 0.", new [] { "ActivateUserId" });
            }

            // PartnerConfirm (string) maxLength
            if (this.PartnerConfirm != null && this.PartnerConfirm.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerConfirm, length must be less than 100.", new [] { "PartnerConfirm" });
            }

            // PartnerConfirm (string) minLength
            if (this.PartnerConfirm != null && this.PartnerConfirm.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerConfirm, length must be greater than 0.", new [] { "PartnerConfirm" });
            }

            // PluNumber (string) maxLength
            if (this.PluNumber != null && this.PluNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PluNumber, length must be less than 20.", new [] { "PluNumber" });
            }

            // PluNumber (string) minLength
            if (this.PluNumber != null && this.PluNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PluNumber, length must be greater than 0.", new [] { "PluNumber" });
            }

            // SkuCode (string) maxLength
            if (this.SkuCode != null && this.SkuCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuCode, length must be less than 20.", new [] { "SkuCode" });
            }

            // SkuCode (string) minLength
            if (this.SkuCode != null && this.SkuCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuCode, length must be greater than 0.", new [] { "SkuCode" });
            }

            // SkuDescription (string) maxLength
            if (this.SkuDescription != null && this.SkuDescription.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuDescription, length must be less than 250.", new [] { "SkuDescription" });
            }

            // SkuDescription (string) minLength
            if (this.SkuDescription != null && this.SkuDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuDescription, length must be greater than 0.", new [] { "SkuDescription" });
            }

            // SkuBinLocation (string) maxLength
            if (this.SkuBinLocation != null && this.SkuBinLocation.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuBinLocation, length must be less than 20.", new [] { "SkuBinLocation" });
            }

            // SkuBinLocation (string) minLength
            if (this.SkuBinLocation != null && this.SkuBinLocation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuBinLocation, length must be greater than 0.", new [] { "SkuBinLocation" });
            }

            // ManDiscountCode (string) maxLength
            if (this.ManDiscountCode != null && this.ManDiscountCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ManDiscountCode, length must be less than 20.", new [] { "ManDiscountCode" });
            }

            // ManDiscountCode (string) minLength
            if (this.ManDiscountCode != null && this.ManDiscountCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ManDiscountCode, length must be greater than 0.", new [] { "ManDiscountCode" });
            }

            // MiscSkuRef (string) maxLength
            if (this.MiscSkuRef != null && this.MiscSkuRef.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiscSkuRef, length must be less than 250.", new [] { "MiscSkuRef" });
            }

            // MiscSkuRef (string) minLength
            if (this.MiscSkuRef != null && this.MiscSkuRef.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiscSkuRef, length must be greater than 0.", new [] { "MiscSkuRef" });
            }

            // TrackNumber (string) maxLength
            if (this.TrackNumber != null && this.TrackNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackNumber, length must be less than 50.", new [] { "TrackNumber" });
            }

            // TrackNumber (string) minLength
            if (this.TrackNumber != null && this.TrackNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackNumber, length must be greater than 0.", new [] { "TrackNumber" });
            }

            // ShipMethod (string) maxLength
            if (this.ShipMethod != null && this.ShipMethod.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipMethod, length must be less than 50.", new [] { "ShipMethod" });
            }

            // ShipMethod (string) minLength
            if (this.ShipMethod != null && this.ShipMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipMethod, length must be greater than 0.", new [] { "ShipMethod" });
            }

            // Comments (string) maxLength
            if (this.Comments != null && this.Comments.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 50.", new [] { "Comments" });
            }

            // Comments (string) minLength
            if (this.Comments != null && this.Comments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be greater than 0.", new [] { "Comments" });
            }

            // MiscSkuDescription (string) maxLength
            if (this.MiscSkuDescription != null && this.MiscSkuDescription.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiscSkuDescription, length must be less than 50.", new [] { "MiscSkuDescription" });
            }

            // MiscSkuDescription (string) minLength
            if (this.MiscSkuDescription != null && this.MiscSkuDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiscSkuDescription, length must be greater than 0.", new [] { "MiscSkuDescription" });
            }

            // OldPartnerConfirm (string) maxLength
            if (this.OldPartnerConfirm != null && this.OldPartnerConfirm.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OldPartnerConfirm, length must be less than 100.", new [] { "OldPartnerConfirm" });
            }

            // OldPartnerConfirm (string) minLength
            if (this.OldPartnerConfirm != null && this.OldPartnerConfirm.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OldPartnerConfirm, length must be greater than 0.", new [] { "OldPartnerConfirm" });
            }

            // TraDevLangCode (string) maxLength
            if (this.TraDevLangCode != null && this.TraDevLangCode.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TraDevLangCode, length must be less than 1.", new [] { "TraDevLangCode" });
            }

            // TraDevLangCode (string) minLength
            if (this.TraDevLangCode != null && this.TraDevLangCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TraDevLangCode, length must be greater than 0.", new [] { "TraDevLangCode" });
            }

            // TravelPhoneNumber (string) maxLength
            if (this.TravelPhoneNumber != null && this.TravelPhoneNumber.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TravelPhoneNumber, length must be less than 30.", new [] { "TravelPhoneNumber" });
            }

            // TravelPhoneNumber (string) minLength
            if (this.TravelPhoneNumber != null && this.TravelPhoneNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TravelPhoneNumber, length must be greater than 0.", new [] { "TravelPhoneNumber" });
            }

            yield break;
        }
    }

}
