/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// CustomerContactInfo
    /// </summary>
    [DataContract(Name = "CustomerContactInfo")]
    public partial class CustomerContactInfo : IEquatable<CustomerContactInfo>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        [DataMember(Name = "phoneType", EmitDefaultValue = false)]
        public PhoneType? PhoneType { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public AdditionalContactRole? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerContactInfo" /> class.
        /// </summary>
        /// <param name="contactId">contactId.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="customer">customer.</param>
        /// <param name="title">title.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="extension">extension.</param>
        /// <param name="addDate">addDate.</param>
        /// <param name="addUserId">addUserId.</param>
        /// <param name="phoneType">phoneType.</param>
        /// <param name="emailList">emailList.</param>
        /// <param name="callList">callList.</param>
        /// <param name="textList">textList.</param>
        /// <param name="role">role.</param>
        /// <param name="primary">primary.</param>
        /// <param name="modifyDate">modifyDate.</param>
        /// <param name="modifyUserId">modifyUserId.</param>
        /// <param name="communicationPreferences">communicationPreferences.</param>
        public CustomerContactInfo(long contactId = default(long), long customerNumber = default(long), Customer customer = default(Customer), string title = default(string), string firstName = default(string), string lastName = default(string), string emailAddress = default(string), string phoneNumber = default(string), string extension = default(string), DateTime addDate = default(DateTime), string addUserId = default(string), PhoneType? phoneType = default(PhoneType?), bool emailList = default(bool), bool callList = default(bool), bool textList = default(bool), AdditionalContactRole? role = default(AdditionalContactRole?), bool primary = default(bool), DateTime modifyDate = default(DateTime), string modifyUserId = default(string), List<CustomerContactInfoCommunicationTag> communicationPreferences = default(List<CustomerContactInfoCommunicationTag>))
        {
            this.ContactId = contactId;
            this.CustomerNumber = customerNumber;
            this.Customer = customer;
            this.Title = title;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.EmailAddress = emailAddress;
            this.PhoneNumber = phoneNumber;
            this.Extension = extension;
            this.AddDate = addDate;
            this.AddUserId = addUserId;
            this.PhoneType = phoneType;
            this.EmailList = emailList;
            this.CallList = callList;
            this.TextList = textList;
            this.Role = role;
            this.Primary = primary;
            this.ModifyDate = modifyDate;
            this.ModifyUserId = modifyUserId;
            this.CommunicationPreferences = communicationPreferences;
        }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contactId", EmitDefaultValue = false)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name = "extension", EmitDefaultValue = false)]
        public string Extension { get; set; }

        /// <summary>
        /// Gets or Sets AddDate
        /// </summary>
        [DataMember(Name = "addDate", EmitDefaultValue = false)]
        public DateTime AddDate { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets EmailList
        /// </summary>
        [DataMember(Name = "emailList", EmitDefaultValue = true)]
        public bool EmailList { get; set; }

        /// <summary>
        /// Gets or Sets CallList
        /// </summary>
        [DataMember(Name = "callList", EmitDefaultValue = true)]
        public bool CallList { get; set; }

        /// <summary>
        /// Gets or Sets TextList
        /// </summary>
        [DataMember(Name = "textList", EmitDefaultValue = true)]
        public bool TextList { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name = "primary", EmitDefaultValue = true)]
        public bool Primary { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name = "modifyDate", EmitDefaultValue = false)]
        public DateTime ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifyUserId
        /// </summary>
        [DataMember(Name = "modifyUserId", EmitDefaultValue = false)]
        public string ModifyUserId { get; set; }

        /// <summary>
        /// Gets or Sets CommunicationPreferences
        /// </summary>
        [DataMember(Name = "communicationPreferences", EmitDefaultValue = false)]
        public List<CustomerContactInfoCommunicationTag> CommunicationPreferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerContactInfo {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  AddDate: ").Append(AddDate).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  EmailList: ").Append(EmailList).Append("\n");
            sb.Append("  CallList: ").Append(CallList).Append("\n");
            sb.Append("  TextList: ").Append(TextList).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  ModifyUserId: ").Append(ModifyUserId).Append("\n");
            sb.Append("  CommunicationPreferences: ").Append(CommunicationPreferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerContactInfo);
        }

        /// <summary>
        /// Returns true if CustomerContactInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerContactInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerContactInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactId == input.ContactId ||
                    this.ContactId.Equals(input.ContactId)
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.AddDate == input.AddDate ||
                    (this.AddDate != null &&
                    this.AddDate.Equals(input.AddDate))
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.PhoneType == input.PhoneType ||
                    this.PhoneType.Equals(input.PhoneType)
                ) && 
                (
                    this.EmailList == input.EmailList ||
                    this.EmailList.Equals(input.EmailList)
                ) && 
                (
                    this.CallList == input.CallList ||
                    this.CallList.Equals(input.CallList)
                ) && 
                (
                    this.TextList == input.TextList ||
                    this.TextList.Equals(input.TextList)
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                ) && 
                (
                    this.Primary == input.Primary ||
                    this.Primary.Equals(input.Primary)
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.ModifyUserId == input.ModifyUserId ||
                    (this.ModifyUserId != null &&
                    this.ModifyUserId.Equals(input.ModifyUserId))
                ) && 
                (
                    this.CommunicationPreferences == input.CommunicationPreferences ||
                    this.CommunicationPreferences != null &&
                    input.CommunicationPreferences != null &&
                    this.CommunicationPreferences.SequenceEqual(input.CommunicationPreferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.Extension != null)
                {
                    hashCode = (hashCode * 59) + this.Extension.GetHashCode();
                }
                if (this.AddDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddDate.GetHashCode();
                }
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhoneType.GetHashCode();
                hashCode = (hashCode * 59) + this.EmailList.GetHashCode();
                hashCode = (hashCode * 59) + this.CallList.GetHashCode();
                hashCode = (hashCode * 59) + this.TextList.GetHashCode();
                hashCode = (hashCode * 59) + this.Role.GetHashCode();
                hashCode = (hashCode * 59) + this.Primary.GetHashCode();
                if (this.ModifyDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyDate.GetHashCode();
                }
                if (this.ModifyUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyUserId.GetHashCode();
                }
                if (this.CommunicationPreferences != null)
                {
                    hashCode = (hashCode * 59) + this.CommunicationPreferences.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 20.", new [] { "Title" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 0.", new [] { "Title" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 50.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if (this.FirstName != null && this.FirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 0.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 50.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if (this.LastName != null && this.LastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 0.", new [] { "LastName" });
            }

            // EmailAddress (string) maxLength
            if (this.EmailAddress != null && this.EmailAddress.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 50.", new [] { "EmailAddress" });
            }

            // EmailAddress (string) minLength
            if (this.EmailAddress != null && this.EmailAddress.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be greater than 0.", new [] { "EmailAddress" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be greater than 0.", new [] { "PhoneNumber" });
            }

            // Extension (string) maxLength
            if (this.Extension != null && this.Extension.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Extension, length must be less than 20.", new [] { "Extension" });
            }

            // Extension (string) minLength
            if (this.Extension != null && this.Extension.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Extension, length must be greater than 0.", new [] { "Extension" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            // ModifyUserId (string) maxLength
            if (this.ModifyUserId != null && this.ModifyUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyUserId, length must be less than 50.", new [] { "ModifyUserId" });
            }

            // ModifyUserId (string) minLength
            if (this.ModifyUserId != null && this.ModifyUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyUserId, length must be greater than 0.", new [] { "ModifyUserId" });
            }

            yield break;
        }
    }

}
