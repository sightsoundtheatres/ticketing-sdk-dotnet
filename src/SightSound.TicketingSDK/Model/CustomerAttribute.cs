/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// CustomerAttribute
    /// </summary>
    [DataContract(Name = "CustomerAttribute")]
    public partial class CustomerAttribute : IEquatable<CustomerAttribute>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AttributeType
        /// </summary>
        [DataMember(Name = "attributeType", EmitDefaultValue = false)]
        public CustomerAttributeType? AttributeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAttribute" /> class.
        /// </summary>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="attribute">attribute (required).</param>
        /// <param name="attributeType">attributeType.</param>
        /// <param name="customer">customer.</param>
        public CustomerAttribute(long customerNumber = default(long), string attribute = default(string), CustomerAttributeType? attributeType = default(CustomerAttributeType?), Customer customer = default(Customer))
        {
            // to ensure "attribute" is required (not null)
            if (attribute == null)
            {
                throw new ArgumentNullException("attribute is a required property for CustomerAttribute and cannot be null");
            }
            this.Attribute = attribute;
            this.CustomerNumber = customerNumber;
            this.AttributeType = attributeType;
            this.Customer = customer;
        }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "attribute", IsRequired = true, EmitDefaultValue = false)]
        public string Attribute { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAttribute {\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  AttributeType: ").Append(AttributeType).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerAttribute);
        }

        /// <summary>
        /// Returns true if CustomerAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerAttribute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                ) && 
                (
                    this.AttributeType == input.AttributeType ||
                    this.AttributeType.Equals(input.AttributeType)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AttributeType.GetHashCode();
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Attribute (string) maxLength
            if (this.Attribute != null && this.Attribute.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attribute, length must be less than 200.", new [] { "Attribute" });
            }

            // Attribute (string) minLength
            if (this.Attribute != null && this.Attribute.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attribute, length must be greater than 0.", new [] { "Attribute" });
            }

            yield break;
        }
    }

}
