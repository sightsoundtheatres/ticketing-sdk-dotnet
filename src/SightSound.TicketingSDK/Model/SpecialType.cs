/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// SpecialType
    /// </summary>
    [DataContract(Name = "SpecialType")]
    public partial class SpecialType : IEquatable<SpecialType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpecialType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialType" /> class.
        /// </summary>
        /// <param name="specialCode">specialCode (required).</param>
        /// <param name="corpAffilCode">corpAffilCode (required).</param>
        /// <param name="custTypeCode">custTypeCode (required).</param>
        /// <param name="special">special.</param>
        public SpecialType(string specialCode = default(string), string corpAffilCode = default(string), string custTypeCode = default(string), Special special = default(Special))
        {
            // to ensure "specialCode" is required (not null)
            if (specialCode == null)
            {
                throw new ArgumentNullException("specialCode is a required property for SpecialType and cannot be null");
            }
            this.SpecialCode = specialCode;
            // to ensure "corpAffilCode" is required (not null)
            if (corpAffilCode == null)
            {
                throw new ArgumentNullException("corpAffilCode is a required property for SpecialType and cannot be null");
            }
            this.CorpAffilCode = corpAffilCode;
            // to ensure "custTypeCode" is required (not null)
            if (custTypeCode == null)
            {
                throw new ArgumentNullException("custTypeCode is a required property for SpecialType and cannot be null");
            }
            this.CustTypeCode = custTypeCode;
            this.Special = special;
        }

        /// <summary>
        /// Gets or Sets SpecialCode
        /// </summary>
        [DataMember(Name = "specialCode", IsRequired = true, EmitDefaultValue = false)]
        public string SpecialCode { get; set; }

        /// <summary>
        /// Gets or Sets CorpAffilCode
        /// </summary>
        [DataMember(Name = "corpAffilCode", IsRequired = true, EmitDefaultValue = false)]
        public string CorpAffilCode { get; set; }

        /// <summary>
        /// Gets or Sets CustTypeCode
        /// </summary>
        [DataMember(Name = "custTypeCode", IsRequired = true, EmitDefaultValue = false)]
        public string CustTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets Special
        /// </summary>
        [DataMember(Name = "special", EmitDefaultValue = false)]
        public Special Special { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecialType {\n");
            sb.Append("  SpecialCode: ").Append(SpecialCode).Append("\n");
            sb.Append("  CorpAffilCode: ").Append(CorpAffilCode).Append("\n");
            sb.Append("  CustTypeCode: ").Append(CustTypeCode).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecialType);
        }

        /// <summary>
        /// Returns true if SpecialType instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecialType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecialType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SpecialCode == input.SpecialCode ||
                    (this.SpecialCode != null &&
                    this.SpecialCode.Equals(input.SpecialCode))
                ) && 
                (
                    this.CorpAffilCode == input.CorpAffilCode ||
                    (this.CorpAffilCode != null &&
                    this.CorpAffilCode.Equals(input.CorpAffilCode))
                ) && 
                (
                    this.CustTypeCode == input.CustTypeCode ||
                    (this.CustTypeCode != null &&
                    this.CustTypeCode.Equals(input.CustTypeCode))
                ) && 
                (
                    this.Special == input.Special ||
                    (this.Special != null &&
                    this.Special.Equals(input.Special))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpecialCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialCode.GetHashCode();
                }
                if (this.CorpAffilCode != null)
                {
                    hashCode = (hashCode * 59) + this.CorpAffilCode.GetHashCode();
                }
                if (this.CustTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.CustTypeCode.GetHashCode();
                }
                if (this.Special != null)
                {
                    hashCode = (hashCode * 59) + this.Special.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SpecialCode (string) maxLength
            if (this.SpecialCode != null && this.SpecialCode.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be less than 40.", new [] { "SpecialCode" });
            }

            // SpecialCode (string) minLength
            if (this.SpecialCode != null && this.SpecialCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be greater than 0.", new [] { "SpecialCode" });
            }

            // CorpAffilCode (string) maxLength
            if (this.CorpAffilCode != null && this.CorpAffilCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorpAffilCode, length must be less than 20.", new [] { "CorpAffilCode" });
            }

            // CorpAffilCode (string) minLength
            if (this.CorpAffilCode != null && this.CorpAffilCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorpAffilCode, length must be greater than 0.", new [] { "CorpAffilCode" });
            }

            // CustTypeCode (string) maxLength
            if (this.CustTypeCode != null && this.CustTypeCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustTypeCode, length must be less than 20.", new [] { "CustTypeCode" });
            }

            // CustTypeCode (string) minLength
            if (this.CustTypeCode != null && this.CustTypeCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustTypeCode, length must be greater than 0.", new [] { "CustTypeCode" });
            }

            yield break;
        }
    }

}
