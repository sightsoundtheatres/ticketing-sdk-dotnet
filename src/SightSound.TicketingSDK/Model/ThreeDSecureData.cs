/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ThreeDSecureData
    /// </summary>
    [DataContract(Name = "ThreeDSecureData")]
    public partial class ThreeDSecureData : IEquatable<ThreeDSecureData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AuthenticationResponse
        /// </summary>
        [DataMember(Name = "authenticationResponse", EmitDefaultValue = false)]
        public AuthenticationResponseEnum? AuthenticationResponse { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryResponse
        /// </summary>
        [DataMember(Name = "directoryResponse", EmitDefaultValue = false)]
        public DirectoryResponseEnum? DirectoryResponse { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSecureData" /> class.
        /// </summary>
        /// <param name="authenticationResponse">authenticationResponse.</param>
        /// <param name="cavv">cavv.</param>
        /// <param name="cavvAlgorithm">cavvAlgorithm.</param>
        /// <param name="directoryResponse">directoryResponse.</param>
        /// <param name="eci">eci.</param>
        /// <param name="threeDSVersion">threeDSVersion.</param>
        /// <param name="xid">xid.</param>
        /// <param name="dsTransID">dsTransID.</param>
        public ThreeDSecureData(AuthenticationResponseEnum? authenticationResponse = default(AuthenticationResponseEnum?), string cavv = default(string), string cavvAlgorithm = default(string), DirectoryResponseEnum? directoryResponse = default(DirectoryResponseEnum?), string eci = default(string), string threeDSVersion = default(string), string xid = default(string), string dsTransID = default(string))
        {
            this.AuthenticationResponse = authenticationResponse;
            this.Cavv = cavv;
            this.CavvAlgorithm = cavvAlgorithm;
            this.DirectoryResponse = directoryResponse;
            this.Eci = eci;
            this.ThreeDSVersion = threeDSVersion;
            this.Xid = xid;
            this.DsTransID = dsTransID;
        }

        /// <summary>
        /// Gets or Sets Cavv
        /// </summary>
        [DataMember(Name = "cavv", EmitDefaultValue = false)]
        public string Cavv { get; set; }

        /// <summary>
        /// Gets or Sets CavvAlgorithm
        /// </summary>
        [DataMember(Name = "cavvAlgorithm", EmitDefaultValue = false)]
        public string CavvAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Eci
        /// </summary>
        [DataMember(Name = "eci", EmitDefaultValue = false)]
        public string Eci { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSVersion
        /// </summary>
        [DataMember(Name = "threeDSVersion", EmitDefaultValue = false)]
        public string ThreeDSVersion { get; set; }

        /// <summary>
        /// Gets or Sets Xid
        /// </summary>
        [DataMember(Name = "xid", EmitDefaultValue = false)]
        public string Xid { get; set; }

        /// <summary>
        /// Gets or Sets DsTransID
        /// </summary>
        [DataMember(Name = "dsTransID", EmitDefaultValue = false)]
        public string DsTransID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSecureData {\n");
            sb.Append("  AuthenticationResponse: ").Append(AuthenticationResponse).Append("\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  DirectoryResponse: ").Append(DirectoryResponse).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  ThreeDSVersion: ").Append(ThreeDSVersion).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("  DsTransID: ").Append(DsTransID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSecureData);
        }

        /// <summary>
        /// Returns true if ThreeDSecureData instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSecureData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSecureData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthenticationResponse == input.AuthenticationResponse ||
                    this.AuthenticationResponse.Equals(input.AuthenticationResponse)
                ) && 
                (
                    this.Cavv == input.Cavv ||
                    (this.Cavv != null &&
                    this.Cavv.Equals(input.Cavv))
                ) && 
                (
                    this.CavvAlgorithm == input.CavvAlgorithm ||
                    (this.CavvAlgorithm != null &&
                    this.CavvAlgorithm.Equals(input.CavvAlgorithm))
                ) && 
                (
                    this.DirectoryResponse == input.DirectoryResponse ||
                    this.DirectoryResponse.Equals(input.DirectoryResponse)
                ) && 
                (
                    this.Eci == input.Eci ||
                    (this.Eci != null &&
                    this.Eci.Equals(input.Eci))
                ) && 
                (
                    this.ThreeDSVersion == input.ThreeDSVersion ||
                    (this.ThreeDSVersion != null &&
                    this.ThreeDSVersion.Equals(input.ThreeDSVersion))
                ) && 
                (
                    this.Xid == input.Xid ||
                    (this.Xid != null &&
                    this.Xid.Equals(input.Xid))
                ) && 
                (
                    this.DsTransID == input.DsTransID ||
                    (this.DsTransID != null &&
                    this.DsTransID.Equals(input.DsTransID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AuthenticationResponse.GetHashCode();
                if (this.Cavv != null)
                {
                    hashCode = (hashCode * 59) + this.Cavv.GetHashCode();
                }
                if (this.CavvAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.CavvAlgorithm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DirectoryResponse.GetHashCode();
                if (this.Eci != null)
                {
                    hashCode = (hashCode * 59) + this.Eci.GetHashCode();
                }
                if (this.ThreeDSVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSVersion.GetHashCode();
                }
                if (this.Xid != null)
                {
                    hashCode = (hashCode * 59) + this.Xid.GetHashCode();
                }
                if (this.DsTransID != null)
                {
                    hashCode = (hashCode * 59) + this.DsTransID.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
