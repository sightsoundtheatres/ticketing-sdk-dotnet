/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// CartResponse
    /// </summary>
    [DataContract(Name = "CartResponse")]
    public partial class CartResponse : IEquatable<CartResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public LocationDescription? Location { get; set; }

        /// <summary>
        /// Gets or Sets TicketBatch
        /// </summary>
        [DataMember(Name = "ticketBatch", EmitDefaultValue = false)]
        public TicketBatch? TicketBatch { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartResponse" /> class.
        /// </summary>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="taxesFeesPrice">taxesFeesPrice.</param>
        /// <param name="totalDiscount">totalDiscount.</param>
        /// <param name="totalSavings">totalSavings.</param>
        /// <param name="totalTransactionCharge">totalTransactionCharge.</param>
        /// <param name="totalDueAmount">totalDueAmount.</param>
        /// <param name="refundPolicy">refundPolicy.</param>
        /// <param name="location">location.</param>
        /// <param name="ticketBatch">ticketBatch.</param>
        /// <param name="heldName">heldName.</param>
        /// <param name="email">email.</param>
        /// <param name="items">items.</param>
        /// <param name="finalSaleDate">finalSaleDate.</param>
        /// <param name="tierYear">tierYear.</param>
        /// <param name="canTicketsBeMailed">canTicketsBeMailed.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="postPay">postPay.</param>
        /// <param name="mustPay">mustPay.</param>
        /// <param name="totalPaidAmount">totalPaidAmount.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="refNumber">refNumber.</param>
        /// <param name="eticketsAllowed">eticketsAllowed.</param>
        public CartResponse(long orderNumber = default(long), decimal totalPrice = default(decimal), decimal taxesFeesPrice = default(decimal), decimal totalDiscount = default(decimal), decimal totalSavings = default(decimal), decimal totalTransactionCharge = default(decimal), decimal totalDueAmount = default(decimal), string refundPolicy = default(string), LocationDescription? location = default(LocationDescription?), TicketBatch? ticketBatch = default(TicketBatch?), string heldName = default(string), string email = default(string), List<OrderItemPriceResponse> items = default(List<OrderItemPriceResponse>), DateTime finalSaleDate = default(DateTime), int tierYear = default(int), bool canTicketsBeMailed = default(bool), long customerNumber = default(long), bool postPay = default(bool), bool mustPay = default(bool), decimal totalPaidAmount = default(decimal), string groupName = default(string), string refNumber = default(string), bool eticketsAllowed = default(bool))
        {
            this.OrderNumber = orderNumber;
            this.TotalPrice = totalPrice;
            this.TaxesFeesPrice = taxesFeesPrice;
            this.TotalDiscount = totalDiscount;
            this.TotalSavings = totalSavings;
            this.TotalTransactionCharge = totalTransactionCharge;
            this.TotalDueAmount = totalDueAmount;
            this.RefundPolicy = refundPolicy;
            this.Location = location;
            this.TicketBatch = ticketBatch;
            this.HeldName = heldName;
            this.Email = email;
            this.Items = items;
            this.FinalSaleDate = finalSaleDate;
            this.TierYear = tierYear;
            this.CanTicketsBeMailed = canTicketsBeMailed;
            this.CustomerNumber = customerNumber;
            this.PostPay = postPay;
            this.MustPay = mustPay;
            this.TotalPaidAmount = totalPaidAmount;
            this.GroupName = groupName;
            this.RefNumber = refNumber;
            this.EticketsAllowed = eticketsAllowed;
        }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name = "totalPrice", EmitDefaultValue = false)]
        public decimal TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TaxesFeesPrice
        /// </summary>
        [DataMember(Name = "taxesFeesPrice", EmitDefaultValue = false)]
        public decimal TaxesFeesPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalDiscount
        /// </summary>
        [DataMember(Name = "totalDiscount", EmitDefaultValue = false)]
        public decimal TotalDiscount { get; set; }

        /// <summary>
        /// Gets or Sets TotalSavings
        /// </summary>
        [DataMember(Name = "totalSavings", EmitDefaultValue = false)]
        public decimal TotalSavings { get; set; }

        /// <summary>
        /// Gets or Sets TotalTransactionCharge
        /// </summary>
        [DataMember(Name = "totalTransactionCharge", EmitDefaultValue = false)]
        public decimal TotalTransactionCharge { get; set; }

        /// <summary>
        /// Gets or Sets TotalDueAmount
        /// </summary>
        [DataMember(Name = "totalDueAmount", EmitDefaultValue = false)]
        public decimal TotalDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundPolicy
        /// </summary>
        [DataMember(Name = "refundPolicy", EmitDefaultValue = false)]
        public string RefundPolicy { get; set; }

        /// <summary>
        /// Gets or Sets HeldName
        /// </summary>
        [DataMember(Name = "heldName", EmitDefaultValue = false)]
        public string HeldName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<OrderItemPriceResponse> Items { get; set; }

        /// <summary>
        /// Gets or Sets FinalSaleDate
        /// </summary>
        [DataMember(Name = "finalSaleDate", EmitDefaultValue = false)]
        public DateTime FinalSaleDate { get; set; }

        /// <summary>
        /// Gets or Sets TierYear
        /// </summary>
        [DataMember(Name = "tierYear", EmitDefaultValue = false)]
        public int TierYear { get; set; }

        /// <summary>
        /// Gets or Sets CanTicketsBeMailed
        /// </summary>
        [DataMember(Name = "canTicketsBeMailed", EmitDefaultValue = true)]
        public bool CanTicketsBeMailed { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets PostPay
        /// </summary>
        [DataMember(Name = "postPay", EmitDefaultValue = true)]
        public bool PostPay { get; set; }

        /// <summary>
        /// Gets or Sets MustPay
        /// </summary>
        [DataMember(Name = "mustPay", EmitDefaultValue = true)]
        public bool MustPay { get; set; }

        /// <summary>
        /// Gets or Sets TotalPaidAmount
        /// </summary>
        [DataMember(Name = "totalPaidAmount", EmitDefaultValue = false)]
        public decimal TotalPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets RefNumber
        /// </summary>
        [DataMember(Name = "refNumber", EmitDefaultValue = false)]
        public string RefNumber { get; set; }

        /// <summary>
        /// Gets or Sets EticketsAllowed
        /// </summary>
        [DataMember(Name = "eticketsAllowed", EmitDefaultValue = true)]
        public bool EticketsAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartResponse {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TaxesFeesPrice: ").Append(TaxesFeesPrice).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  TotalSavings: ").Append(TotalSavings).Append("\n");
            sb.Append("  TotalTransactionCharge: ").Append(TotalTransactionCharge).Append("\n");
            sb.Append("  TotalDueAmount: ").Append(TotalDueAmount).Append("\n");
            sb.Append("  RefundPolicy: ").Append(RefundPolicy).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  TicketBatch: ").Append(TicketBatch).Append("\n");
            sb.Append("  HeldName: ").Append(HeldName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  FinalSaleDate: ").Append(FinalSaleDate).Append("\n");
            sb.Append("  TierYear: ").Append(TierYear).Append("\n");
            sb.Append("  CanTicketsBeMailed: ").Append(CanTicketsBeMailed).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  PostPay: ").Append(PostPay).Append("\n");
            sb.Append("  MustPay: ").Append(MustPay).Append("\n");
            sb.Append("  TotalPaidAmount: ").Append(TotalPaidAmount).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  RefNumber: ").Append(RefNumber).Append("\n");
            sb.Append("  EticketsAllowed: ").Append(EticketsAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartResponse);
        }

        /// <summary>
        /// Returns true if CartResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CartResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.TaxesFeesPrice == input.TaxesFeesPrice ||
                    this.TaxesFeesPrice.Equals(input.TaxesFeesPrice)
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    this.TotalDiscount.Equals(input.TotalDiscount)
                ) && 
                (
                    this.TotalSavings == input.TotalSavings ||
                    this.TotalSavings.Equals(input.TotalSavings)
                ) && 
                (
                    this.TotalTransactionCharge == input.TotalTransactionCharge ||
                    this.TotalTransactionCharge.Equals(input.TotalTransactionCharge)
                ) && 
                (
                    this.TotalDueAmount == input.TotalDueAmount ||
                    this.TotalDueAmount.Equals(input.TotalDueAmount)
                ) && 
                (
                    this.RefundPolicy == input.RefundPolicy ||
                    (this.RefundPolicy != null &&
                    this.RefundPolicy.Equals(input.RefundPolicy))
                ) && 
                (
                    this.Location == input.Location ||
                    this.Location.Equals(input.Location)
                ) && 
                (
                    this.TicketBatch == input.TicketBatch ||
                    this.TicketBatch.Equals(input.TicketBatch)
                ) && 
                (
                    this.HeldName == input.HeldName ||
                    (this.HeldName != null &&
                    this.HeldName.Equals(input.HeldName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.FinalSaleDate == input.FinalSaleDate ||
                    (this.FinalSaleDate != null &&
                    this.FinalSaleDate.Equals(input.FinalSaleDate))
                ) && 
                (
                    this.TierYear == input.TierYear ||
                    this.TierYear.Equals(input.TierYear)
                ) && 
                (
                    this.CanTicketsBeMailed == input.CanTicketsBeMailed ||
                    this.CanTicketsBeMailed.Equals(input.CanTicketsBeMailed)
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.PostPay == input.PostPay ||
                    this.PostPay.Equals(input.PostPay)
                ) && 
                (
                    this.MustPay == input.MustPay ||
                    this.MustPay.Equals(input.MustPay)
                ) && 
                (
                    this.TotalPaidAmount == input.TotalPaidAmount ||
                    this.TotalPaidAmount.Equals(input.TotalPaidAmount)
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.RefNumber == input.RefNumber ||
                    (this.RefNumber != null &&
                    this.RefNumber.Equals(input.RefNumber))
                ) && 
                (
                    this.EticketsAllowed == input.EticketsAllowed ||
                    this.EticketsAllowed.Equals(input.EticketsAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxesFeesPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalSavings.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalTransactionCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDueAmount.GetHashCode();
                if (this.RefundPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.RefundPolicy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Location.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketBatch.GetHashCode();
                if (this.HeldName != null)
                {
                    hashCode = (hashCode * 59) + this.HeldName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.FinalSaleDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinalSaleDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TierYear.GetHashCode();
                hashCode = (hashCode * 59) + this.CanTicketsBeMailed.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.PostPay.GetHashCode();
                hashCode = (hashCode * 59) + this.MustPay.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPaidAmount.GetHashCode();
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.RefNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EticketsAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
