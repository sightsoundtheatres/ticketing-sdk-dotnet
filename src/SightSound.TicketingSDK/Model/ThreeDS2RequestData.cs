/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ThreeDS2RequestData
    /// </summary>
    [DataContract(Name = "ThreeDS2RequestData")]
    public partial class ThreeDS2RequestData : IEquatable<ThreeDS2RequestData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChallengeIndicator
        /// </summary>
        [DataMember(Name = "challengeIndicator", EmitDefaultValue = false)]
        public ChallengeIndicatorEnum? ChallengeIndicator { get; set; }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDS2RequestData" /> class.
        /// </summary>
        /// <param name="authenticationOnly">authenticationOnly.</param>
        /// <param name="challengeIndicator">challengeIndicator.</param>
        /// <param name="deviceChannel">deviceChannel.</param>
        /// <param name="deviceRenderOptions">deviceRenderOptions.</param>
        /// <param name="notificationURL">notificationURL.</param>
        /// <param name="sdkAppID">sdkAppID.</param>
        /// <param name="sdkEncData">sdkEncData.</param>
        /// <param name="sdkEphemPubKey">sdkEphemPubKey.</param>
        /// <param name="sdkMaxTimeout">sdkMaxTimeout.</param>
        /// <param name="sdkReferenceNumber">sdkReferenceNumber.</param>
        /// <param name="sdkTransID">sdkTransID.</param>
        /// <param name="threeDSCompInd">threeDSCompInd.</param>
        /// <param name="threeDSRequestorURL">threeDSRequestorURL.</param>
        /// <param name="threeDSServerTransID">threeDSServerTransID.</param>
        /// <param name="messageVersion">messageVersion.</param>
        /// <param name="threeDSRequestorID">threeDSRequestorID.</param>
        /// <param name="threeDSRequestorChallengeInd">threeDSRequestorChallengeInd.</param>
        /// <param name="threeDSRequestorName">threeDSRequestorName.</param>
        /// <param name="acquirerBIN">acquirerBIN.</param>
        /// <param name="acquirerMerchantID">acquirerMerchantID.</param>
        /// <param name="mcc">mcc.</param>
        /// <param name="merchantName">merchantName.</param>
        /// <param name="transactionType">transactionType.</param>
        /// <param name="whiteListStatus">whiteListStatus.</param>
        public ThreeDS2RequestData(bool authenticationOnly = default(bool), ChallengeIndicatorEnum? challengeIndicator = default(ChallengeIndicatorEnum?), string deviceChannel = default(string), DeviceRenderOptions deviceRenderOptions = default(DeviceRenderOptions), string notificationURL = default(string), string sdkAppID = default(string), string sdkEncData = default(string), SDKEphemPubKey sdkEphemPubKey = default(SDKEphemPubKey), int sdkMaxTimeout = default(int), string sdkReferenceNumber = default(string), string sdkTransID = default(string), string threeDSCompInd = default(string), string threeDSRequestorURL = default(string), string threeDSServerTransID = default(string), string messageVersion = default(string), string threeDSRequestorID = default(string), string threeDSRequestorChallengeInd = default(string), string threeDSRequestorName = default(string), string acquirerBIN = default(string), string acquirerMerchantID = default(string), string mcc = default(string), string merchantName = default(string), TransactionTypeEnum? transactionType = default(TransactionTypeEnum?), string whiteListStatus = default(string))
        {
            this.AuthenticationOnly = authenticationOnly;
            this.ChallengeIndicator = challengeIndicator;
            this.DeviceChannel = deviceChannel;
            this.DeviceRenderOptions = deviceRenderOptions;
            this.NotificationURL = notificationURL;
            this.SdkAppID = sdkAppID;
            this.SdkEncData = sdkEncData;
            this.SdkEphemPubKey = sdkEphemPubKey;
            this.SdkMaxTimeout = sdkMaxTimeout;
            this.SdkReferenceNumber = sdkReferenceNumber;
            this.SdkTransID = sdkTransID;
            this.ThreeDSCompInd = threeDSCompInd;
            this.ThreeDSRequestorURL = threeDSRequestorURL;
            this.ThreeDSServerTransID = threeDSServerTransID;
            this.MessageVersion = messageVersion;
            this.ThreeDSRequestorID = threeDSRequestorID;
            this.ThreeDSRequestorChallengeInd = threeDSRequestorChallengeInd;
            this.ThreeDSRequestorName = threeDSRequestorName;
            this.AcquirerBIN = acquirerBIN;
            this.AcquirerMerchantID = acquirerMerchantID;
            this.Mcc = mcc;
            this.MerchantName = merchantName;
            this.TransactionType = transactionType;
            this.WhiteListStatus = whiteListStatus;
        }

        /// <summary>
        /// Gets or Sets AuthenticationOnly
        /// </summary>
        [DataMember(Name = "authenticationOnly", EmitDefaultValue = true)]
        public bool AuthenticationOnly { get; set; }

        /// <summary>
        /// Gets or Sets DeviceChannel
        /// </summary>
        [DataMember(Name = "deviceChannel", EmitDefaultValue = false)]
        public string DeviceChannel { get; set; }

        /// <summary>
        /// Gets or Sets DeviceRenderOptions
        /// </summary>
        [DataMember(Name = "deviceRenderOptions", EmitDefaultValue = false)]
        public DeviceRenderOptions DeviceRenderOptions { get; set; }

        /// <summary>
        /// Gets or Sets NotificationURL
        /// </summary>
        [DataMember(Name = "notificationURL", EmitDefaultValue = false)]
        public string NotificationURL { get; set; }

        /// <summary>
        /// Gets or Sets SdkAppID
        /// </summary>
        [DataMember(Name = "sdkAppID", EmitDefaultValue = false)]
        public string SdkAppID { get; set; }

        /// <summary>
        /// Gets or Sets SdkEncData
        /// </summary>
        [DataMember(Name = "sdkEncData", EmitDefaultValue = false)]
        public string SdkEncData { get; set; }

        /// <summary>
        /// Gets or Sets SdkEphemPubKey
        /// </summary>
        [DataMember(Name = "sdkEphemPubKey", EmitDefaultValue = false)]
        public SDKEphemPubKey SdkEphemPubKey { get; set; }

        /// <summary>
        /// Gets or Sets SdkMaxTimeout
        /// </summary>
        [DataMember(Name = "sdkMaxTimeout", EmitDefaultValue = false)]
        public int SdkMaxTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SdkReferenceNumber
        /// </summary>
        [DataMember(Name = "sdkReferenceNumber", EmitDefaultValue = false)]
        public string SdkReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets SdkTransID
        /// </summary>
        [DataMember(Name = "sdkTransID", EmitDefaultValue = false)]
        public string SdkTransID { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSCompInd
        /// </summary>
        [DataMember(Name = "threeDSCompInd", EmitDefaultValue = false)]
        public string ThreeDSCompInd { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorURL
        /// </summary>
        [DataMember(Name = "threeDSRequestorURL", EmitDefaultValue = false)]
        public string ThreeDSRequestorURL { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSServerTransID
        /// </summary>
        [DataMember(Name = "threeDSServerTransID", EmitDefaultValue = false)]
        [Obsolete]
        public string ThreeDSServerTransID { get; set; }

        /// <summary>
        /// Gets or Sets MessageVersion
        /// </summary>
        [DataMember(Name = "messageVersion", EmitDefaultValue = false)]
        public string MessageVersion { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorID
        /// </summary>
        [DataMember(Name = "threeDSRequestorID", EmitDefaultValue = false)]
        public string ThreeDSRequestorID { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorChallengeInd
        /// </summary>
        [DataMember(Name = "threeDSRequestorChallengeInd", EmitDefaultValue = false)]
        public string ThreeDSRequestorChallengeInd { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSRequestorName
        /// </summary>
        [DataMember(Name = "threeDSRequestorName", EmitDefaultValue = false)]
        public string ThreeDSRequestorName { get; set; }

        /// <summary>
        /// Gets or Sets AcquirerBIN
        /// </summary>
        [DataMember(Name = "acquirerBIN", EmitDefaultValue = false)]
        public string AcquirerBIN { get; set; }

        /// <summary>
        /// Gets or Sets AcquirerMerchantID
        /// </summary>
        [DataMember(Name = "acquirerMerchantID", EmitDefaultValue = false)]
        public string AcquirerMerchantID { get; set; }

        /// <summary>
        /// Gets or Sets Mcc
        /// </summary>
        [DataMember(Name = "mcc", EmitDefaultValue = false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Gets or Sets MerchantName
        /// </summary>
        [DataMember(Name = "merchantName", EmitDefaultValue = false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// Gets or Sets WhiteListStatus
        /// </summary>
        [DataMember(Name = "whiteListStatus", EmitDefaultValue = false)]
        public string WhiteListStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDS2RequestData {\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("  ChallengeIndicator: ").Append(ChallengeIndicator).Append("\n");
            sb.Append("  DeviceChannel: ").Append(DeviceChannel).Append("\n");
            sb.Append("  DeviceRenderOptions: ").Append(DeviceRenderOptions).Append("\n");
            sb.Append("  NotificationURL: ").Append(NotificationURL).Append("\n");
            sb.Append("  SdkAppID: ").Append(SdkAppID).Append("\n");
            sb.Append("  SdkEncData: ").Append(SdkEncData).Append("\n");
            sb.Append("  SdkEphemPubKey: ").Append(SdkEphemPubKey).Append("\n");
            sb.Append("  SdkMaxTimeout: ").Append(SdkMaxTimeout).Append("\n");
            sb.Append("  SdkReferenceNumber: ").Append(SdkReferenceNumber).Append("\n");
            sb.Append("  SdkTransID: ").Append(SdkTransID).Append("\n");
            sb.Append("  ThreeDSCompInd: ").Append(ThreeDSCompInd).Append("\n");
            sb.Append("  ThreeDSRequestorURL: ").Append(ThreeDSRequestorURL).Append("\n");
            sb.Append("  ThreeDSServerTransID: ").Append(ThreeDSServerTransID).Append("\n");
            sb.Append("  MessageVersion: ").Append(MessageVersion).Append("\n");
            sb.Append("  ThreeDSRequestorID: ").Append(ThreeDSRequestorID).Append("\n");
            sb.Append("  ThreeDSRequestorChallengeInd: ").Append(ThreeDSRequestorChallengeInd).Append("\n");
            sb.Append("  ThreeDSRequestorName: ").Append(ThreeDSRequestorName).Append("\n");
            sb.Append("  AcquirerBIN: ").Append(AcquirerBIN).Append("\n");
            sb.Append("  AcquirerMerchantID: ").Append(AcquirerMerchantID).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  WhiteListStatus: ").Append(WhiteListStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDS2RequestData);
        }

        /// <summary>
        /// Returns true if ThreeDS2RequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDS2RequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDS2RequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthenticationOnly == input.AuthenticationOnly ||
                    this.AuthenticationOnly.Equals(input.AuthenticationOnly)
                ) && 
                (
                    this.ChallengeIndicator == input.ChallengeIndicator ||
                    this.ChallengeIndicator.Equals(input.ChallengeIndicator)
                ) && 
                (
                    this.DeviceChannel == input.DeviceChannel ||
                    (this.DeviceChannel != null &&
                    this.DeviceChannel.Equals(input.DeviceChannel))
                ) && 
                (
                    this.DeviceRenderOptions == input.DeviceRenderOptions ||
                    (this.DeviceRenderOptions != null &&
                    this.DeviceRenderOptions.Equals(input.DeviceRenderOptions))
                ) && 
                (
                    this.NotificationURL == input.NotificationURL ||
                    (this.NotificationURL != null &&
                    this.NotificationURL.Equals(input.NotificationURL))
                ) && 
                (
                    this.SdkAppID == input.SdkAppID ||
                    (this.SdkAppID != null &&
                    this.SdkAppID.Equals(input.SdkAppID))
                ) && 
                (
                    this.SdkEncData == input.SdkEncData ||
                    (this.SdkEncData != null &&
                    this.SdkEncData.Equals(input.SdkEncData))
                ) && 
                (
                    this.SdkEphemPubKey == input.SdkEphemPubKey ||
                    (this.SdkEphemPubKey != null &&
                    this.SdkEphemPubKey.Equals(input.SdkEphemPubKey))
                ) && 
                (
                    this.SdkMaxTimeout == input.SdkMaxTimeout ||
                    this.SdkMaxTimeout.Equals(input.SdkMaxTimeout)
                ) && 
                (
                    this.SdkReferenceNumber == input.SdkReferenceNumber ||
                    (this.SdkReferenceNumber != null &&
                    this.SdkReferenceNumber.Equals(input.SdkReferenceNumber))
                ) && 
                (
                    this.SdkTransID == input.SdkTransID ||
                    (this.SdkTransID != null &&
                    this.SdkTransID.Equals(input.SdkTransID))
                ) && 
                (
                    this.ThreeDSCompInd == input.ThreeDSCompInd ||
                    (this.ThreeDSCompInd != null &&
                    this.ThreeDSCompInd.Equals(input.ThreeDSCompInd))
                ) && 
                (
                    this.ThreeDSRequestorURL == input.ThreeDSRequestorURL ||
                    (this.ThreeDSRequestorURL != null &&
                    this.ThreeDSRequestorURL.Equals(input.ThreeDSRequestorURL))
                ) && 
                (
                    this.ThreeDSServerTransID == input.ThreeDSServerTransID ||
                    (this.ThreeDSServerTransID != null &&
                    this.ThreeDSServerTransID.Equals(input.ThreeDSServerTransID))
                ) && 
                (
                    this.MessageVersion == input.MessageVersion ||
                    (this.MessageVersion != null &&
                    this.MessageVersion.Equals(input.MessageVersion))
                ) && 
                (
                    this.ThreeDSRequestorID == input.ThreeDSRequestorID ||
                    (this.ThreeDSRequestorID != null &&
                    this.ThreeDSRequestorID.Equals(input.ThreeDSRequestorID))
                ) && 
                (
                    this.ThreeDSRequestorChallengeInd == input.ThreeDSRequestorChallengeInd ||
                    (this.ThreeDSRequestorChallengeInd != null &&
                    this.ThreeDSRequestorChallengeInd.Equals(input.ThreeDSRequestorChallengeInd))
                ) && 
                (
                    this.ThreeDSRequestorName == input.ThreeDSRequestorName ||
                    (this.ThreeDSRequestorName != null &&
                    this.ThreeDSRequestorName.Equals(input.ThreeDSRequestorName))
                ) && 
                (
                    this.AcquirerBIN == input.AcquirerBIN ||
                    (this.AcquirerBIN != null &&
                    this.AcquirerBIN.Equals(input.AcquirerBIN))
                ) && 
                (
                    this.AcquirerMerchantID == input.AcquirerMerchantID ||
                    (this.AcquirerMerchantID != null &&
                    this.AcquirerMerchantID.Equals(input.AcquirerMerchantID))
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.WhiteListStatus == input.WhiteListStatus ||
                    (this.WhiteListStatus != null &&
                    this.WhiteListStatus.Equals(input.WhiteListStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AuthenticationOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.ChallengeIndicator.GetHashCode();
                if (this.DeviceChannel != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceChannel.GetHashCode();
                }
                if (this.DeviceRenderOptions != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceRenderOptions.GetHashCode();
                }
                if (this.NotificationURL != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationURL.GetHashCode();
                }
                if (this.SdkAppID != null)
                {
                    hashCode = (hashCode * 59) + this.SdkAppID.GetHashCode();
                }
                if (this.SdkEncData != null)
                {
                    hashCode = (hashCode * 59) + this.SdkEncData.GetHashCode();
                }
                if (this.SdkEphemPubKey != null)
                {
                    hashCode = (hashCode * 59) + this.SdkEphemPubKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SdkMaxTimeout.GetHashCode();
                if (this.SdkReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SdkReferenceNumber.GetHashCode();
                }
                if (this.SdkTransID != null)
                {
                    hashCode = (hashCode * 59) + this.SdkTransID.GetHashCode();
                }
                if (this.ThreeDSCompInd != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSCompInd.GetHashCode();
                }
                if (this.ThreeDSRequestorURL != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorURL.GetHashCode();
                }
                if (this.ThreeDSServerTransID != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSServerTransID.GetHashCode();
                }
                if (this.MessageVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MessageVersion.GetHashCode();
                }
                if (this.ThreeDSRequestorID != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorID.GetHashCode();
                }
                if (this.ThreeDSRequestorChallengeInd != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorChallengeInd.GetHashCode();
                }
                if (this.ThreeDSRequestorName != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSRequestorName.GetHashCode();
                }
                if (this.AcquirerBIN != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerBIN.GetHashCode();
                }
                if (this.AcquirerMerchantID != null)
                {
                    hashCode = (hashCode * 59) + this.AcquirerMerchantID.GetHashCode();
                }
                if (this.Mcc != null)
                {
                    hashCode = (hashCode * 59) + this.Mcc.GetHashCode();
                }
                if (this.MerchantName != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                if (this.WhiteListStatus != null)
                {
                    hashCode = (hashCode * 59) + this.WhiteListStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
