/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ShowTrackingDetail
    /// </summary>
    [DataContract(Name = "ShowTrackingDetail")]
    public partial class ShowTrackingDetail : IEquatable<ShowTrackingDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowTrackingDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowTrackingDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowTrackingDetail" /> class.
        /// </summary>
        /// <param name="reportDate">reportDate (required).</param>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="showDateTime">showDateTime (required).</param>
        /// <param name="eventDescription">eventDescription.</param>
        /// <param name="seatCapacity">seatCapacity.</param>
        /// <param name="seatsBooked">seatsBooked.</param>
        /// <param name="comps">comps.</param>
        /// <param name="specialComps">specialComps.</param>
        /// <param name="escorts">escorts.</param>
        /// <param name="_event">_event.</param>
        public ShowTrackingDetail(DateTime reportDate = default(DateTime), string eventCode = default(string), DateTime showDateTime = default(DateTime), string eventDescription = default(string), long seatCapacity = default(long), long seatsBooked = default(long), long comps = default(long), long specialComps = default(long), long escorts = default(long), Event _event = default(Event))
        {
            this.ReportDate = reportDate;
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for ShowTrackingDetail and cannot be null");
            }
            this.EventCode = eventCode;
            this.ShowDateTime = showDateTime;
            this.EventDescription = eventDescription;
            this.SeatCapacity = seatCapacity;
            this.SeatsBooked = seatsBooked;
            this.Comps = comps;
            this.SpecialComps = specialComps;
            this.Escorts = escorts;
            this.Event = _event;
        }

        /// <summary>
        /// Gets or Sets ReportDate
        /// </summary>
        [DataMember(Name = "reportDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ReportDate { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets ShowDateTime
        /// </summary>
        [DataMember(Name = "showDateTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ShowDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EventDescription
        /// </summary>
        [DataMember(Name = "eventDescription", EmitDefaultValue = false)]
        public string EventDescription { get; set; }

        /// <summary>
        /// Gets or Sets SeatCapacity
        /// </summary>
        [DataMember(Name = "seatCapacity", EmitDefaultValue = false)]
        public long SeatCapacity { get; set; }

        /// <summary>
        /// Gets or Sets SeatsBooked
        /// </summary>
        [DataMember(Name = "seatsBooked", EmitDefaultValue = false)]
        public long SeatsBooked { get; set; }

        /// <summary>
        /// Gets or Sets Comps
        /// </summary>
        [DataMember(Name = "comps", EmitDefaultValue = false)]
        public long Comps { get; set; }

        /// <summary>
        /// Gets or Sets SpecialComps
        /// </summary>
        [DataMember(Name = "specialComps", EmitDefaultValue = false)]
        public long SpecialComps { get; set; }

        /// <summary>
        /// Gets or Sets Escorts
        /// </summary>
        [DataMember(Name = "escorts", EmitDefaultValue = false)]
        public long Escorts { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public Event Event { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowTrackingDetail {\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  ShowDateTime: ").Append(ShowDateTime).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  SeatCapacity: ").Append(SeatCapacity).Append("\n");
            sb.Append("  SeatsBooked: ").Append(SeatsBooked).Append("\n");
            sb.Append("  Comps: ").Append(Comps).Append("\n");
            sb.Append("  SpecialComps: ").Append(SpecialComps).Append("\n");
            sb.Append("  Escorts: ").Append(Escorts).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowTrackingDetail);
        }

        /// <summary>
        /// Returns true if ShowTrackingDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowTrackingDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowTrackingDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.ShowDateTime == input.ShowDateTime ||
                    (this.ShowDateTime != null &&
                    this.ShowDateTime.Equals(input.ShowDateTime))
                ) && 
                (
                    this.EventDescription == input.EventDescription ||
                    (this.EventDescription != null &&
                    this.EventDescription.Equals(input.EventDescription))
                ) && 
                (
                    this.SeatCapacity == input.SeatCapacity ||
                    this.SeatCapacity.Equals(input.SeatCapacity)
                ) && 
                (
                    this.SeatsBooked == input.SeatsBooked ||
                    this.SeatsBooked.Equals(input.SeatsBooked)
                ) && 
                (
                    this.Comps == input.Comps ||
                    this.Comps.Equals(input.Comps)
                ) && 
                (
                    this.SpecialComps == input.SpecialComps ||
                    this.SpecialComps.Equals(input.SpecialComps)
                ) && 
                (
                    this.Escorts == input.Escorts ||
                    this.Escorts.Equals(input.Escorts)
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.ShowDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ShowDateTime.GetHashCode();
                }
                if (this.EventDescription != null)
                {
                    hashCode = (hashCode * 59) + this.EventDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatCapacity.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatsBooked.GetHashCode();
                hashCode = (hashCode * 59) + this.Comps.GetHashCode();
                hashCode = (hashCode * 59) + this.SpecialComps.GetHashCode();
                hashCode = (hashCode * 59) + this.Escorts.GetHashCode();
                if (this.Event != null)
                {
                    hashCode = (hashCode * 59) + this.Event.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EventDescription (string) maxLength
            if (this.EventDescription != null && this.EventDescription.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDescription, length must be less than 50.", new [] { "EventDescription" });
            }

            // EventDescription (string) minLength
            if (this.EventDescription != null && this.EventDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDescription, length must be greater than 0.", new [] { "EventDescription" });
            }

            yield break;
        }
    }

}
