/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract(Name = "Order")]
    public partial class Order : IEquatable<Order>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public OrderStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets OrderOrigin
        /// </summary>
        [DataMember(Name = "orderOrigin", IsRequired = true, EmitDefaultValue = false)]
        public OrderOrigin OrderOrigin { get; set; }

        /// <summary>
        /// Gets or Sets PricingLevel
        /// </summary>
        [DataMember(Name = "pricingLevel", EmitDefaultValue = false)]
        public PricingLevel? PricingLevel { get; set; }

        /// <summary>
        /// Gets or Sets TheaterLocationCode
        /// </summary>
        [DataMember(Name = "theaterLocationCode", EmitDefaultValue = false)]
        public LocationDescription? TheaterLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets TicketBatch
        /// </summary>
        [DataMember(Name = "ticketBatch", EmitDefaultValue = false)]
        public TicketBatch? TicketBatch { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceType
        /// </summary>
        [DataMember(Name = "invoiceType", EmitDefaultValue = false)]
        public InvoiceType? InvoiceType { get; set; }

        /// <summary>
        /// Gets or Sets LogActivity
        /// </summary>
        [DataMember(Name = "logActivity", EmitDefaultValue = false)]
        public ActivityType? LogActivity { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedPricingLevel
        /// </summary>
        [DataMember(Name = "calculatedPricingLevel", EmitDefaultValue = false)]
        public PricingLevel? CalculatedPricingLevel { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceCompany
        /// </summary>
        [DataMember(Name = "invoiceCompany", EmitDefaultValue = false)]
        public InvoiceCompany? InvoiceCompany { get; set; }

        /// <summary>
        /// Gets or Sets PostPayPricingLevel
        /// </summary>
        [DataMember(Name = "postPayPricingLevel", EmitDefaultValue = false)]
        public PricingLevel? PostPayPricingLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="orderDate">orderDate.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="mailToAddress">mailToAddress.</param>
        /// <param name="specialCode">specialCode.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="addUserId">addUserId (required).</param>
        /// <param name="finalPaymentDueDate">finalPaymentDueDate.</param>
        /// <param name="cancelUserId">cancelUserId.</param>
        /// <param name="cancelDate">cancelDate.</param>
        /// <param name="contractReceivedDate">contractReceivedDate.</param>
        /// <param name="addLocationCode">addLocationCode.</param>
        /// <param name="cancelLocationCode">cancelLocationCode.</param>
        /// <param name="sourceCode">sourceCode.</param>
        /// <param name="finalPaymentExtDueDate">finalPaymentExtDueDate.</param>
        /// <param name="orderTotalPrice">orderTotalPrice (required).</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="status">status (required).</param>
        /// <param name="editUserId">editUserId.</param>
        /// <param name="editDate">editDate.</param>
        /// <param name="orderOrigin">orderOrigin (required).</param>
        /// <param name="printUserId">printUserId.</param>
        /// <param name="sourceCodeComments">sourceCodeComments.</param>
        /// <param name="depositDueAmount">depositDueAmount.</param>
        /// <param name="contactFirstName">contactFirstName.</param>
        /// <param name="contactLastName">contactLastName.</param>
        /// <param name="rpCustNumber">rpCustNumber.</param>
        /// <param name="mailToSameAsCustomer">mailToSameAsCustomer.</param>
        /// <param name="bypassAutoSpecial">bypassAutoSpecial.</param>
        /// <param name="orderTypeCode">orderTypeCode.</param>
        /// <param name="waiveDepositDue">waiveDepositDue.</param>
        /// <param name="pricingLevel">pricingLevel.</param>
        /// <param name="tierYear">tierYear.</param>
        /// <param name="depositDueDate">depositDueDate.</param>
        /// <param name="theaterLocationCode">theaterLocationCode.</param>
        /// <param name="depositAmount">depositAmount.</param>
        /// <param name="cancelReminderSent">cancelReminderSent.</param>
        /// <param name="emailTicketsProcessed">emailTicketsProcessed.</param>
        /// <param name="presentedByName">presentedByName.</param>
        /// <param name="mailToOrganizationName">mailToOrganizationName.</param>
        /// <param name="mailToPhone">mailToPhone.</param>
        /// <param name="authorizedUsers">authorizedUsers.</param>
        /// <param name="resReqEncText">resReqEncText.</param>
        /// <param name="salesRepId">salesRepId.</param>
        /// <param name="lockShippingDate">lockShippingDate.</param>
        /// <param name="lockRefundDate">lockRefundDate.</param>
        /// <param name="finalSale">finalSale.</param>
        /// <param name="heldName">heldName.</param>
        /// <param name="refNumber">refNumber.</param>
        /// <param name="taxExempt">taxExempt.</param>
        /// <param name="recalculate">recalculate.</param>
        /// <param name="slidingScaleDiscount">slidingScaleDiscount.</param>
        /// <param name="shipDate">shipDate.</param>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="shipFromLocation">shipFromLocation.</param>
        /// <param name="mailToAddressVerified">mailToAddressVerified.</param>
        /// <param name="ticketBatch">ticketBatch.</param>
        /// <param name="ticketBatchAgent">ticketBatchAgent.</param>
        /// <param name="invoiceType">invoiceType.</param>
        /// <param name="returnOrderNumber">returnOrderNumber.</param>
        /// <param name="contactPhone">contactPhone.</param>
        /// <param name="inventoryMoved">inventoryMoved.</param>
        /// <param name="invalid">invalid.</param>
        /// <param name="mailOrder">mailOrder.</param>
        /// <param name="deliverStatus">deliverStatus.</param>
        /// <param name="deliverUserId">deliverUserId.</param>
        /// <param name="deliverDateTime">deliverDateTime.</param>
        /// <param name="intlGroup">intlGroup.</param>
        /// <param name="intlCountryCode">intlCountryCode.</param>
        /// <param name="salesConfCode">salesConfCode.</param>
        /// <param name="email">email.</param>
        /// <param name="authUserPhoneNumber">authUserPhoneNumber.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="orderToken">orderToken.</param>
        /// <param name="notes">notes.</param>
        /// <param name="orderItems">orderItems.</param>
        /// <param name="customer">customer.</param>
        /// <param name="watchLists">watchLists.</param>
        /// <param name="invoices">invoices.</param>
        /// <param name="groupInfo">groupInfo.</param>
        /// <param name="payments">payments.</param>
        /// <param name="special">special.</param>
        /// <param name="changeExistingDiscounts">changeExistingDiscounts.</param>
        /// <param name="sendToAccpac">sendToAccpac.</param>
        /// <param name="sessionPaidAmount">sessionPaidAmount.</param>
        /// <param name="sessionRefundAmount">sessionRefundAmount.</param>
        /// <param name="amountPaidWhenOrderLoaded">amountPaidWhenOrderLoaded.</param>
        /// <param name="editMode">editMode.</param>
        /// <param name="specialAutoApplied">specialAutoApplied.</param>
        /// <param name="logChanges">logChanges.</param>
        /// <param name="specialRemoved">specialRemoved.</param>
        /// <param name="promoCode">promoCode.</param>
        /// <param name="discountAutoApplied">discountAutoApplied.</param>
        /// <param name="logActivity">logActivity.</param>
        /// <param name="persisted">persisted.</param>
        /// <param name="alreadyLoggedActivity">alreadyLoggedActivity.</param>
        /// <param name="cancelled">cancelled.</param>
        /// <param name="lastOccurringShowTourItem">lastOccurringShowTourItem.</param>
        /// <param name="totalTransactionCharge">totalTransactionCharge.</param>
        /// <param name="totalCustomerDiscount">totalCustomerDiscount.</param>
        /// <param name="highCountByOrderItem">highCountByOrderItem.</param>
        /// <param name="_new">_new.</param>
        /// <param name="firstOccurringShowTourItem">firstOccurringShowTourItem.</param>
        /// <param name="activeOrderItemList">activeOrderItemList.</param>
        /// <param name="seatsUnderAssigned">seatsUnderAssigned.</param>
        /// <param name="maxItemNumber">maxItemNumber.</param>
        /// <param name="paymentPast">paymentPast.</param>
        /// <param name="ticketsMailed">ticketsMailed.</param>
        /// <param name="latestEventOrderItem">latestEventOrderItem.</param>
        /// <param name="earliestEventDate">earliestEventDate.</param>
        /// <param name="firstShowDate">firstShowDate.</param>
        /// <param name="cancelledShowTourItemList">cancelledShowTourItemList.</param>
        /// <param name="groupCount">groupCount.</param>
        /// <param name="calculatedPricingLevel">calculatedPricingLevel.</param>
        /// <param name="dueAmount">dueAmount.</param>
        /// <param name="totalFee">totalFee.</param>
        /// <param name="invoiceCompany">invoiceCompany.</param>
        /// <param name="activeShowTourItem">activeShowTourItem.</param>
        /// <param name="companyCode">companyCode.</param>
        /// <param name="firstOccurringShowItem">firstOccurringShowItem.</param>
        /// <param name="firstOccurringTourItem">firstOccurringTourItem.</param>
        /// <param name="activeWithOrder">activeWithOrder.</param>
        /// <param name="postPayPricingLevel">postPayPricingLevel.</param>
        /// <param name="allItemsTotalPrice">allItemsTotalPrice.</param>
        /// <param name="totalTax">totalTax.</param>
        /// <param name="totalGratuity">totalGratuity.</param>
        /// <param name="totalPaidAmount">totalPaidAmount.</param>
        /// <param name="totalDiscount">totalDiscount.</param>
        /// <param name="readyForPrinting">readyForPrinting.</param>
        /// <param name="group">group.</param>
        /// <param name="activeShowItems">activeShowItems.</param>
        /// <param name="mailToName">mailToName.</param>
        /// <param name="shipMethod">shipMethod.</param>
        /// <param name="firstOccurringShowItemWithValidCount">firstOccurringShowItemWithValidCount.</param>
        /// <param name="showsDaysSpan">showsDaysSpan.</param>
        /// <param name="allSeatAssigned">allSeatAssigned.</param>
        /// <param name="seatsOverAssigned">seatsOverAssigned.</param>
        /// <param name="activeShowTourItemCount">activeShowTourItemCount.</param>
        /// <param name="finalPaymentDueDays">finalPaymentDueDays.</param>
        /// <param name="lastShowDate">lastShowDate.</param>
        /// <param name="allShowTourItem">allShowTourItem.</param>
        /// <param name="allPartnerEventsConfirmed">allPartnerEventsConfirmed.</param>
        /// <param name="grandTotalSaving">grandTotalSaving.</param>
        /// <param name="autoApplyDiscounts">autoApplyDiscounts.</param>
        public Order(long orderNumber = default(long), long customerNumber = default(long), DateTime orderDate = default(DateTime), string groupName = default(string), AddressExtended mailToAddress = default(AddressExtended), string specialCode = default(string), string firstName = default(string), string lastName = default(string), string addUserId = default(string), DateTime finalPaymentDueDate = default(DateTime), string cancelUserId = default(string), DateTime cancelDate = default(DateTime), DateTime contractReceivedDate = default(DateTime), string addLocationCode = default(string), string cancelLocationCode = default(string), string sourceCode = default(string), DateTime finalPaymentExtDueDate = default(DateTime), decimal orderTotalPrice = default(decimal), string companyName = default(string), OrderStatus status = default(OrderStatus), string editUserId = default(string), DateTime editDate = default(DateTime), OrderOrigin orderOrigin = default(OrderOrigin), string printUserId = default(string), string sourceCodeComments = default(string), decimal depositDueAmount = default(decimal), string contactFirstName = default(string), string contactLastName = default(string), long rpCustNumber = default(long), bool mailToSameAsCustomer = default(bool), bool bypassAutoSpecial = default(bool), string orderTypeCode = default(string), bool waiveDepositDue = default(bool), PricingLevel? pricingLevel = default(PricingLevel?), int tierYear = default(int), DateTime depositDueDate = default(DateTime), LocationDescription? theaterLocationCode = default(LocationDescription?), decimal depositAmount = default(decimal), bool cancelReminderSent = default(bool), bool emailTicketsProcessed = default(bool), string presentedByName = default(string), string mailToOrganizationName = default(string), string mailToPhone = default(string), string authorizedUsers = default(string), string resReqEncText = default(string), string salesRepId = default(string), DateTime lockShippingDate = default(DateTime), DateTime lockRefundDate = default(DateTime), bool finalSale = default(bool), string heldName = default(string), string refNumber = default(string), bool taxExempt = default(bool), bool recalculate = default(bool), decimal slidingScaleDiscount = default(decimal), DateTime shipDate = default(DateTime), string trackingNumber = default(string), string shipFromLocation = default(string), bool mailToAddressVerified = default(bool), TicketBatch? ticketBatch = default(TicketBatch?), string ticketBatchAgent = default(string), InvoiceType? invoiceType = default(InvoiceType?), long returnOrderNumber = default(long), string contactPhone = default(string), bool inventoryMoved = default(bool), bool invalid = default(bool), bool mailOrder = default(bool), string deliverStatus = default(string), string deliverUserId = default(string), DateTime deliverDateTime = default(DateTime), bool intlGroup = default(bool), string intlCountryCode = default(string), string salesConfCode = default(string), string email = default(string), string authUserPhoneNumber = default(string), DateTime completedDate = default(DateTime), Guid orderToken = default(Guid), List<Note> notes = default(List<Note>), List<OrderItem> orderItems = default(List<OrderItem>), Customer customer = default(Customer), List<WatchList> watchLists = default(List<WatchList>), List<Invoice> invoices = default(List<Invoice>), List<GroupInfo> groupInfo = default(List<GroupInfo>), List<Payment> payments = default(List<Payment>), Special special = default(Special), bool changeExistingDiscounts = default(bool), bool sendToAccpac = default(bool), decimal sessionPaidAmount = default(decimal), decimal sessionRefundAmount = default(decimal), decimal amountPaidWhenOrderLoaded = default(decimal), bool editMode = default(bool), bool specialAutoApplied = default(bool), bool logChanges = default(bool), bool specialRemoved = default(bool), string promoCode = default(string), bool discountAutoApplied = default(bool), ActivityType? logActivity = default(ActivityType?), bool persisted = default(bool), bool alreadyLoggedActivity = default(bool), bool cancelled = default(bool), OrderItem lastOccurringShowTourItem = default(OrderItem), decimal totalTransactionCharge = default(decimal), decimal totalCustomerDiscount = default(decimal), int highCountByOrderItem = default(int), bool _new = default(bool), OrderItem firstOccurringShowTourItem = default(OrderItem), List<OrderItem> activeOrderItemList = default(List<OrderItem>), bool seatsUnderAssigned = default(bool), int maxItemNumber = default(int), bool paymentPast = default(bool), bool ticketsMailed = default(bool), OrderItem latestEventOrderItem = default(OrderItem), DateTime earliestEventDate = default(DateTime), DateTime firstShowDate = default(DateTime), List<OrderItem> cancelledShowTourItemList = default(List<OrderItem>), int groupCount = default(int), PricingLevel? calculatedPricingLevel = default(PricingLevel?), decimal dueAmount = default(decimal), decimal totalFee = default(decimal), InvoiceCompany? invoiceCompany = default(InvoiceCompany?), List<OrderItem> activeShowTourItem = default(List<OrderItem>), string companyCode = default(string), OrderItem firstOccurringShowItem = default(OrderItem), OrderItem firstOccurringTourItem = default(OrderItem), List<OrderItem> activeWithOrder = default(List<OrderItem>), PricingLevel? postPayPricingLevel = default(PricingLevel?), decimal allItemsTotalPrice = default(decimal), decimal totalTax = default(decimal), decimal totalGratuity = default(decimal), decimal totalPaidAmount = default(decimal), decimal totalDiscount = default(decimal), bool readyForPrinting = default(bool), bool group = default(bool), List<OrderItem> activeShowItems = default(List<OrderItem>), string mailToName = default(string), string shipMethod = default(string), OrderItem firstOccurringShowItemWithValidCount = default(OrderItem), long showsDaysSpan = default(long), bool allSeatAssigned = default(bool), bool seatsOverAssigned = default(bool), int activeShowTourItemCount = default(int), long finalPaymentDueDays = default(long), DateTime lastShowDate = default(DateTime), List<OrderItem> allShowTourItem = default(List<OrderItem>), bool allPartnerEventsConfirmed = default(bool), decimal grandTotalSaving = default(decimal), bool autoApplyDiscounts = default(bool))
        {
            // to ensure "addUserId" is required (not null)
            if (addUserId == null)
            {
                throw new ArgumentNullException("addUserId is a required property for Order and cannot be null");
            }
            this.AddUserId = addUserId;
            this.OrderTotalPrice = orderTotalPrice;
            this.Status = status;
            this.OrderOrigin = orderOrigin;
            this.OrderNumber = orderNumber;
            this.CustomerNumber = customerNumber;
            this.OrderDate = orderDate;
            this.GroupName = groupName;
            this.MailToAddress = mailToAddress;
            this.SpecialCode = specialCode;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.FinalPaymentDueDate = finalPaymentDueDate;
            this.CancelUserId = cancelUserId;
            this.CancelDate = cancelDate;
            this.ContractReceivedDate = contractReceivedDate;
            this.AddLocationCode = addLocationCode;
            this.CancelLocationCode = cancelLocationCode;
            this.SourceCode = sourceCode;
            this.FinalPaymentExtDueDate = finalPaymentExtDueDate;
            this.CompanyName = companyName;
            this.EditUserId = editUserId;
            this.EditDate = editDate;
            this.PrintUserId = printUserId;
            this.SourceCodeComments = sourceCodeComments;
            this.DepositDueAmount = depositDueAmount;
            this.ContactFirstName = contactFirstName;
            this.ContactLastName = contactLastName;
            this.RpCustNumber = rpCustNumber;
            this.MailToSameAsCustomer = mailToSameAsCustomer;
            this.BypassAutoSpecial = bypassAutoSpecial;
            this.OrderTypeCode = orderTypeCode;
            this.WaiveDepositDue = waiveDepositDue;
            this.PricingLevel = pricingLevel;
            this.TierYear = tierYear;
            this.DepositDueDate = depositDueDate;
            this.TheaterLocationCode = theaterLocationCode;
            this.DepositAmount = depositAmount;
            this.CancelReminderSent = cancelReminderSent;
            this.EmailTicketsProcessed = emailTicketsProcessed;
            this.PresentedByName = presentedByName;
            this.MailToOrganizationName = mailToOrganizationName;
            this.MailToPhone = mailToPhone;
            this.AuthorizedUsers = authorizedUsers;
            this.ResReqEncText = resReqEncText;
            this.SalesRepId = salesRepId;
            this.LockShippingDate = lockShippingDate;
            this.LockRefundDate = lockRefundDate;
            this.FinalSale = finalSale;
            this.HeldName = heldName;
            this.RefNumber = refNumber;
            this.TaxExempt = taxExempt;
            this.Recalculate = recalculate;
            this.SlidingScaleDiscount = slidingScaleDiscount;
            this.ShipDate = shipDate;
            this.TrackingNumber = trackingNumber;
            this.ShipFromLocation = shipFromLocation;
            this.MailToAddressVerified = mailToAddressVerified;
            this.TicketBatch = ticketBatch;
            this.TicketBatchAgent = ticketBatchAgent;
            this.InvoiceType = invoiceType;
            this.ReturnOrderNumber = returnOrderNumber;
            this.ContactPhone = contactPhone;
            this.InventoryMoved = inventoryMoved;
            this.Invalid = invalid;
            this.MailOrder = mailOrder;
            this.DeliverStatus = deliverStatus;
            this.DeliverUserId = deliverUserId;
            this.DeliverDateTime = deliverDateTime;
            this.IntlGroup = intlGroup;
            this.IntlCountryCode = intlCountryCode;
            this.SalesConfCode = salesConfCode;
            this.Email = email;
            this.AuthUserPhoneNumber = authUserPhoneNumber;
            this.CompletedDate = completedDate;
            this.OrderToken = orderToken;
            this.Notes = notes;
            this.OrderItems = orderItems;
            this.Customer = customer;
            this.WatchLists = watchLists;
            this.Invoices = invoices;
            this.GroupInfo = groupInfo;
            this.Payments = payments;
            this.Special = special;
            this.ChangeExistingDiscounts = changeExistingDiscounts;
            this.SendToAccpac = sendToAccpac;
            this.SessionPaidAmount = sessionPaidAmount;
            this.SessionRefundAmount = sessionRefundAmount;
            this.AmountPaidWhenOrderLoaded = amountPaidWhenOrderLoaded;
            this.EditMode = editMode;
            this.SpecialAutoApplied = specialAutoApplied;
            this.LogChanges = logChanges;
            this.SpecialRemoved = specialRemoved;
            this.PromoCode = promoCode;
            this.DiscountAutoApplied = discountAutoApplied;
            this.LogActivity = logActivity;
            this.Persisted = persisted;
            this.AlreadyLoggedActivity = alreadyLoggedActivity;
            this.Cancelled = cancelled;
            this.LastOccurringShowTourItem = lastOccurringShowTourItem;
            this.TotalTransactionCharge = totalTransactionCharge;
            this.TotalCustomerDiscount = totalCustomerDiscount;
            this.HighCountByOrderItem = highCountByOrderItem;
            this.New = _new;
            this.FirstOccurringShowTourItem = firstOccurringShowTourItem;
            this.ActiveOrderItemList = activeOrderItemList;
            this.SeatsUnderAssigned = seatsUnderAssigned;
            this.MaxItemNumber = maxItemNumber;
            this.PaymentPast = paymentPast;
            this.TicketsMailed = ticketsMailed;
            this.LatestEventOrderItem = latestEventOrderItem;
            this.EarliestEventDate = earliestEventDate;
            this.FirstShowDate = firstShowDate;
            this.CancelledShowTourItemList = cancelledShowTourItemList;
            this.GroupCount = groupCount;
            this.CalculatedPricingLevel = calculatedPricingLevel;
            this.DueAmount = dueAmount;
            this.TotalFee = totalFee;
            this.InvoiceCompany = invoiceCompany;
            this.ActiveShowTourItem = activeShowTourItem;
            this.CompanyCode = companyCode;
            this.FirstOccurringShowItem = firstOccurringShowItem;
            this.FirstOccurringTourItem = firstOccurringTourItem;
            this.ActiveWithOrder = activeWithOrder;
            this.PostPayPricingLevel = postPayPricingLevel;
            this.AllItemsTotalPrice = allItemsTotalPrice;
            this.TotalTax = totalTax;
            this.TotalGratuity = totalGratuity;
            this.TotalPaidAmount = totalPaidAmount;
            this.TotalDiscount = totalDiscount;
            this.ReadyForPrinting = readyForPrinting;
            this.Group = group;
            this.ActiveShowItems = activeShowItems;
            this.MailToName = mailToName;
            this.ShipMethod = shipMethod;
            this.FirstOccurringShowItemWithValidCount = firstOccurringShowItemWithValidCount;
            this.ShowsDaysSpan = showsDaysSpan;
            this.AllSeatAssigned = allSeatAssigned;
            this.SeatsOverAssigned = seatsOverAssigned;
            this.ActiveShowTourItemCount = activeShowTourItemCount;
            this.FinalPaymentDueDays = finalPaymentDueDays;
            this.LastShowDate = lastShowDate;
            this.AllShowTourItem = allShowTourItem;
            this.AllPartnerEventsConfirmed = allPartnerEventsConfirmed;
            this.GrandTotalSaving = grandTotalSaving;
            this.AutoApplyDiscounts = autoApplyDiscounts;
        }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name = "orderDate", EmitDefaultValue = false)]
        public DateTime OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets MailToAddress
        /// </summary>
        [DataMember(Name = "mailToAddress", EmitDefaultValue = false)]
        public AddressExtended MailToAddress { get; set; }

        /// <summary>
        /// Gets or Sets SpecialCode
        /// </summary>
        [DataMember(Name = "specialCode", EmitDefaultValue = false)]
        public string SpecialCode { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", IsRequired = true, EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets FinalPaymentDueDate
        /// </summary>
        [DataMember(Name = "finalPaymentDueDate", EmitDefaultValue = false)]
        public DateTime FinalPaymentDueDate { get; set; }

        /// <summary>
        /// Gets or Sets CancelUserId
        /// </summary>
        [DataMember(Name = "cancelUserId", EmitDefaultValue = false)]
        public string CancelUserId { get; set; }

        /// <summary>
        /// Gets or Sets CancelDate
        /// </summary>
        [DataMember(Name = "cancelDate", EmitDefaultValue = false)]
        public DateTime CancelDate { get; set; }

        /// <summary>
        /// Gets or Sets ContractReceivedDate
        /// </summary>
        [DataMember(Name = "contractReceivedDate", EmitDefaultValue = false)]
        public DateTime ContractReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets AddLocationCode
        /// </summary>
        [DataMember(Name = "addLocationCode", EmitDefaultValue = false)]
        public string AddLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets CancelLocationCode
        /// </summary>
        [DataMember(Name = "cancelLocationCode", EmitDefaultValue = false)]
        public string CancelLocationCode { get; set; }

        /// <summary>
        /// Gets or Sets SourceCode
        /// </summary>
        [DataMember(Name = "sourceCode", EmitDefaultValue = false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Gets or Sets FinalPaymentExtDueDate
        /// </summary>
        [DataMember(Name = "finalPaymentExtDueDate", EmitDefaultValue = false)]
        public DateTime FinalPaymentExtDueDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderTotalPrice
        /// </summary>
        [DataMember(Name = "orderTotalPrice", IsRequired = true, EmitDefaultValue = false)]
        public decimal OrderTotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets EditUserId
        /// </summary>
        [DataMember(Name = "editUserId", EmitDefaultValue = false)]
        public string EditUserId { get; set; }

        /// <summary>
        /// Gets or Sets EditDate
        /// </summary>
        [DataMember(Name = "editDate", EmitDefaultValue = false)]
        public DateTime EditDate { get; set; }

        /// <summary>
        /// Gets or Sets PrintUserId
        /// </summary>
        [DataMember(Name = "printUserId", EmitDefaultValue = false)]
        public string PrintUserId { get; set; }

        /// <summary>
        /// Gets or Sets SourceCodeComments
        /// </summary>
        [DataMember(Name = "sourceCodeComments", EmitDefaultValue = false)]
        public string SourceCodeComments { get; set; }

        /// <summary>
        /// Gets or Sets DepositDueAmount
        /// </summary>
        [DataMember(Name = "depositDueAmount", EmitDefaultValue = false)]
        public decimal DepositDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets ContactFirstName
        /// </summary>
        [DataMember(Name = "contactFirstName", EmitDefaultValue = false)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Gets or Sets ContactLastName
        /// </summary>
        [DataMember(Name = "contactLastName", EmitDefaultValue = false)]
        public string ContactLastName { get; set; }

        /// <summary>
        /// Gets or Sets RpCustNumber
        /// </summary>
        [DataMember(Name = "rpCustNumber", EmitDefaultValue = false)]
        public long RpCustNumber { get; set; }

        /// <summary>
        /// Gets or Sets MailToSameAsCustomer
        /// </summary>
        [DataMember(Name = "mailToSameAsCustomer", EmitDefaultValue = true)]
        public bool MailToSameAsCustomer { get; set; }

        /// <summary>
        /// Gets or Sets BypassAutoSpecial
        /// </summary>
        [DataMember(Name = "bypassAutoSpecial", EmitDefaultValue = true)]
        public bool BypassAutoSpecial { get; set; }

        /// <summary>
        /// Gets or Sets OrderTypeCode
        /// </summary>
        [DataMember(Name = "orderTypeCode", EmitDefaultValue = false)]
        [Obsolete]
        public string OrderTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets WaiveDepositDue
        /// </summary>
        [DataMember(Name = "waiveDepositDue", EmitDefaultValue = true)]
        public bool WaiveDepositDue { get; set; }

        /// <summary>
        /// Gets or Sets TierYear
        /// </summary>
        [DataMember(Name = "tierYear", EmitDefaultValue = false)]
        public int TierYear { get; set; }

        /// <summary>
        /// Gets or Sets DepositDueDate
        /// </summary>
        [DataMember(Name = "depositDueDate", EmitDefaultValue = false)]
        public DateTime DepositDueDate { get; set; }

        /// <summary>
        /// Gets or Sets DepositAmount
        /// </summary>
        [DataMember(Name = "depositAmount", EmitDefaultValue = false)]
        public decimal DepositAmount { get; set; }

        /// <summary>
        /// Gets or Sets CancelReminderSent
        /// </summary>
        [DataMember(Name = "cancelReminderSent", EmitDefaultValue = true)]
        public bool CancelReminderSent { get; set; }

        /// <summary>
        /// Gets or Sets EmailTicketsProcessed
        /// </summary>
        [DataMember(Name = "emailTicketsProcessed", EmitDefaultValue = true)]
        public bool EmailTicketsProcessed { get; set; }

        /// <summary>
        /// Gets or Sets PresentedByName
        /// </summary>
        [DataMember(Name = "presentedByName", EmitDefaultValue = false)]
        public string PresentedByName { get; set; }

        /// <summary>
        /// Gets or Sets MailToOrganizationName
        /// </summary>
        [DataMember(Name = "mailToOrganizationName", EmitDefaultValue = false)]
        public string MailToOrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets MailToPhone
        /// </summary>
        [DataMember(Name = "mailToPhone", EmitDefaultValue = false)]
        public string MailToPhone { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedUsers
        /// </summary>
        [DataMember(Name = "authorizedUsers", EmitDefaultValue = false)]
        public string AuthorizedUsers { get; set; }

        /// <summary>
        /// Gets or Sets ResReqEncText
        /// </summary>
        [DataMember(Name = "resReqEncText", EmitDefaultValue = false)]
        public string ResReqEncText { get; set; }

        /// <summary>
        /// Gets or Sets SalesRepId
        /// </summary>
        [DataMember(Name = "salesRepId", EmitDefaultValue = false)]
        public string SalesRepId { get; set; }

        /// <summary>
        /// Gets or Sets LockShippingDate
        /// </summary>
        [DataMember(Name = "lockShippingDate", EmitDefaultValue = false)]
        public DateTime LockShippingDate { get; set; }

        /// <summary>
        /// Gets or Sets LockRefundDate
        /// </summary>
        [DataMember(Name = "lockRefundDate", EmitDefaultValue = false)]
        public DateTime LockRefundDate { get; set; }

        /// <summary>
        /// Gets or Sets FinalSale
        /// </summary>
        [DataMember(Name = "finalSale", EmitDefaultValue = true)]
        public bool FinalSale { get; set; }

        /// <summary>
        /// Gets or Sets HeldName
        /// </summary>
        [DataMember(Name = "heldName", EmitDefaultValue = false)]
        public string HeldName { get; set; }

        /// <summary>
        /// Gets or Sets RefNumber
        /// </summary>
        [DataMember(Name = "refNumber", EmitDefaultValue = false)]
        public string RefNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxExempt
        /// </summary>
        [DataMember(Name = "taxExempt", EmitDefaultValue = true)]
        public bool TaxExempt { get; set; }

        /// <summary>
        /// Gets or Sets Recalculate
        /// </summary>
        [DataMember(Name = "recalculate", EmitDefaultValue = true)]
        public bool Recalculate { get; set; }

        /// <summary>
        /// Gets or Sets SlidingScaleDiscount
        /// </summary>
        [DataMember(Name = "slidingScaleDiscount", EmitDefaultValue = false)]
        public decimal SlidingScaleDiscount { get; set; }

        /// <summary>
        /// Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name = "shipDate", EmitDefaultValue = false)]
        public DateTime ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromLocation
        /// </summary>
        [DataMember(Name = "shipFromLocation", EmitDefaultValue = false)]
        public string ShipFromLocation { get; set; }

        /// <summary>
        /// Gets or Sets MailToAddressVerified
        /// </summary>
        [DataMember(Name = "mailToAddressVerified", EmitDefaultValue = true)]
        public bool MailToAddressVerified { get; set; }

        /// <summary>
        /// Gets or Sets TicketBatchAgent
        /// </summary>
        [DataMember(Name = "ticketBatchAgent", EmitDefaultValue = false)]
        public string TicketBatchAgent { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOrderNumber
        /// </summary>
        [DataMember(Name = "returnOrderNumber", EmitDefaultValue = false)]
        public long ReturnOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhone
        /// </summary>
        [DataMember(Name = "contactPhone", EmitDefaultValue = false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Gets or Sets InventoryMoved
        /// </summary>
        [DataMember(Name = "inventoryMoved", EmitDefaultValue = true)]
        public bool InventoryMoved { get; set; }

        /// <summary>
        /// Gets or Sets Invalid
        /// </summary>
        [DataMember(Name = "invalid", EmitDefaultValue = true)]
        public bool Invalid { get; set; }

        /// <summary>
        /// Gets or Sets MailOrder
        /// </summary>
        [DataMember(Name = "mailOrder", EmitDefaultValue = true)]
        public bool MailOrder { get; set; }

        /// <summary>
        /// Gets or Sets DeliverStatus
        /// </summary>
        [DataMember(Name = "deliverStatus", EmitDefaultValue = false)]
        public string DeliverStatus { get; set; }

        /// <summary>
        /// Gets or Sets DeliverUserId
        /// </summary>
        [DataMember(Name = "deliverUserId", EmitDefaultValue = false)]
        public string DeliverUserId { get; set; }

        /// <summary>
        /// Gets or Sets DeliverDateTime
        /// </summary>
        [DataMember(Name = "deliverDateTime", EmitDefaultValue = false)]
        public DateTime DeliverDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IntlGroup
        /// </summary>
        [DataMember(Name = "intlGroup", EmitDefaultValue = true)]
        public bool IntlGroup { get; set; }

        /// <summary>
        /// Gets or Sets IntlCountryCode
        /// </summary>
        [DataMember(Name = "intlCountryCode", EmitDefaultValue = false)]
        public string IntlCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets SalesConfCode
        /// </summary>
        [DataMember(Name = "salesConfCode", EmitDefaultValue = false)]
        public string SalesConfCode { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets AuthUserPhoneNumber
        /// </summary>
        [DataMember(Name = "authUserPhoneNumber", EmitDefaultValue = false)]
        public string AuthUserPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name = "completedDate", EmitDefaultValue = false)]
        public DateTime CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderToken
        /// </summary>
        [DataMember(Name = "orderToken", EmitDefaultValue = false)]
        public Guid OrderToken { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Gets or Sets OrderItems
        /// </summary>
        [DataMember(Name = "orderItems", EmitDefaultValue = false)]
        public List<OrderItem> OrderItems { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or Sets WatchLists
        /// </summary>
        [DataMember(Name = "watchLists", EmitDefaultValue = false)]
        public List<WatchList> WatchLists { get; set; }

        /// <summary>
        /// Gets or Sets Invoices
        /// </summary>
        [DataMember(Name = "invoices", EmitDefaultValue = false)]
        public List<Invoice> Invoices { get; set; }

        /// <summary>
        /// Gets or Sets GroupInfo
        /// </summary>
        [DataMember(Name = "groupInfo", EmitDefaultValue = false)]
        public List<GroupInfo> GroupInfo { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets Special
        /// </summary>
        [DataMember(Name = "special", EmitDefaultValue = false)]
        public Special Special { get; set; }

        /// <summary>
        /// Gets or Sets ChangeExistingDiscounts
        /// </summary>
        [DataMember(Name = "changeExistingDiscounts", EmitDefaultValue = true)]
        public bool ChangeExistingDiscounts { get; set; }

        /// <summary>
        /// Gets or Sets SendToAccpac
        /// </summary>
        [DataMember(Name = "sendToAccpac", EmitDefaultValue = true)]
        public bool SendToAccpac { get; set; }

        /// <summary>
        /// Gets or Sets SessionPaidAmount
        /// </summary>
        [DataMember(Name = "sessionPaidAmount", EmitDefaultValue = false)]
        public decimal SessionPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets SessionRefundAmount
        /// </summary>
        [DataMember(Name = "sessionRefundAmount", EmitDefaultValue = false)]
        public decimal SessionRefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets AmountPaidWhenOrderLoaded
        /// </summary>
        [DataMember(Name = "amountPaidWhenOrderLoaded", EmitDefaultValue = false)]
        public decimal AmountPaidWhenOrderLoaded { get; set; }

        /// <summary>
        /// Gets or Sets EditMode
        /// </summary>
        [DataMember(Name = "editMode", EmitDefaultValue = true)]
        public bool EditMode { get; set; }

        /// <summary>
        /// Gets or Sets SpecialAutoApplied
        /// </summary>
        [DataMember(Name = "specialAutoApplied", EmitDefaultValue = true)]
        public bool SpecialAutoApplied { get; set; }

        /// <summary>
        /// Gets or Sets LogChanges
        /// </summary>
        [DataMember(Name = "logChanges", EmitDefaultValue = true)]
        public bool LogChanges { get; set; }

        /// <summary>
        /// Gets or Sets SpecialRemoved
        /// </summary>
        [DataMember(Name = "specialRemoved", EmitDefaultValue = true)]
        public bool SpecialRemoved { get; set; }

        /// <summary>
        /// Gets or Sets PromoCode
        /// </summary>
        [DataMember(Name = "promoCode", EmitDefaultValue = false)]
        public string PromoCode { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAutoApplied
        /// </summary>
        [DataMember(Name = "discountAutoApplied", EmitDefaultValue = true)]
        public bool DiscountAutoApplied { get; set; }

        /// <summary>
        /// Gets or Sets Persisted
        /// </summary>
        [DataMember(Name = "persisted", EmitDefaultValue = true)]
        public bool Persisted { get; set; }

        /// <summary>
        /// Gets or Sets AlreadyLoggedActivity
        /// </summary>
        [DataMember(Name = "alreadyLoggedActivity", EmitDefaultValue = true)]
        public bool AlreadyLoggedActivity { get; set; }

        /// <summary>
        /// Gets or Sets Cancelled
        /// </summary>
        [DataMember(Name = "cancelled", EmitDefaultValue = true)]
        public bool Cancelled { get; set; }

        /// <summary>
        /// Gets or Sets LastOccurringShowTourItem
        /// </summary>
        [DataMember(Name = "lastOccurringShowTourItem", EmitDefaultValue = false)]
        public OrderItem LastOccurringShowTourItem { get; set; }

        /// <summary>
        /// Gets or Sets TotalTransactionCharge
        /// </summary>
        [DataMember(Name = "totalTransactionCharge", EmitDefaultValue = false)]
        public decimal TotalTransactionCharge { get; set; }

        /// <summary>
        /// Gets or Sets TotalCustomerDiscount
        /// </summary>
        [DataMember(Name = "totalCustomerDiscount", EmitDefaultValue = false)]
        public decimal TotalCustomerDiscount { get; set; }

        /// <summary>
        /// Gets or Sets HighCountByOrderItem
        /// </summary>
        [DataMember(Name = "highCountByOrderItem", EmitDefaultValue = false)]
        public int HighCountByOrderItem { get; set; }

        /// <summary>
        /// Gets or Sets New
        /// </summary>
        [DataMember(Name = "new", EmitDefaultValue = true)]
        public bool New { get; set; }

        /// <summary>
        /// Gets or Sets FirstOccurringShowTourItem
        /// </summary>
        [DataMember(Name = "firstOccurringShowTourItem", EmitDefaultValue = false)]
        public OrderItem FirstOccurringShowTourItem { get; set; }

        /// <summary>
        /// Gets or Sets ActiveOrderItemList
        /// </summary>
        [DataMember(Name = "activeOrderItemList", EmitDefaultValue = false)]
        public List<OrderItem> ActiveOrderItemList { get; set; }

        /// <summary>
        /// Gets or Sets SeatsUnderAssigned
        /// </summary>
        [DataMember(Name = "seatsUnderAssigned", EmitDefaultValue = true)]
        public bool SeatsUnderAssigned { get; set; }

        /// <summary>
        /// Gets or Sets MaxItemNumber
        /// </summary>
        [DataMember(Name = "maxItemNumber", EmitDefaultValue = false)]
        public int MaxItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPast
        /// </summary>
        [DataMember(Name = "paymentPast", EmitDefaultValue = true)]
        public bool PaymentPast { get; set; }

        /// <summary>
        /// Gets or Sets TicketsMailed
        /// </summary>
        [DataMember(Name = "ticketsMailed", EmitDefaultValue = true)]
        public bool TicketsMailed { get; set; }

        /// <summary>
        /// Gets or Sets LatestEventOrderItem
        /// </summary>
        [DataMember(Name = "latestEventOrderItem", EmitDefaultValue = false)]
        public OrderItem LatestEventOrderItem { get; set; }

        /// <summary>
        /// Gets or Sets EarliestEventDate
        /// </summary>
        [DataMember(Name = "earliestEventDate", EmitDefaultValue = false)]
        public DateTime EarliestEventDate { get; set; }

        /// <summary>
        /// Gets or Sets FirstShowDate
        /// </summary>
        [DataMember(Name = "firstShowDate", EmitDefaultValue = false)]
        public DateTime FirstShowDate { get; set; }

        /// <summary>
        /// Gets or Sets CancelledShowTourItemList
        /// </summary>
        [DataMember(Name = "cancelledShowTourItemList", EmitDefaultValue = false)]
        public List<OrderItem> CancelledShowTourItemList { get; set; }

        /// <summary>
        /// Gets or Sets GroupCount
        /// </summary>
        [DataMember(Name = "groupCount", EmitDefaultValue = false)]
        public int GroupCount { get; set; }

        /// <summary>
        /// Gets or Sets DueAmount
        /// </summary>
        [DataMember(Name = "dueAmount", EmitDefaultValue = false)]
        public decimal DueAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalFee
        /// </summary>
        [DataMember(Name = "totalFee", EmitDefaultValue = false)]
        public decimal TotalFee { get; set; }

        /// <summary>
        /// Gets or Sets ActiveShowTourItem
        /// </summary>
        [DataMember(Name = "activeShowTourItem", EmitDefaultValue = false)]
        public List<OrderItem> ActiveShowTourItem { get; set; }

        /// <summary>
        /// Gets or Sets CompanyCode
        /// </summary>
        [DataMember(Name = "companyCode", EmitDefaultValue = false)]
        public string CompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets FirstOccurringShowItem
        /// </summary>
        [DataMember(Name = "firstOccurringShowItem", EmitDefaultValue = false)]
        public OrderItem FirstOccurringShowItem { get; set; }

        /// <summary>
        /// Gets or Sets FirstOccurringTourItem
        /// </summary>
        [DataMember(Name = "firstOccurringTourItem", EmitDefaultValue = false)]
        public OrderItem FirstOccurringTourItem { get; set; }

        /// <summary>
        /// Gets or Sets ActiveWithOrder
        /// </summary>
        [DataMember(Name = "activeWithOrder", EmitDefaultValue = false)]
        public List<OrderItem> ActiveWithOrder { get; set; }

        /// <summary>
        /// Gets or Sets AllItemsTotalPrice
        /// </summary>
        [DataMember(Name = "allItemsTotalPrice", EmitDefaultValue = false)]
        public decimal AllItemsTotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalTax
        /// </summary>
        [DataMember(Name = "totalTax", EmitDefaultValue = false)]
        public decimal TotalTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalGratuity
        /// </summary>
        [DataMember(Name = "totalGratuity", EmitDefaultValue = false)]
        public decimal TotalGratuity { get; set; }

        /// <summary>
        /// Gets or Sets TotalPaidAmount
        /// </summary>
        [DataMember(Name = "totalPaidAmount", EmitDefaultValue = false)]
        public decimal TotalPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalDiscount
        /// </summary>
        [DataMember(Name = "totalDiscount", EmitDefaultValue = false)]
        public decimal TotalDiscount { get; set; }

        /// <summary>
        /// Gets or Sets ReadyForPrinting
        /// </summary>
        [DataMember(Name = "readyForPrinting", EmitDefaultValue = true)]
        public bool ReadyForPrinting { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public bool Group { get; set; }

        /// <summary>
        /// Gets or Sets ActiveShowItems
        /// </summary>
        [DataMember(Name = "activeShowItems", EmitDefaultValue = false)]
        public List<OrderItem> ActiveShowItems { get; set; }

        /// <summary>
        /// Gets or Sets MailToName
        /// </summary>
        [DataMember(Name = "mailToName", EmitDefaultValue = false)]
        public string MailToName { get; set; }

        /// <summary>
        /// Gets or Sets ShipMethod
        /// </summary>
        [DataMember(Name = "shipMethod", EmitDefaultValue = false)]
        public string ShipMethod { get; set; }

        /// <summary>
        /// Gets or Sets FirstOccurringShowItemWithValidCount
        /// </summary>
        [DataMember(Name = "firstOccurringShowItemWithValidCount", EmitDefaultValue = false)]
        public OrderItem FirstOccurringShowItemWithValidCount { get; set; }

        /// <summary>
        /// Gets or Sets ShowsDaysSpan
        /// </summary>
        [DataMember(Name = "showsDaysSpan", EmitDefaultValue = false)]
        public long ShowsDaysSpan { get; set; }

        /// <summary>
        /// Gets or Sets AllSeatAssigned
        /// </summary>
        [DataMember(Name = "allSeatAssigned", EmitDefaultValue = true)]
        public bool AllSeatAssigned { get; set; }

        /// <summary>
        /// Gets or Sets SeatsOverAssigned
        /// </summary>
        [DataMember(Name = "seatsOverAssigned", EmitDefaultValue = true)]
        public bool SeatsOverAssigned { get; set; }

        /// <summary>
        /// Gets or Sets ActiveShowTourItemCount
        /// </summary>
        [DataMember(Name = "activeShowTourItemCount", EmitDefaultValue = false)]
        public int ActiveShowTourItemCount { get; set; }

        /// <summary>
        /// Gets or Sets FinalPaymentDueDays
        /// </summary>
        [DataMember(Name = "finalPaymentDueDays", EmitDefaultValue = false)]
        public long FinalPaymentDueDays { get; set; }

        /// <summary>
        /// Gets or Sets LastShowDate
        /// </summary>
        [DataMember(Name = "lastShowDate", EmitDefaultValue = false)]
        public DateTime LastShowDate { get; set; }

        /// <summary>
        /// Gets or Sets AllShowTourItem
        /// </summary>
        [DataMember(Name = "allShowTourItem", EmitDefaultValue = false)]
        public List<OrderItem> AllShowTourItem { get; set; }

        /// <summary>
        /// Gets or Sets AllPartnerEventsConfirmed
        /// </summary>
        [DataMember(Name = "allPartnerEventsConfirmed", EmitDefaultValue = true)]
        public bool AllPartnerEventsConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets GrandTotalSaving
        /// </summary>
        [DataMember(Name = "grandTotalSaving", EmitDefaultValue = false)]
        public decimal GrandTotalSaving { get; set; }

        /// <summary>
        /// Gets or Sets AutoApplyDiscounts
        /// </summary>
        [DataMember(Name = "autoApplyDiscounts", EmitDefaultValue = true)]
        public bool AutoApplyDiscounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  MailToAddress: ").Append(MailToAddress).Append("\n");
            sb.Append("  SpecialCode: ").Append(SpecialCode).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  FinalPaymentDueDate: ").Append(FinalPaymentDueDate).Append("\n");
            sb.Append("  CancelUserId: ").Append(CancelUserId).Append("\n");
            sb.Append("  CancelDate: ").Append(CancelDate).Append("\n");
            sb.Append("  ContractReceivedDate: ").Append(ContractReceivedDate).Append("\n");
            sb.Append("  AddLocationCode: ").Append(AddLocationCode).Append("\n");
            sb.Append("  CancelLocationCode: ").Append(CancelLocationCode).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  FinalPaymentExtDueDate: ").Append(FinalPaymentExtDueDate).Append("\n");
            sb.Append("  OrderTotalPrice: ").Append(OrderTotalPrice).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EditUserId: ").Append(EditUserId).Append("\n");
            sb.Append("  EditDate: ").Append(EditDate).Append("\n");
            sb.Append("  OrderOrigin: ").Append(OrderOrigin).Append("\n");
            sb.Append("  PrintUserId: ").Append(PrintUserId).Append("\n");
            sb.Append("  SourceCodeComments: ").Append(SourceCodeComments).Append("\n");
            sb.Append("  DepositDueAmount: ").Append(DepositDueAmount).Append("\n");
            sb.Append("  ContactFirstName: ").Append(ContactFirstName).Append("\n");
            sb.Append("  ContactLastName: ").Append(ContactLastName).Append("\n");
            sb.Append("  RpCustNumber: ").Append(RpCustNumber).Append("\n");
            sb.Append("  MailToSameAsCustomer: ").Append(MailToSameAsCustomer).Append("\n");
            sb.Append("  BypassAutoSpecial: ").Append(BypassAutoSpecial).Append("\n");
            sb.Append("  OrderTypeCode: ").Append(OrderTypeCode).Append("\n");
            sb.Append("  WaiveDepositDue: ").Append(WaiveDepositDue).Append("\n");
            sb.Append("  PricingLevel: ").Append(PricingLevel).Append("\n");
            sb.Append("  TierYear: ").Append(TierYear).Append("\n");
            sb.Append("  DepositDueDate: ").Append(DepositDueDate).Append("\n");
            sb.Append("  TheaterLocationCode: ").Append(TheaterLocationCode).Append("\n");
            sb.Append("  DepositAmount: ").Append(DepositAmount).Append("\n");
            sb.Append("  CancelReminderSent: ").Append(CancelReminderSent).Append("\n");
            sb.Append("  EmailTicketsProcessed: ").Append(EmailTicketsProcessed).Append("\n");
            sb.Append("  PresentedByName: ").Append(PresentedByName).Append("\n");
            sb.Append("  MailToOrganizationName: ").Append(MailToOrganizationName).Append("\n");
            sb.Append("  MailToPhone: ").Append(MailToPhone).Append("\n");
            sb.Append("  AuthorizedUsers: ").Append(AuthorizedUsers).Append("\n");
            sb.Append("  ResReqEncText: ").Append(ResReqEncText).Append("\n");
            sb.Append("  SalesRepId: ").Append(SalesRepId).Append("\n");
            sb.Append("  LockShippingDate: ").Append(LockShippingDate).Append("\n");
            sb.Append("  LockRefundDate: ").Append(LockRefundDate).Append("\n");
            sb.Append("  FinalSale: ").Append(FinalSale).Append("\n");
            sb.Append("  HeldName: ").Append(HeldName).Append("\n");
            sb.Append("  RefNumber: ").Append(RefNumber).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  Recalculate: ").Append(Recalculate).Append("\n");
            sb.Append("  SlidingScaleDiscount: ").Append(SlidingScaleDiscount).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  ShipFromLocation: ").Append(ShipFromLocation).Append("\n");
            sb.Append("  MailToAddressVerified: ").Append(MailToAddressVerified).Append("\n");
            sb.Append("  TicketBatch: ").Append(TicketBatch).Append("\n");
            sb.Append("  TicketBatchAgent: ").Append(TicketBatchAgent).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  ReturnOrderNumber: ").Append(ReturnOrderNumber).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  InventoryMoved: ").Append(InventoryMoved).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  MailOrder: ").Append(MailOrder).Append("\n");
            sb.Append("  DeliverStatus: ").Append(DeliverStatus).Append("\n");
            sb.Append("  DeliverUserId: ").Append(DeliverUserId).Append("\n");
            sb.Append("  DeliverDateTime: ").Append(DeliverDateTime).Append("\n");
            sb.Append("  IntlGroup: ").Append(IntlGroup).Append("\n");
            sb.Append("  IntlCountryCode: ").Append(IntlCountryCode).Append("\n");
            sb.Append("  SalesConfCode: ").Append(SalesConfCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AuthUserPhoneNumber: ").Append(AuthUserPhoneNumber).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  OrderToken: ").Append(OrderToken).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OrderItems: ").Append(OrderItems).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  WatchLists: ").Append(WatchLists).Append("\n");
            sb.Append("  Invoices: ").Append(Invoices).Append("\n");
            sb.Append("  GroupInfo: ").Append(GroupInfo).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("  ChangeExistingDiscounts: ").Append(ChangeExistingDiscounts).Append("\n");
            sb.Append("  SendToAccpac: ").Append(SendToAccpac).Append("\n");
            sb.Append("  SessionPaidAmount: ").Append(SessionPaidAmount).Append("\n");
            sb.Append("  SessionRefundAmount: ").Append(SessionRefundAmount).Append("\n");
            sb.Append("  AmountPaidWhenOrderLoaded: ").Append(AmountPaidWhenOrderLoaded).Append("\n");
            sb.Append("  EditMode: ").Append(EditMode).Append("\n");
            sb.Append("  SpecialAutoApplied: ").Append(SpecialAutoApplied).Append("\n");
            sb.Append("  LogChanges: ").Append(LogChanges).Append("\n");
            sb.Append("  SpecialRemoved: ").Append(SpecialRemoved).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("  DiscountAutoApplied: ").Append(DiscountAutoApplied).Append("\n");
            sb.Append("  LogActivity: ").Append(LogActivity).Append("\n");
            sb.Append("  Persisted: ").Append(Persisted).Append("\n");
            sb.Append("  AlreadyLoggedActivity: ").Append(AlreadyLoggedActivity).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  LastOccurringShowTourItem: ").Append(LastOccurringShowTourItem).Append("\n");
            sb.Append("  TotalTransactionCharge: ").Append(TotalTransactionCharge).Append("\n");
            sb.Append("  TotalCustomerDiscount: ").Append(TotalCustomerDiscount).Append("\n");
            sb.Append("  HighCountByOrderItem: ").Append(HighCountByOrderItem).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  FirstOccurringShowTourItem: ").Append(FirstOccurringShowTourItem).Append("\n");
            sb.Append("  ActiveOrderItemList: ").Append(ActiveOrderItemList).Append("\n");
            sb.Append("  SeatsUnderAssigned: ").Append(SeatsUnderAssigned).Append("\n");
            sb.Append("  MaxItemNumber: ").Append(MaxItemNumber).Append("\n");
            sb.Append("  PaymentPast: ").Append(PaymentPast).Append("\n");
            sb.Append("  TicketsMailed: ").Append(TicketsMailed).Append("\n");
            sb.Append("  LatestEventOrderItem: ").Append(LatestEventOrderItem).Append("\n");
            sb.Append("  EarliestEventDate: ").Append(EarliestEventDate).Append("\n");
            sb.Append("  FirstShowDate: ").Append(FirstShowDate).Append("\n");
            sb.Append("  CancelledShowTourItemList: ").Append(CancelledShowTourItemList).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  CalculatedPricingLevel: ").Append(CalculatedPricingLevel).Append("\n");
            sb.Append("  DueAmount: ").Append(DueAmount).Append("\n");
            sb.Append("  TotalFee: ").Append(TotalFee).Append("\n");
            sb.Append("  InvoiceCompany: ").Append(InvoiceCompany).Append("\n");
            sb.Append("  ActiveShowTourItem: ").Append(ActiveShowTourItem).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  FirstOccurringShowItem: ").Append(FirstOccurringShowItem).Append("\n");
            sb.Append("  FirstOccurringTourItem: ").Append(FirstOccurringTourItem).Append("\n");
            sb.Append("  ActiveWithOrder: ").Append(ActiveWithOrder).Append("\n");
            sb.Append("  PostPayPricingLevel: ").Append(PostPayPricingLevel).Append("\n");
            sb.Append("  AllItemsTotalPrice: ").Append(AllItemsTotalPrice).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  TotalGratuity: ").Append(TotalGratuity).Append("\n");
            sb.Append("  TotalPaidAmount: ").Append(TotalPaidAmount).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  ReadyForPrinting: ").Append(ReadyForPrinting).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  ActiveShowItems: ").Append(ActiveShowItems).Append("\n");
            sb.Append("  MailToName: ").Append(MailToName).Append("\n");
            sb.Append("  ShipMethod: ").Append(ShipMethod).Append("\n");
            sb.Append("  FirstOccurringShowItemWithValidCount: ").Append(FirstOccurringShowItemWithValidCount).Append("\n");
            sb.Append("  ShowsDaysSpan: ").Append(ShowsDaysSpan).Append("\n");
            sb.Append("  AllSeatAssigned: ").Append(AllSeatAssigned).Append("\n");
            sb.Append("  SeatsOverAssigned: ").Append(SeatsOverAssigned).Append("\n");
            sb.Append("  ActiveShowTourItemCount: ").Append(ActiveShowTourItemCount).Append("\n");
            sb.Append("  FinalPaymentDueDays: ").Append(FinalPaymentDueDays).Append("\n");
            sb.Append("  LastShowDate: ").Append(LastShowDate).Append("\n");
            sb.Append("  AllShowTourItem: ").Append(AllShowTourItem).Append("\n");
            sb.Append("  AllPartnerEventsConfirmed: ").Append(AllPartnerEventsConfirmed).Append("\n");
            sb.Append("  GrandTotalSaving: ").Append(GrandTotalSaving).Append("\n");
            sb.Append("  AutoApplyDiscounts: ").Append(AutoApplyDiscounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.MailToAddress == input.MailToAddress ||
                    (this.MailToAddress != null &&
                    this.MailToAddress.Equals(input.MailToAddress))
                ) && 
                (
                    this.SpecialCode == input.SpecialCode ||
                    (this.SpecialCode != null &&
                    this.SpecialCode.Equals(input.SpecialCode))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.FinalPaymentDueDate == input.FinalPaymentDueDate ||
                    (this.FinalPaymentDueDate != null &&
                    this.FinalPaymentDueDate.Equals(input.FinalPaymentDueDate))
                ) && 
                (
                    this.CancelUserId == input.CancelUserId ||
                    (this.CancelUserId != null &&
                    this.CancelUserId.Equals(input.CancelUserId))
                ) && 
                (
                    this.CancelDate == input.CancelDate ||
                    (this.CancelDate != null &&
                    this.CancelDate.Equals(input.CancelDate))
                ) && 
                (
                    this.ContractReceivedDate == input.ContractReceivedDate ||
                    (this.ContractReceivedDate != null &&
                    this.ContractReceivedDate.Equals(input.ContractReceivedDate))
                ) && 
                (
                    this.AddLocationCode == input.AddLocationCode ||
                    (this.AddLocationCode != null &&
                    this.AddLocationCode.Equals(input.AddLocationCode))
                ) && 
                (
                    this.CancelLocationCode == input.CancelLocationCode ||
                    (this.CancelLocationCode != null &&
                    this.CancelLocationCode.Equals(input.CancelLocationCode))
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && 
                (
                    this.FinalPaymentExtDueDate == input.FinalPaymentExtDueDate ||
                    (this.FinalPaymentExtDueDate != null &&
                    this.FinalPaymentExtDueDate.Equals(input.FinalPaymentExtDueDate))
                ) && 
                (
                    this.OrderTotalPrice == input.OrderTotalPrice ||
                    this.OrderTotalPrice.Equals(input.OrderTotalPrice)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.EditUserId == input.EditUserId ||
                    (this.EditUserId != null &&
                    this.EditUserId.Equals(input.EditUserId))
                ) && 
                (
                    this.EditDate == input.EditDate ||
                    (this.EditDate != null &&
                    this.EditDate.Equals(input.EditDate))
                ) && 
                (
                    this.OrderOrigin == input.OrderOrigin ||
                    this.OrderOrigin.Equals(input.OrderOrigin)
                ) && 
                (
                    this.PrintUserId == input.PrintUserId ||
                    (this.PrintUserId != null &&
                    this.PrintUserId.Equals(input.PrintUserId))
                ) && 
                (
                    this.SourceCodeComments == input.SourceCodeComments ||
                    (this.SourceCodeComments != null &&
                    this.SourceCodeComments.Equals(input.SourceCodeComments))
                ) && 
                (
                    this.DepositDueAmount == input.DepositDueAmount ||
                    this.DepositDueAmount.Equals(input.DepositDueAmount)
                ) && 
                (
                    this.ContactFirstName == input.ContactFirstName ||
                    (this.ContactFirstName != null &&
                    this.ContactFirstName.Equals(input.ContactFirstName))
                ) && 
                (
                    this.ContactLastName == input.ContactLastName ||
                    (this.ContactLastName != null &&
                    this.ContactLastName.Equals(input.ContactLastName))
                ) && 
                (
                    this.RpCustNumber == input.RpCustNumber ||
                    this.RpCustNumber.Equals(input.RpCustNumber)
                ) && 
                (
                    this.MailToSameAsCustomer == input.MailToSameAsCustomer ||
                    this.MailToSameAsCustomer.Equals(input.MailToSameAsCustomer)
                ) && 
                (
                    this.BypassAutoSpecial == input.BypassAutoSpecial ||
                    this.BypassAutoSpecial.Equals(input.BypassAutoSpecial)
                ) && 
                (
                    this.OrderTypeCode == input.OrderTypeCode ||
                    (this.OrderTypeCode != null &&
                    this.OrderTypeCode.Equals(input.OrderTypeCode))
                ) && 
                (
                    this.WaiveDepositDue == input.WaiveDepositDue ||
                    this.WaiveDepositDue.Equals(input.WaiveDepositDue)
                ) && 
                (
                    this.PricingLevel == input.PricingLevel ||
                    this.PricingLevel.Equals(input.PricingLevel)
                ) && 
                (
                    this.TierYear == input.TierYear ||
                    this.TierYear.Equals(input.TierYear)
                ) && 
                (
                    this.DepositDueDate == input.DepositDueDate ||
                    (this.DepositDueDate != null &&
                    this.DepositDueDate.Equals(input.DepositDueDate))
                ) && 
                (
                    this.TheaterLocationCode == input.TheaterLocationCode ||
                    this.TheaterLocationCode.Equals(input.TheaterLocationCode)
                ) && 
                (
                    this.DepositAmount == input.DepositAmount ||
                    this.DepositAmount.Equals(input.DepositAmount)
                ) && 
                (
                    this.CancelReminderSent == input.CancelReminderSent ||
                    this.CancelReminderSent.Equals(input.CancelReminderSent)
                ) && 
                (
                    this.EmailTicketsProcessed == input.EmailTicketsProcessed ||
                    this.EmailTicketsProcessed.Equals(input.EmailTicketsProcessed)
                ) && 
                (
                    this.PresentedByName == input.PresentedByName ||
                    (this.PresentedByName != null &&
                    this.PresentedByName.Equals(input.PresentedByName))
                ) && 
                (
                    this.MailToOrganizationName == input.MailToOrganizationName ||
                    (this.MailToOrganizationName != null &&
                    this.MailToOrganizationName.Equals(input.MailToOrganizationName))
                ) && 
                (
                    this.MailToPhone == input.MailToPhone ||
                    (this.MailToPhone != null &&
                    this.MailToPhone.Equals(input.MailToPhone))
                ) && 
                (
                    this.AuthorizedUsers == input.AuthorizedUsers ||
                    (this.AuthorizedUsers != null &&
                    this.AuthorizedUsers.Equals(input.AuthorizedUsers))
                ) && 
                (
                    this.ResReqEncText == input.ResReqEncText ||
                    (this.ResReqEncText != null &&
                    this.ResReqEncText.Equals(input.ResReqEncText))
                ) && 
                (
                    this.SalesRepId == input.SalesRepId ||
                    (this.SalesRepId != null &&
                    this.SalesRepId.Equals(input.SalesRepId))
                ) && 
                (
                    this.LockShippingDate == input.LockShippingDate ||
                    (this.LockShippingDate != null &&
                    this.LockShippingDate.Equals(input.LockShippingDate))
                ) && 
                (
                    this.LockRefundDate == input.LockRefundDate ||
                    (this.LockRefundDate != null &&
                    this.LockRefundDate.Equals(input.LockRefundDate))
                ) && 
                (
                    this.FinalSale == input.FinalSale ||
                    this.FinalSale.Equals(input.FinalSale)
                ) && 
                (
                    this.HeldName == input.HeldName ||
                    (this.HeldName != null &&
                    this.HeldName.Equals(input.HeldName))
                ) && 
                (
                    this.RefNumber == input.RefNumber ||
                    (this.RefNumber != null &&
                    this.RefNumber.Equals(input.RefNumber))
                ) && 
                (
                    this.TaxExempt == input.TaxExempt ||
                    this.TaxExempt.Equals(input.TaxExempt)
                ) && 
                (
                    this.Recalculate == input.Recalculate ||
                    this.Recalculate.Equals(input.Recalculate)
                ) && 
                (
                    this.SlidingScaleDiscount == input.SlidingScaleDiscount ||
                    this.SlidingScaleDiscount.Equals(input.SlidingScaleDiscount)
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.ShipFromLocation == input.ShipFromLocation ||
                    (this.ShipFromLocation != null &&
                    this.ShipFromLocation.Equals(input.ShipFromLocation))
                ) && 
                (
                    this.MailToAddressVerified == input.MailToAddressVerified ||
                    this.MailToAddressVerified.Equals(input.MailToAddressVerified)
                ) && 
                (
                    this.TicketBatch == input.TicketBatch ||
                    this.TicketBatch.Equals(input.TicketBatch)
                ) && 
                (
                    this.TicketBatchAgent == input.TicketBatchAgent ||
                    (this.TicketBatchAgent != null &&
                    this.TicketBatchAgent.Equals(input.TicketBatchAgent))
                ) && 
                (
                    this.InvoiceType == input.InvoiceType ||
                    this.InvoiceType.Equals(input.InvoiceType)
                ) && 
                (
                    this.ReturnOrderNumber == input.ReturnOrderNumber ||
                    this.ReturnOrderNumber.Equals(input.ReturnOrderNumber)
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.InventoryMoved == input.InventoryMoved ||
                    this.InventoryMoved.Equals(input.InventoryMoved)
                ) && 
                (
                    this.Invalid == input.Invalid ||
                    this.Invalid.Equals(input.Invalid)
                ) && 
                (
                    this.MailOrder == input.MailOrder ||
                    this.MailOrder.Equals(input.MailOrder)
                ) && 
                (
                    this.DeliverStatus == input.DeliverStatus ||
                    (this.DeliverStatus != null &&
                    this.DeliverStatus.Equals(input.DeliverStatus))
                ) && 
                (
                    this.DeliverUserId == input.DeliverUserId ||
                    (this.DeliverUserId != null &&
                    this.DeliverUserId.Equals(input.DeliverUserId))
                ) && 
                (
                    this.DeliverDateTime == input.DeliverDateTime ||
                    (this.DeliverDateTime != null &&
                    this.DeliverDateTime.Equals(input.DeliverDateTime))
                ) && 
                (
                    this.IntlGroup == input.IntlGroup ||
                    this.IntlGroup.Equals(input.IntlGroup)
                ) && 
                (
                    this.IntlCountryCode == input.IntlCountryCode ||
                    (this.IntlCountryCode != null &&
                    this.IntlCountryCode.Equals(input.IntlCountryCode))
                ) && 
                (
                    this.SalesConfCode == input.SalesConfCode ||
                    (this.SalesConfCode != null &&
                    this.SalesConfCode.Equals(input.SalesConfCode))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.AuthUserPhoneNumber == input.AuthUserPhoneNumber ||
                    (this.AuthUserPhoneNumber != null &&
                    this.AuthUserPhoneNumber.Equals(input.AuthUserPhoneNumber))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.OrderToken == input.OrderToken ||
                    (this.OrderToken != null &&
                    this.OrderToken.Equals(input.OrderToken))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.OrderItems == input.OrderItems ||
                    this.OrderItems != null &&
                    input.OrderItems != null &&
                    this.OrderItems.SequenceEqual(input.OrderItems)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.WatchLists == input.WatchLists ||
                    this.WatchLists != null &&
                    input.WatchLists != null &&
                    this.WatchLists.SequenceEqual(input.WatchLists)
                ) && 
                (
                    this.Invoices == input.Invoices ||
                    this.Invoices != null &&
                    input.Invoices != null &&
                    this.Invoices.SequenceEqual(input.Invoices)
                ) && 
                (
                    this.GroupInfo == input.GroupInfo ||
                    this.GroupInfo != null &&
                    input.GroupInfo != null &&
                    this.GroupInfo.SequenceEqual(input.GroupInfo)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.Special == input.Special ||
                    (this.Special != null &&
                    this.Special.Equals(input.Special))
                ) && 
                (
                    this.ChangeExistingDiscounts == input.ChangeExistingDiscounts ||
                    this.ChangeExistingDiscounts.Equals(input.ChangeExistingDiscounts)
                ) && 
                (
                    this.SendToAccpac == input.SendToAccpac ||
                    this.SendToAccpac.Equals(input.SendToAccpac)
                ) && 
                (
                    this.SessionPaidAmount == input.SessionPaidAmount ||
                    this.SessionPaidAmount.Equals(input.SessionPaidAmount)
                ) && 
                (
                    this.SessionRefundAmount == input.SessionRefundAmount ||
                    this.SessionRefundAmount.Equals(input.SessionRefundAmount)
                ) && 
                (
                    this.AmountPaidWhenOrderLoaded == input.AmountPaidWhenOrderLoaded ||
                    this.AmountPaidWhenOrderLoaded.Equals(input.AmountPaidWhenOrderLoaded)
                ) && 
                (
                    this.EditMode == input.EditMode ||
                    this.EditMode.Equals(input.EditMode)
                ) && 
                (
                    this.SpecialAutoApplied == input.SpecialAutoApplied ||
                    this.SpecialAutoApplied.Equals(input.SpecialAutoApplied)
                ) && 
                (
                    this.LogChanges == input.LogChanges ||
                    this.LogChanges.Equals(input.LogChanges)
                ) && 
                (
                    this.SpecialRemoved == input.SpecialRemoved ||
                    this.SpecialRemoved.Equals(input.SpecialRemoved)
                ) && 
                (
                    this.PromoCode == input.PromoCode ||
                    (this.PromoCode != null &&
                    this.PromoCode.Equals(input.PromoCode))
                ) && 
                (
                    this.DiscountAutoApplied == input.DiscountAutoApplied ||
                    this.DiscountAutoApplied.Equals(input.DiscountAutoApplied)
                ) && 
                (
                    this.LogActivity == input.LogActivity ||
                    this.LogActivity.Equals(input.LogActivity)
                ) && 
                (
                    this.Persisted == input.Persisted ||
                    this.Persisted.Equals(input.Persisted)
                ) && 
                (
                    this.AlreadyLoggedActivity == input.AlreadyLoggedActivity ||
                    this.AlreadyLoggedActivity.Equals(input.AlreadyLoggedActivity)
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    this.Cancelled.Equals(input.Cancelled)
                ) && 
                (
                    this.LastOccurringShowTourItem == input.LastOccurringShowTourItem ||
                    (this.LastOccurringShowTourItem != null &&
                    this.LastOccurringShowTourItem.Equals(input.LastOccurringShowTourItem))
                ) && 
                (
                    this.TotalTransactionCharge == input.TotalTransactionCharge ||
                    this.TotalTransactionCharge.Equals(input.TotalTransactionCharge)
                ) && 
                (
                    this.TotalCustomerDiscount == input.TotalCustomerDiscount ||
                    this.TotalCustomerDiscount.Equals(input.TotalCustomerDiscount)
                ) && 
                (
                    this.HighCountByOrderItem == input.HighCountByOrderItem ||
                    this.HighCountByOrderItem.Equals(input.HighCountByOrderItem)
                ) && 
                (
                    this.New == input.New ||
                    this.New.Equals(input.New)
                ) && 
                (
                    this.FirstOccurringShowTourItem == input.FirstOccurringShowTourItem ||
                    (this.FirstOccurringShowTourItem != null &&
                    this.FirstOccurringShowTourItem.Equals(input.FirstOccurringShowTourItem))
                ) && 
                (
                    this.ActiveOrderItemList == input.ActiveOrderItemList ||
                    this.ActiveOrderItemList != null &&
                    input.ActiveOrderItemList != null &&
                    this.ActiveOrderItemList.SequenceEqual(input.ActiveOrderItemList)
                ) && 
                (
                    this.SeatsUnderAssigned == input.SeatsUnderAssigned ||
                    this.SeatsUnderAssigned.Equals(input.SeatsUnderAssigned)
                ) && 
                (
                    this.MaxItemNumber == input.MaxItemNumber ||
                    this.MaxItemNumber.Equals(input.MaxItemNumber)
                ) && 
                (
                    this.PaymentPast == input.PaymentPast ||
                    this.PaymentPast.Equals(input.PaymentPast)
                ) && 
                (
                    this.TicketsMailed == input.TicketsMailed ||
                    this.TicketsMailed.Equals(input.TicketsMailed)
                ) && 
                (
                    this.LatestEventOrderItem == input.LatestEventOrderItem ||
                    (this.LatestEventOrderItem != null &&
                    this.LatestEventOrderItem.Equals(input.LatestEventOrderItem))
                ) && 
                (
                    this.EarliestEventDate == input.EarliestEventDate ||
                    (this.EarliestEventDate != null &&
                    this.EarliestEventDate.Equals(input.EarliestEventDate))
                ) && 
                (
                    this.FirstShowDate == input.FirstShowDate ||
                    (this.FirstShowDate != null &&
                    this.FirstShowDate.Equals(input.FirstShowDate))
                ) && 
                (
                    this.CancelledShowTourItemList == input.CancelledShowTourItemList ||
                    this.CancelledShowTourItemList != null &&
                    input.CancelledShowTourItemList != null &&
                    this.CancelledShowTourItemList.SequenceEqual(input.CancelledShowTourItemList)
                ) && 
                (
                    this.GroupCount == input.GroupCount ||
                    this.GroupCount.Equals(input.GroupCount)
                ) && 
                (
                    this.CalculatedPricingLevel == input.CalculatedPricingLevel ||
                    this.CalculatedPricingLevel.Equals(input.CalculatedPricingLevel)
                ) && 
                (
                    this.DueAmount == input.DueAmount ||
                    this.DueAmount.Equals(input.DueAmount)
                ) && 
                (
                    this.TotalFee == input.TotalFee ||
                    this.TotalFee.Equals(input.TotalFee)
                ) && 
                (
                    this.InvoiceCompany == input.InvoiceCompany ||
                    this.InvoiceCompany.Equals(input.InvoiceCompany)
                ) && 
                (
                    this.ActiveShowTourItem == input.ActiveShowTourItem ||
                    this.ActiveShowTourItem != null &&
                    input.ActiveShowTourItem != null &&
                    this.ActiveShowTourItem.SequenceEqual(input.ActiveShowTourItem)
                ) && 
                (
                    this.CompanyCode == input.CompanyCode ||
                    (this.CompanyCode != null &&
                    this.CompanyCode.Equals(input.CompanyCode))
                ) && 
                (
                    this.FirstOccurringShowItem == input.FirstOccurringShowItem ||
                    (this.FirstOccurringShowItem != null &&
                    this.FirstOccurringShowItem.Equals(input.FirstOccurringShowItem))
                ) && 
                (
                    this.FirstOccurringTourItem == input.FirstOccurringTourItem ||
                    (this.FirstOccurringTourItem != null &&
                    this.FirstOccurringTourItem.Equals(input.FirstOccurringTourItem))
                ) && 
                (
                    this.ActiveWithOrder == input.ActiveWithOrder ||
                    this.ActiveWithOrder != null &&
                    input.ActiveWithOrder != null &&
                    this.ActiveWithOrder.SequenceEqual(input.ActiveWithOrder)
                ) && 
                (
                    this.PostPayPricingLevel == input.PostPayPricingLevel ||
                    this.PostPayPricingLevel.Equals(input.PostPayPricingLevel)
                ) && 
                (
                    this.AllItemsTotalPrice == input.AllItemsTotalPrice ||
                    this.AllItemsTotalPrice.Equals(input.AllItemsTotalPrice)
                ) && 
                (
                    this.TotalTax == input.TotalTax ||
                    this.TotalTax.Equals(input.TotalTax)
                ) && 
                (
                    this.TotalGratuity == input.TotalGratuity ||
                    this.TotalGratuity.Equals(input.TotalGratuity)
                ) && 
                (
                    this.TotalPaidAmount == input.TotalPaidAmount ||
                    this.TotalPaidAmount.Equals(input.TotalPaidAmount)
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    this.TotalDiscount.Equals(input.TotalDiscount)
                ) && 
                (
                    this.ReadyForPrinting == input.ReadyForPrinting ||
                    this.ReadyForPrinting.Equals(input.ReadyForPrinting)
                ) && 
                (
                    this.Group == input.Group ||
                    this.Group.Equals(input.Group)
                ) && 
                (
                    this.ActiveShowItems == input.ActiveShowItems ||
                    this.ActiveShowItems != null &&
                    input.ActiveShowItems != null &&
                    this.ActiveShowItems.SequenceEqual(input.ActiveShowItems)
                ) && 
                (
                    this.MailToName == input.MailToName ||
                    (this.MailToName != null &&
                    this.MailToName.Equals(input.MailToName))
                ) && 
                (
                    this.ShipMethod == input.ShipMethod ||
                    (this.ShipMethod != null &&
                    this.ShipMethod.Equals(input.ShipMethod))
                ) && 
                (
                    this.FirstOccurringShowItemWithValidCount == input.FirstOccurringShowItemWithValidCount ||
                    (this.FirstOccurringShowItemWithValidCount != null &&
                    this.FirstOccurringShowItemWithValidCount.Equals(input.FirstOccurringShowItemWithValidCount))
                ) && 
                (
                    this.ShowsDaysSpan == input.ShowsDaysSpan ||
                    this.ShowsDaysSpan.Equals(input.ShowsDaysSpan)
                ) && 
                (
                    this.AllSeatAssigned == input.AllSeatAssigned ||
                    this.AllSeatAssigned.Equals(input.AllSeatAssigned)
                ) && 
                (
                    this.SeatsOverAssigned == input.SeatsOverAssigned ||
                    this.SeatsOverAssigned.Equals(input.SeatsOverAssigned)
                ) && 
                (
                    this.ActiveShowTourItemCount == input.ActiveShowTourItemCount ||
                    this.ActiveShowTourItemCount.Equals(input.ActiveShowTourItemCount)
                ) && 
                (
                    this.FinalPaymentDueDays == input.FinalPaymentDueDays ||
                    this.FinalPaymentDueDays.Equals(input.FinalPaymentDueDays)
                ) && 
                (
                    this.LastShowDate == input.LastShowDate ||
                    (this.LastShowDate != null &&
                    this.LastShowDate.Equals(input.LastShowDate))
                ) && 
                (
                    this.AllShowTourItem == input.AllShowTourItem ||
                    this.AllShowTourItem != null &&
                    input.AllShowTourItem != null &&
                    this.AllShowTourItem.SequenceEqual(input.AllShowTourItem)
                ) && 
                (
                    this.AllPartnerEventsConfirmed == input.AllPartnerEventsConfirmed ||
                    this.AllPartnerEventsConfirmed.Equals(input.AllPartnerEventsConfirmed)
                ) && 
                (
                    this.GrandTotalSaving == input.GrandTotalSaving ||
                    this.GrandTotalSaving.Equals(input.GrandTotalSaving)
                ) && 
                (
                    this.AutoApplyDiscounts == input.AutoApplyDiscounts ||
                    this.AutoApplyDiscounts.Equals(input.AutoApplyDiscounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.MailToAddress != null)
                {
                    hashCode = (hashCode * 59) + this.MailToAddress.GetHashCode();
                }
                if (this.SpecialCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialCode.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                if (this.FinalPaymentDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinalPaymentDueDate.GetHashCode();
                }
                if (this.CancelUserId != null)
                {
                    hashCode = (hashCode * 59) + this.CancelUserId.GetHashCode();
                }
                if (this.CancelDate != null)
                {
                    hashCode = (hashCode * 59) + this.CancelDate.GetHashCode();
                }
                if (this.ContractReceivedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ContractReceivedDate.GetHashCode();
                }
                if (this.AddLocationCode != null)
                {
                    hashCode = (hashCode * 59) + this.AddLocationCode.GetHashCode();
                }
                if (this.CancelLocationCode != null)
                {
                    hashCode = (hashCode * 59) + this.CancelLocationCode.GetHashCode();
                }
                if (this.SourceCode != null)
                {
                    hashCode = (hashCode * 59) + this.SourceCode.GetHashCode();
                }
                if (this.FinalPaymentExtDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinalPaymentExtDueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderTotalPrice.GetHashCode();
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.EditUserId != null)
                {
                    hashCode = (hashCode * 59) + this.EditUserId.GetHashCode();
                }
                if (this.EditDate != null)
                {
                    hashCode = (hashCode * 59) + this.EditDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderOrigin.GetHashCode();
                if (this.PrintUserId != null)
                {
                    hashCode = (hashCode * 59) + this.PrintUserId.GetHashCode();
                }
                if (this.SourceCodeComments != null)
                {
                    hashCode = (hashCode * 59) + this.SourceCodeComments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DepositDueAmount.GetHashCode();
                if (this.ContactFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactFirstName.GetHashCode();
                }
                if (this.ContactLastName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactLastName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RpCustNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.MailToSameAsCustomer.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassAutoSpecial.GetHashCode();
                if (this.OrderTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.OrderTypeCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WaiveDepositDue.GetHashCode();
                hashCode = (hashCode * 59) + this.PricingLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.TierYear.GetHashCode();
                if (this.DepositDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DepositDueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TheaterLocationCode.GetHashCode();
                hashCode = (hashCode * 59) + this.DepositAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.CancelReminderSent.GetHashCode();
                hashCode = (hashCode * 59) + this.EmailTicketsProcessed.GetHashCode();
                if (this.PresentedByName != null)
                {
                    hashCode = (hashCode * 59) + this.PresentedByName.GetHashCode();
                }
                if (this.MailToOrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.MailToOrganizationName.GetHashCode();
                }
                if (this.MailToPhone != null)
                {
                    hashCode = (hashCode * 59) + this.MailToPhone.GetHashCode();
                }
                if (this.AuthorizedUsers != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedUsers.GetHashCode();
                }
                if (this.ResReqEncText != null)
                {
                    hashCode = (hashCode * 59) + this.ResReqEncText.GetHashCode();
                }
                if (this.SalesRepId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesRepId.GetHashCode();
                }
                if (this.LockShippingDate != null)
                {
                    hashCode = (hashCode * 59) + this.LockShippingDate.GetHashCode();
                }
                if (this.LockRefundDate != null)
                {
                    hashCode = (hashCode * 59) + this.LockRefundDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FinalSale.GetHashCode();
                if (this.HeldName != null)
                {
                    hashCode = (hashCode * 59) + this.HeldName.GetHashCode();
                }
                if (this.RefNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaxExempt.GetHashCode();
                hashCode = (hashCode * 59) + this.Recalculate.GetHashCode();
                hashCode = (hashCode * 59) + this.SlidingScaleDiscount.GetHashCode();
                if (this.ShipDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShipDate.GetHashCode();
                }
                if (this.TrackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                }
                if (this.ShipFromLocation != null)
                {
                    hashCode = (hashCode * 59) + this.ShipFromLocation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MailToAddressVerified.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketBatch.GetHashCode();
                if (this.TicketBatchAgent != null)
                {
                    hashCode = (hashCode * 59) + this.TicketBatchAgent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceType.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnOrderNumber.GetHashCode();
                if (this.ContactPhone != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPhone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InventoryMoved.GetHashCode();
                hashCode = (hashCode * 59) + this.Invalid.GetHashCode();
                hashCode = (hashCode * 59) + this.MailOrder.GetHashCode();
                if (this.DeliverStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DeliverStatus.GetHashCode();
                }
                if (this.DeliverUserId != null)
                {
                    hashCode = (hashCode * 59) + this.DeliverUserId.GetHashCode();
                }
                if (this.DeliverDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DeliverDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IntlGroup.GetHashCode();
                if (this.IntlCountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.IntlCountryCode.GetHashCode();
                }
                if (this.SalesConfCode != null)
                {
                    hashCode = (hashCode * 59) + this.SalesConfCode.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.AuthUserPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AuthUserPhoneNumber.GetHashCode();
                }
                if (this.CompletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDate.GetHashCode();
                }
                if (this.OrderToken != null)
                {
                    hashCode = (hashCode * 59) + this.OrderToken.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.OrderItems != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItems.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                if (this.WatchLists != null)
                {
                    hashCode = (hashCode * 59) + this.WatchLists.GetHashCode();
                }
                if (this.Invoices != null)
                {
                    hashCode = (hashCode * 59) + this.Invoices.GetHashCode();
                }
                if (this.GroupInfo != null)
                {
                    hashCode = (hashCode * 59) + this.GroupInfo.GetHashCode();
                }
                if (this.Payments != null)
                {
                    hashCode = (hashCode * 59) + this.Payments.GetHashCode();
                }
                if (this.Special != null)
                {
                    hashCode = (hashCode * 59) + this.Special.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangeExistingDiscounts.GetHashCode();
                hashCode = (hashCode * 59) + this.SendToAccpac.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionPaidAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionRefundAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountPaidWhenOrderLoaded.GetHashCode();
                hashCode = (hashCode * 59) + this.EditMode.GetHashCode();
                hashCode = (hashCode * 59) + this.SpecialAutoApplied.GetHashCode();
                hashCode = (hashCode * 59) + this.LogChanges.GetHashCode();
                hashCode = (hashCode * 59) + this.SpecialRemoved.GetHashCode();
                if (this.PromoCode != null)
                {
                    hashCode = (hashCode * 59) + this.PromoCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DiscountAutoApplied.GetHashCode();
                hashCode = (hashCode * 59) + this.LogActivity.GetHashCode();
                hashCode = (hashCode * 59) + this.Persisted.GetHashCode();
                hashCode = (hashCode * 59) + this.AlreadyLoggedActivity.GetHashCode();
                hashCode = (hashCode * 59) + this.Cancelled.GetHashCode();
                if (this.LastOccurringShowTourItem != null)
                {
                    hashCode = (hashCode * 59) + this.LastOccurringShowTourItem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalTransactionCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCustomerDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.HighCountByOrderItem.GetHashCode();
                hashCode = (hashCode * 59) + this.New.GetHashCode();
                if (this.FirstOccurringShowTourItem != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOccurringShowTourItem.GetHashCode();
                }
                if (this.ActiveOrderItemList != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveOrderItemList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatsUnderAssigned.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxItemNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentPast.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketsMailed.GetHashCode();
                if (this.LatestEventOrderItem != null)
                {
                    hashCode = (hashCode * 59) + this.LatestEventOrderItem.GetHashCode();
                }
                if (this.EarliestEventDate != null)
                {
                    hashCode = (hashCode * 59) + this.EarliestEventDate.GetHashCode();
                }
                if (this.FirstShowDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstShowDate.GetHashCode();
                }
                if (this.CancelledShowTourItemList != null)
                {
                    hashCode = (hashCode * 59) + this.CancelledShowTourItemList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupCount.GetHashCode();
                hashCode = (hashCode * 59) + this.CalculatedPricingLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.DueAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalFee.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceCompany.GetHashCode();
                if (this.ActiveShowTourItem != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveShowTourItem.GetHashCode();
                }
                if (this.CompanyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyCode.GetHashCode();
                }
                if (this.FirstOccurringShowItem != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOccurringShowItem.GetHashCode();
                }
                if (this.FirstOccurringTourItem != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOccurringTourItem.GetHashCode();
                }
                if (this.ActiveWithOrder != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveWithOrder.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PostPayPricingLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.AllItemsTotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalTax.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalGratuity.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPaidAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadyForPrinting.GetHashCode();
                hashCode = (hashCode * 59) + this.Group.GetHashCode();
                if (this.ActiveShowItems != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveShowItems.GetHashCode();
                }
                if (this.MailToName != null)
                {
                    hashCode = (hashCode * 59) + this.MailToName.GetHashCode();
                }
                if (this.ShipMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShipMethod.GetHashCode();
                }
                if (this.FirstOccurringShowItemWithValidCount != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOccurringShowItemWithValidCount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowsDaysSpan.GetHashCode();
                hashCode = (hashCode * 59) + this.AllSeatAssigned.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatsOverAssigned.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveShowTourItemCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FinalPaymentDueDays.GetHashCode();
                if (this.LastShowDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastShowDate.GetHashCode();
                }
                if (this.AllShowTourItem != null)
                {
                    hashCode = (hashCode * 59) + this.AllShowTourItem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllPartnerEventsConfirmed.GetHashCode();
                hashCode = (hashCode * 59) + this.GrandTotalSaving.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoApplyDiscounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // GroupName (string) maxLength
            if (this.GroupName != null && this.GroupName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupName, length must be less than 50.", new [] { "GroupName" });
            }

            // GroupName (string) minLength
            if (this.GroupName != null && this.GroupName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupName, length must be greater than 0.", new [] { "GroupName" });
            }

            // SpecialCode (string) maxLength
            if (this.SpecialCode != null && this.SpecialCode.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be less than 40.", new [] { "SpecialCode" });
            }

            // SpecialCode (string) minLength
            if (this.SpecialCode != null && this.SpecialCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be greater than 0.", new [] { "SpecialCode" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 30.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if (this.FirstName != null && this.FirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 0.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 30.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if (this.LastName != null && this.LastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 0.", new [] { "LastName" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            // CancelUserId (string) maxLength
            if (this.CancelUserId != null && this.CancelUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelUserId, length must be less than 50.", new [] { "CancelUserId" });
            }

            // CancelUserId (string) minLength
            if (this.CancelUserId != null && this.CancelUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelUserId, length must be greater than 0.", new [] { "CancelUserId" });
            }

            // AddLocationCode (string) maxLength
            if (this.AddLocationCode != null && this.AddLocationCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddLocationCode, length must be less than 20.", new [] { "AddLocationCode" });
            }

            // AddLocationCode (string) minLength
            if (this.AddLocationCode != null && this.AddLocationCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddLocationCode, length must be greater than 0.", new [] { "AddLocationCode" });
            }

            // CancelLocationCode (string) maxLength
            if (this.CancelLocationCode != null && this.CancelLocationCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelLocationCode, length must be less than 20.", new [] { "CancelLocationCode" });
            }

            // CancelLocationCode (string) minLength
            if (this.CancelLocationCode != null && this.CancelLocationCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CancelLocationCode, length must be greater than 0.", new [] { "CancelLocationCode" });
            }

            // SourceCode (string) maxLength
            if (this.SourceCode != null && this.SourceCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be less than 20.", new [] { "SourceCode" });
            }

            // SourceCode (string) minLength
            if (this.SourceCode != null && this.SourceCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be greater than 0.", new [] { "SourceCode" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 50.", new [] { "CompanyName" });
            }

            // CompanyName (string) minLength
            if (this.CompanyName != null && this.CompanyName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be greater than 0.", new [] { "CompanyName" });
            }

            // EditUserId (string) maxLength
            if (this.EditUserId != null && this.EditUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EditUserId, length must be less than 50.", new [] { "EditUserId" });
            }

            // EditUserId (string) minLength
            if (this.EditUserId != null && this.EditUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EditUserId, length must be greater than 0.", new [] { "EditUserId" });
            }

            // PrintUserId (string) maxLength
            if (this.PrintUserId != null && this.PrintUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrintUserId, length must be less than 50.", new [] { "PrintUserId" });
            }

            // PrintUserId (string) minLength
            if (this.PrintUserId != null && this.PrintUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrintUserId, length must be greater than 0.", new [] { "PrintUserId" });
            }

            // SourceCodeComments (string) maxLength
            if (this.SourceCodeComments != null && this.SourceCodeComments.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCodeComments, length must be less than 50.", new [] { "SourceCodeComments" });
            }

            // SourceCodeComments (string) minLength
            if (this.SourceCodeComments != null && this.SourceCodeComments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCodeComments, length must be greater than 0.", new [] { "SourceCodeComments" });
            }

            // ContactFirstName (string) maxLength
            if (this.ContactFirstName != null && this.ContactFirstName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactFirstName, length must be less than 50.", new [] { "ContactFirstName" });
            }

            // ContactFirstName (string) minLength
            if (this.ContactFirstName != null && this.ContactFirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactFirstName, length must be greater than 0.", new [] { "ContactFirstName" });
            }

            // ContactLastName (string) maxLength
            if (this.ContactLastName != null && this.ContactLastName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactLastName, length must be less than 50.", new [] { "ContactLastName" });
            }

            // ContactLastName (string) minLength
            if (this.ContactLastName != null && this.ContactLastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactLastName, length must be greater than 0.", new [] { "ContactLastName" });
            }

            // OrderTypeCode (string) maxLength
            if (this.OrderTypeCode != null && this.OrderTypeCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderTypeCode, length must be less than 20.", new [] { "OrderTypeCode" });
            }

            // OrderTypeCode (string) minLength
            if (this.OrderTypeCode != null && this.OrderTypeCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderTypeCode, length must be greater than 0.", new [] { "OrderTypeCode" });
            }

            // PresentedByName (string) maxLength
            if (this.PresentedByName != null && this.PresentedByName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PresentedByName, length must be less than 50.", new [] { "PresentedByName" });
            }

            // PresentedByName (string) minLength
            if (this.PresentedByName != null && this.PresentedByName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PresentedByName, length must be greater than 0.", new [] { "PresentedByName" });
            }

            // MailToOrganizationName (string) maxLength
            if (this.MailToOrganizationName != null && this.MailToOrganizationName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailToOrganizationName, length must be less than 50.", new [] { "MailToOrganizationName" });
            }

            // MailToOrganizationName (string) minLength
            if (this.MailToOrganizationName != null && this.MailToOrganizationName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailToOrganizationName, length must be greater than 0.", new [] { "MailToOrganizationName" });
            }

            // MailToPhone (string) maxLength
            if (this.MailToPhone != null && this.MailToPhone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailToPhone, length must be less than 20.", new [] { "MailToPhone" });
            }

            // MailToPhone (string) minLength
            if (this.MailToPhone != null && this.MailToPhone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailToPhone, length must be greater than 0.", new [] { "MailToPhone" });
            }

            // AuthorizedUsers (string) maxLength
            if (this.AuthorizedUsers != null && this.AuthorizedUsers.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthorizedUsers, length must be less than 200.", new [] { "AuthorizedUsers" });
            }

            // AuthorizedUsers (string) minLength
            if (this.AuthorizedUsers != null && this.AuthorizedUsers.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthorizedUsers, length must be greater than 0.", new [] { "AuthorizedUsers" });
            }

            // ResReqEncText (string) maxLength
            if (this.ResReqEncText != null && this.ResReqEncText.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResReqEncText, length must be less than 200.", new [] { "ResReqEncText" });
            }

            // ResReqEncText (string) minLength
            if (this.ResReqEncText != null && this.ResReqEncText.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResReqEncText, length must be greater than 0.", new [] { "ResReqEncText" });
            }

            // SalesRepId (string) maxLength
            if (this.SalesRepId != null && this.SalesRepId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesRepId, length must be less than 50.", new [] { "SalesRepId" });
            }

            // SalesRepId (string) minLength
            if (this.SalesRepId != null && this.SalesRepId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesRepId, length must be greater than 0.", new [] { "SalesRepId" });
            }

            // HeldName (string) maxLength
            if (this.HeldName != null && this.HeldName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeldName, length must be less than 50.", new [] { "HeldName" });
            }

            // HeldName (string) minLength
            if (this.HeldName != null && this.HeldName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeldName, length must be greater than 0.", new [] { "HeldName" });
            }

            // RefNumber (string) maxLength
            if (this.RefNumber != null && this.RefNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefNumber, length must be less than 50.", new [] { "RefNumber" });
            }

            // RefNumber (string) minLength
            if (this.RefNumber != null && this.RefNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefNumber, length must be greater than 0.", new [] { "RefNumber" });
            }

            // TrackingNumber (string) maxLength
            if (this.TrackingNumber != null && this.TrackingNumber.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackingNumber, length must be less than 50.", new [] { "TrackingNumber" });
            }

            // TrackingNumber (string) minLength
            if (this.TrackingNumber != null && this.TrackingNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackingNumber, length must be greater than 0.", new [] { "TrackingNumber" });
            }

            // ShipFromLocation (string) maxLength
            if (this.ShipFromLocation != null && this.ShipFromLocation.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipFromLocation, length must be less than 50.", new [] { "ShipFromLocation" });
            }

            // ShipFromLocation (string) minLength
            if (this.ShipFromLocation != null && this.ShipFromLocation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipFromLocation, length must be greater than 0.", new [] { "ShipFromLocation" });
            }

            // TicketBatchAgent (string) maxLength
            if (this.TicketBatchAgent != null && this.TicketBatchAgent.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TicketBatchAgent, length must be less than 50.", new [] { "TicketBatchAgent" });
            }

            // TicketBatchAgent (string) minLength
            if (this.TicketBatchAgent != null && this.TicketBatchAgent.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TicketBatchAgent, length must be greater than 0.", new [] { "TicketBatchAgent" });
            }

            // ContactPhone (string) maxLength
            if (this.ContactPhone != null && this.ContactPhone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhone, length must be less than 20.", new [] { "ContactPhone" });
            }

            // ContactPhone (string) minLength
            if (this.ContactPhone != null && this.ContactPhone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhone, length must be greater than 0.", new [] { "ContactPhone" });
            }

            // DeliverStatus (string) maxLength
            if (this.DeliverStatus != null && this.DeliverStatus.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliverStatus, length must be less than 10.", new [] { "DeliverStatus" });
            }

            // DeliverStatus (string) minLength
            if (this.DeliverStatus != null && this.DeliverStatus.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliverStatus, length must be greater than 0.", new [] { "DeliverStatus" });
            }

            // DeliverUserId (string) maxLength
            if (this.DeliverUserId != null && this.DeliverUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliverUserId, length must be less than 50.", new [] { "DeliverUserId" });
            }

            // DeliverUserId (string) minLength
            if (this.DeliverUserId != null && this.DeliverUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliverUserId, length must be greater than 0.", new [] { "DeliverUserId" });
            }

            // IntlCountryCode (string) maxLength
            if (this.IntlCountryCode != null && this.IntlCountryCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IntlCountryCode, length must be less than 3.", new [] { "IntlCountryCode" });
            }

            // IntlCountryCode (string) minLength
            if (this.IntlCountryCode != null && this.IntlCountryCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IntlCountryCode, length must be greater than 0.", new [] { "IntlCountryCode" });
            }

            // SalesConfCode (string) maxLength
            if (this.SalesConfCode != null && this.SalesConfCode.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesConfCode, length must be less than 50.", new [] { "SalesConfCode" });
            }

            // SalesConfCode (string) minLength
            if (this.SalesConfCode != null && this.SalesConfCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesConfCode, length must be greater than 0.", new [] { "SalesConfCode" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 50.", new [] { "Email" });
            }

            // Email (string) minLength
            if (this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            // AuthUserPhoneNumber (string) maxLength
            if (this.AuthUserPhoneNumber != null && this.AuthUserPhoneNumber.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthUserPhoneNumber, length must be less than 30.", new [] { "AuthUserPhoneNumber" });
            }

            // AuthUserPhoneNumber (string) minLength
            if (this.AuthUserPhoneNumber != null && this.AuthUserPhoneNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthUserPhoneNumber, length must be greater than 0.", new [] { "AuthUserPhoneNumber" });
            }

            yield break;
        }
    }

}
