/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// InvoiceDetail
    /// </summary>
    [DataContract(Name = "InvoiceDetail")]
    public partial class InvoiceDetail : IEquatable<InvoiceDetail>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", IsRequired = true, EmitDefaultValue = false)]
        public InvoiceCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets GltCompany
        /// </summary>
        [DataMember(Name = "gltCompany", EmitDefaultValue = false)]
        public InvoiceCompany? GltCompany { get; set; }

        /// <summary>
        /// Gets or Sets VoidStatus
        /// </summary>
        [DataMember(Name = "voidStatus", EmitDefaultValue = false)]
        public InvoiceStatus? VoidStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetail" /> class.
        /// </summary>
        /// <param name="invoiceNumber">invoiceNumber (required).</param>
        /// <param name="invoiceSeqNumber">invoiceSeqNumber (required).</param>
        /// <param name="company">company (required).</param>
        /// <param name="description">description.</param>
        /// <param name="skuCode">skuCode.</param>
        /// <param name="glPeriod">glPeriod.</param>
        /// <param name="units">units.</param>
        /// <param name="rate">rate.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="crSegment1">crSegment1.</param>
        /// <param name="crSegment2">crSegment2.</param>
        /// <param name="crSegment3">crSegment3.</param>
        /// <param name="crSegment4">crSegment4.</param>
        /// <param name="crSegment5">crSegment5.</param>
        /// <param name="gltCompany">gltCompany.</param>
        /// <param name="gltNumber">gltNumber.</param>
        /// <param name="baseAmount">baseAmount.</param>
        /// <param name="comments">comments.</param>
        /// <param name="locationCD">locationCD.</param>
        /// <param name="lineType">lineType.</param>
        /// <param name="inventoryCost">inventoryCost.</param>
        /// <param name="averageCost">averageCost.</param>
        /// <param name="voidStatus">voidStatus.</param>
        /// <param name="eventDate">eventDate.</param>
        /// <param name="processDate">processDate.</param>
        /// <param name="itemNumber">itemNumber.</param>
        /// <param name="modifyDate">modifyDate.</param>
        /// <param name="invoice">invoice.</param>
        public InvoiceDetail(long invoiceNumber = default(long), int invoiceSeqNumber = default(int), InvoiceCompany company = default(InvoiceCompany), string description = default(string), string skuCode = default(string), int glPeriod = default(int), int units = default(int), decimal rate = default(decimal), decimal totalCost = default(decimal), string crSegment1 = default(string), string crSegment2 = default(string), string crSegment3 = default(string), string crSegment4 = default(string), string crSegment5 = default(string), InvoiceCompany? gltCompany = default(InvoiceCompany?), int gltNumber = default(int), decimal baseAmount = default(decimal), string comments = default(string), string locationCD = default(string), string lineType = default(string), decimal inventoryCost = default(decimal), decimal averageCost = default(decimal), InvoiceStatus? voidStatus = default(InvoiceStatus?), DateTime eventDate = default(DateTime), DateTime processDate = default(DateTime), int itemNumber = default(int), DateTime modifyDate = default(DateTime), Invoice invoice = default(Invoice))
        {
            this.InvoiceNumber = invoiceNumber;
            this.InvoiceSeqNumber = invoiceSeqNumber;
            this.Company = company;
            this.Description = description;
            this.SkuCode = skuCode;
            this.GlPeriod = glPeriod;
            this.Units = units;
            this.Rate = rate;
            this.TotalCost = totalCost;
            this.CrSegment1 = crSegment1;
            this.CrSegment2 = crSegment2;
            this.CrSegment3 = crSegment3;
            this.CrSegment4 = crSegment4;
            this.CrSegment5 = crSegment5;
            this.GltCompany = gltCompany;
            this.GltNumber = gltNumber;
            this.BaseAmount = baseAmount;
            this.Comments = comments;
            this.LocationCD = locationCD;
            this.LineType = lineType;
            this.InventoryCost = inventoryCost;
            this.AverageCost = averageCost;
            this.VoidStatus = voidStatus;
            this.EventDate = eventDate;
            this.ProcessDate = processDate;
            this.ItemNumber = itemNumber;
            this.ModifyDate = modifyDate;
            this.Invoice = invoice;
        }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name = "invoiceNumber", IsRequired = true, EmitDefaultValue = false)]
        public long InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceSeqNumber
        /// </summary>
        [DataMember(Name = "invoiceSeqNumber", IsRequired = true, EmitDefaultValue = false)]
        public int InvoiceSeqNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SkuCode
        /// </summary>
        [DataMember(Name = "skuCode", EmitDefaultValue = false)]
        public string SkuCode { get; set; }

        /// <summary>
        /// Gets or Sets GlPeriod
        /// </summary>
        [DataMember(Name = "glPeriod", EmitDefaultValue = false)]
        public int GlPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", EmitDefaultValue = false)]
        public int Units { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name = "totalCost", EmitDefaultValue = false)]
        public decimal TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets CrSegment1
        /// </summary>
        [DataMember(Name = "crSegment1", EmitDefaultValue = false)]
        public string CrSegment1 { get; set; }

        /// <summary>
        /// Gets or Sets CrSegment2
        /// </summary>
        [DataMember(Name = "crSegment2", EmitDefaultValue = false)]
        public string CrSegment2 { get; set; }

        /// <summary>
        /// Gets or Sets CrSegment3
        /// </summary>
        [DataMember(Name = "crSegment3", EmitDefaultValue = false)]
        public string CrSegment3 { get; set; }

        /// <summary>
        /// Gets or Sets CrSegment4
        /// </summary>
        [DataMember(Name = "crSegment4", EmitDefaultValue = false)]
        public string CrSegment4 { get; set; }

        /// <summary>
        /// Gets or Sets CrSegment5
        /// </summary>
        [DataMember(Name = "crSegment5", EmitDefaultValue = false)]
        public string CrSegment5 { get; set; }

        /// <summary>
        /// Gets or Sets GltNumber
        /// </summary>
        [DataMember(Name = "gltNumber", EmitDefaultValue = false)]
        public int GltNumber { get; set; }

        /// <summary>
        /// Gets or Sets BaseAmount
        /// </summary>
        [DataMember(Name = "baseAmount", EmitDefaultValue = false)]
        public decimal BaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets LocationCD
        /// </summary>
        [DataMember(Name = "locationCD", EmitDefaultValue = false)]
        public string LocationCD { get; set; }

        /// <summary>
        /// Gets or Sets LineType
        /// </summary>
        [DataMember(Name = "lineType", EmitDefaultValue = false)]
        public string LineType { get; set; }

        /// <summary>
        /// Gets or Sets InventoryCost
        /// </summary>
        [DataMember(Name = "inventoryCost", EmitDefaultValue = false)]
        public decimal InventoryCost { get; set; }

        /// <summary>
        /// Gets or Sets AverageCost
        /// </summary>
        [DataMember(Name = "averageCost", EmitDefaultValue = false)]
        public decimal AverageCost { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name = "eventDate", EmitDefaultValue = false)]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDate
        /// </summary>
        [DataMember(Name = "processDate", EmitDefaultValue = false)]
        public DateTime ProcessDate { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name = "modifyDate", EmitDefaultValue = false)]
        public DateTime ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name = "invoice", EmitDefaultValue = false)]
        public Invoice Invoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetail {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceSeqNumber: ").Append(InvoiceSeqNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SkuCode: ").Append(SkuCode).Append("\n");
            sb.Append("  GlPeriod: ").Append(GlPeriod).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  CrSegment1: ").Append(CrSegment1).Append("\n");
            sb.Append("  CrSegment2: ").Append(CrSegment2).Append("\n");
            sb.Append("  CrSegment3: ").Append(CrSegment3).Append("\n");
            sb.Append("  CrSegment4: ").Append(CrSegment4).Append("\n");
            sb.Append("  CrSegment5: ").Append(CrSegment5).Append("\n");
            sb.Append("  GltCompany: ").Append(GltCompany).Append("\n");
            sb.Append("  GltNumber: ").Append(GltNumber).Append("\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  LocationCD: ").Append(LocationCD).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  InventoryCost: ").Append(InventoryCost).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  VoidStatus: ").Append(VoidStatus).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  ProcessDate: ").Append(ProcessDate).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDetail);
        }

        /// <summary>
        /// Returns true if InvoiceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    this.InvoiceNumber.Equals(input.InvoiceNumber)
                ) && 
                (
                    this.InvoiceSeqNumber == input.InvoiceSeqNumber ||
                    this.InvoiceSeqNumber.Equals(input.InvoiceSeqNumber)
                ) && 
                (
                    this.Company == input.Company ||
                    this.Company.Equals(input.Company)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SkuCode == input.SkuCode ||
                    (this.SkuCode != null &&
                    this.SkuCode.Equals(input.SkuCode))
                ) && 
                (
                    this.GlPeriod == input.GlPeriod ||
                    this.GlPeriod.Equals(input.GlPeriod)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.Rate == input.Rate ||
                    this.Rate.Equals(input.Rate)
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    this.TotalCost.Equals(input.TotalCost)
                ) && 
                (
                    this.CrSegment1 == input.CrSegment1 ||
                    (this.CrSegment1 != null &&
                    this.CrSegment1.Equals(input.CrSegment1))
                ) && 
                (
                    this.CrSegment2 == input.CrSegment2 ||
                    (this.CrSegment2 != null &&
                    this.CrSegment2.Equals(input.CrSegment2))
                ) && 
                (
                    this.CrSegment3 == input.CrSegment3 ||
                    (this.CrSegment3 != null &&
                    this.CrSegment3.Equals(input.CrSegment3))
                ) && 
                (
                    this.CrSegment4 == input.CrSegment4 ||
                    (this.CrSegment4 != null &&
                    this.CrSegment4.Equals(input.CrSegment4))
                ) && 
                (
                    this.CrSegment5 == input.CrSegment5 ||
                    (this.CrSegment5 != null &&
                    this.CrSegment5.Equals(input.CrSegment5))
                ) && 
                (
                    this.GltCompany == input.GltCompany ||
                    this.GltCompany.Equals(input.GltCompany)
                ) && 
                (
                    this.GltNumber == input.GltNumber ||
                    this.GltNumber.Equals(input.GltNumber)
                ) && 
                (
                    this.BaseAmount == input.BaseAmount ||
                    this.BaseAmount.Equals(input.BaseAmount)
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.LocationCD == input.LocationCD ||
                    (this.LocationCD != null &&
                    this.LocationCD.Equals(input.LocationCD))
                ) && 
                (
                    this.LineType == input.LineType ||
                    (this.LineType != null &&
                    this.LineType.Equals(input.LineType))
                ) && 
                (
                    this.InventoryCost == input.InventoryCost ||
                    this.InventoryCost.Equals(input.InventoryCost)
                ) && 
                (
                    this.AverageCost == input.AverageCost ||
                    this.AverageCost.Equals(input.AverageCost)
                ) && 
                (
                    this.VoidStatus == input.VoidStatus ||
                    this.VoidStatus.Equals(input.VoidStatus)
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.ProcessDate == input.ProcessDate ||
                    (this.ProcessDate != null &&
                    this.ProcessDate.Equals(input.ProcessDate))
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.Invoice == input.Invoice ||
                    (this.Invoice != null &&
                    this.Invoice.Equals(input.Invoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InvoiceNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceSeqNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Company.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.SkuCode != null)
                {
                    hashCode = (hashCode * 59) + this.SkuCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GlPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCost.GetHashCode();
                if (this.CrSegment1 != null)
                {
                    hashCode = (hashCode * 59) + this.CrSegment1.GetHashCode();
                }
                if (this.CrSegment2 != null)
                {
                    hashCode = (hashCode * 59) + this.CrSegment2.GetHashCode();
                }
                if (this.CrSegment3 != null)
                {
                    hashCode = (hashCode * 59) + this.CrSegment3.GetHashCode();
                }
                if (this.CrSegment4 != null)
                {
                    hashCode = (hashCode * 59) + this.CrSegment4.GetHashCode();
                }
                if (this.CrSegment5 != null)
                {
                    hashCode = (hashCode * 59) + this.CrSegment5.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GltCompany.GetHashCode();
                hashCode = (hashCode * 59) + this.GltNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.BaseAmount.GetHashCode();
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.LocationCD != null)
                {
                    hashCode = (hashCode * 59) + this.LocationCD.GetHashCode();
                }
                if (this.LineType != null)
                {
                    hashCode = (hashCode * 59) + this.LineType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InventoryCost.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageCost.GetHashCode();
                hashCode = (hashCode * 59) + this.VoidStatus.GetHashCode();
                if (this.EventDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventDate.GetHashCode();
                }
                if (this.ProcessDate != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                if (this.ModifyDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyDate.GetHashCode();
                }
                if (this.Invoice != null)
                {
                    hashCode = (hashCode * 59) + this.Invoice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 250.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // SkuCode (string) maxLength
            if (this.SkuCode != null && this.SkuCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuCode, length must be less than 20.", new [] { "SkuCode" });
            }

            // SkuCode (string) minLength
            if (this.SkuCode != null && this.SkuCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SkuCode, length must be greater than 0.", new [] { "SkuCode" });
            }

            // CrSegment1 (string) maxLength
            if (this.CrSegment1 != null && this.CrSegment1.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment1, length must be less than 9.", new [] { "CrSegment1" });
            }

            // CrSegment1 (string) minLength
            if (this.CrSegment1 != null && this.CrSegment1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment1, length must be greater than 0.", new [] { "CrSegment1" });
            }

            // CrSegment2 (string) maxLength
            if (this.CrSegment2 != null && this.CrSegment2.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment2, length must be less than 9.", new [] { "CrSegment2" });
            }

            // CrSegment2 (string) minLength
            if (this.CrSegment2 != null && this.CrSegment2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment2, length must be greater than 0.", new [] { "CrSegment2" });
            }

            // CrSegment3 (string) maxLength
            if (this.CrSegment3 != null && this.CrSegment3.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment3, length must be less than 9.", new [] { "CrSegment3" });
            }

            // CrSegment3 (string) minLength
            if (this.CrSegment3 != null && this.CrSegment3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment3, length must be greater than 0.", new [] { "CrSegment3" });
            }

            // CrSegment4 (string) maxLength
            if (this.CrSegment4 != null && this.CrSegment4.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment4, length must be less than 9.", new [] { "CrSegment4" });
            }

            // CrSegment4 (string) minLength
            if (this.CrSegment4 != null && this.CrSegment4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment4, length must be greater than 0.", new [] { "CrSegment4" });
            }

            // CrSegment5 (string) maxLength
            if (this.CrSegment5 != null && this.CrSegment5.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment5, length must be less than 9.", new [] { "CrSegment5" });
            }

            // CrSegment5 (string) minLength
            if (this.CrSegment5 != null && this.CrSegment5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrSegment5, length must be greater than 0.", new [] { "CrSegment5" });
            }

            // Comments (string) maxLength
            if (this.Comments != null && this.Comments.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 500.", new [] { "Comments" });
            }

            // Comments (string) minLength
            if (this.Comments != null && this.Comments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be greater than 0.", new [] { "Comments" });
            }

            // LocationCD (string) maxLength
            if (this.LocationCD != null && this.LocationCD.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationCD, length must be less than 6.", new [] { "LocationCD" });
            }

            // LocationCD (string) minLength
            if (this.LocationCD != null && this.LocationCD.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationCD, length must be greater than 0.", new [] { "LocationCD" });
            }

            // LineType (string) maxLength
            if (this.LineType != null && this.LineType.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LineType, length must be less than 1.", new [] { "LineType" });
            }

            // LineType (string) minLength
            if (this.LineType != null && this.LineType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LineType, length must be greater than 0.", new [] { "LineType" });
            }

            yield break;
        }
    }

}
