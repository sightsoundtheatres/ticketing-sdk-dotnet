/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ShowBudget
    /// </summary>
    [DataContract(Name = "ShowBudget")]
    public partial class ShowBudget : IEquatable<ShowBudget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowBudget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowBudget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowBudget" /> class.
        /// </summary>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="seatsBudgeted">seatsBudgeted.</param>
        /// <param name="avgTicketPrice">avgTicketPrice.</param>
        /// <param name="productionCode">productionCode.</param>
        /// <param name="season">season.</param>
        /// <param name="beginTrackingDate">beginTrackingDate.</param>
        /// <param name="ytdTarget">ytdTarget.</param>
        /// <param name="_event">_event.</param>
        public ShowBudget(string eventCode = default(string), long seatsBudgeted = default(long), decimal avgTicketPrice = default(decimal), string productionCode = default(string), int season = default(int), DateTime beginTrackingDate = default(DateTime), long ytdTarget = default(long), Event _event = default(Event))
        {
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for ShowBudget and cannot be null");
            }
            this.EventCode = eventCode;
            this.SeatsBudgeted = seatsBudgeted;
            this.AvgTicketPrice = avgTicketPrice;
            this.ProductionCode = productionCode;
            this.Season = season;
            this.BeginTrackingDate = beginTrackingDate;
            this.YtdTarget = ytdTarget;
            this.Event = _event;
        }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets SeatsBudgeted
        /// </summary>
        [DataMember(Name = "seatsBudgeted", EmitDefaultValue = false)]
        public long SeatsBudgeted { get; set; }

        /// <summary>
        /// Gets or Sets AvgTicketPrice
        /// </summary>
        [DataMember(Name = "avgTicketPrice", EmitDefaultValue = false)]
        public decimal AvgTicketPrice { get; set; }

        /// <summary>
        /// Gets or Sets ProductionCode
        /// </summary>
        [DataMember(Name = "productionCode", EmitDefaultValue = false)]
        public string ProductionCode { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", EmitDefaultValue = false)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets BeginTrackingDate
        /// </summary>
        [DataMember(Name = "beginTrackingDate", EmitDefaultValue = false)]
        public DateTime BeginTrackingDate { get; set; }

        /// <summary>
        /// Gets or Sets YtdTarget
        /// </summary>
        [DataMember(Name = "ytdTarget", EmitDefaultValue = false)]
        public long YtdTarget { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public Event Event { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowBudget {\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  SeatsBudgeted: ").Append(SeatsBudgeted).Append("\n");
            sb.Append("  AvgTicketPrice: ").Append(AvgTicketPrice).Append("\n");
            sb.Append("  ProductionCode: ").Append(ProductionCode).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  BeginTrackingDate: ").Append(BeginTrackingDate).Append("\n");
            sb.Append("  YtdTarget: ").Append(YtdTarget).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowBudget);
        }

        /// <summary>
        /// Returns true if ShowBudget instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowBudget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowBudget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.SeatsBudgeted == input.SeatsBudgeted ||
                    this.SeatsBudgeted.Equals(input.SeatsBudgeted)
                ) && 
                (
                    this.AvgTicketPrice == input.AvgTicketPrice ||
                    this.AvgTicketPrice.Equals(input.AvgTicketPrice)
                ) && 
                (
                    this.ProductionCode == input.ProductionCode ||
                    (this.ProductionCode != null &&
                    this.ProductionCode.Equals(input.ProductionCode))
                ) && 
                (
                    this.Season == input.Season ||
                    this.Season.Equals(input.Season)
                ) && 
                (
                    this.BeginTrackingDate == input.BeginTrackingDate ||
                    (this.BeginTrackingDate != null &&
                    this.BeginTrackingDate.Equals(input.BeginTrackingDate))
                ) && 
                (
                    this.YtdTarget == input.YtdTarget ||
                    this.YtdTarget.Equals(input.YtdTarget)
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatsBudgeted.GetHashCode();
                hashCode = (hashCode * 59) + this.AvgTicketPrice.GetHashCode();
                if (this.ProductionCode != null)
                {
                    hashCode = (hashCode * 59) + this.ProductionCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Season.GetHashCode();
                if (this.BeginTrackingDate != null)
                {
                    hashCode = (hashCode * 59) + this.BeginTrackingDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.YtdTarget.GetHashCode();
                if (this.Event != null)
                {
                    hashCode = (hashCode * 59) + this.Event.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EventCode (string) maxLength
            if (this.EventCode != null && this.EventCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventCode, length must be less than 10.", new [] { "EventCode" });
            }

            // EventCode (string) minLength
            if (this.EventCode != null && this.EventCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventCode, length must be greater than 0.", new [] { "EventCode" });
            }

            // ProductionCode (string) maxLength
            if (this.ProductionCode != null && this.ProductionCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductionCode, length must be less than 10.", new [] { "ProductionCode" });
            }

            // ProductionCode (string) minLength
            if (this.ProductionCode != null && this.ProductionCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductionCode, length must be greater than 0.", new [] { "ProductionCode" });
            }

            yield break;
        }
    }

}
