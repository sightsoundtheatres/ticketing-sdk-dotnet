/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// CustomerUPSAddress
    /// </summary>
    [DataContract(Name = "CustomerUPSAddress")]
    public partial class CustomerUPSAddress : IEquatable<CustomerUPSAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerUPSAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerUPSAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerUPSAddress" /> class.
        /// </summary>
        /// <param name="customerNumber">customerNumber (required).</param>
        /// <param name="address">address.</param>
        /// <param name="customer">customer.</param>
        public CustomerUPSAddress(long customerNumber = default(long), Address address = default(Address), Customer customer = default(Customer))
        {
            this.CustomerNumber = customerNumber;
            this.Address = address;
            this.Customer = customer;
        }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", IsRequired = true, EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerUPSAddress {\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerUPSAddress);
        }

        /// <summary>
        /// Returns true if CustomerUPSAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerUPSAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerUPSAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
