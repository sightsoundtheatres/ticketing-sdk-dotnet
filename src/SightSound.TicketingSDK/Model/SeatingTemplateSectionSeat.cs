/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// SeatingTemplateSectionSeat
    /// </summary>
    [DataContract(Name = "SeatingTemplateSectionSeat")]
    public partial class SeatingTemplateSectionSeat : IEquatable<SeatingTemplateSectionSeat>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SeatType
        /// </summary>
        [DataMember(Name = "seatType", EmitDefaultValue = false)]
        public SeatType? SeatType { get; set; }

        /// <summary>
        /// Gets or Sets EntranceCode
        /// </summary>
        [DataMember(Name = "entranceCode", EmitDefaultValue = false)]
        public TheaterEntrance? EntranceCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeatingTemplateSectionSeat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SeatingTemplateSectionSeat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeatingTemplateSectionSeat" /> class.
        /// </summary>
        /// <param name="sectionCode">sectionCode (required).</param>
        /// <param name="rowNumber">rowNumber (required).</param>
        /// <param name="seatNumber">seatNumber.</param>
        /// <param name="priceGrade">priceGrade (required).</param>
        /// <param name="seatingTemplateCode">seatingTemplateCode (required).</param>
        /// <param name="seatType">seatType.</param>
        /// <param name="seatDesireability">seatDesireability.</param>
        /// <param name="sectionDesireability">sectionDesireability.</param>
        /// <param name="orderTix">orderTix.</param>
        /// <param name="bookingPhase">bookingPhase.</param>
        /// <param name="sectorCode">sectorCode.</param>
        /// <param name="entranceCode">entranceCode.</param>
        /// <param name="template">template.</param>
        /// <param name="section">section.</param>
        /// <param name="xcoordinate">xcoordinate.</param>
        /// <param name="ycoordinate">ycoordinate.</param>
        /// <param name="zrotation">zrotation.</param>
        public SeatingTemplateSectionSeat(string sectionCode = default(string), string rowNumber = default(string), int seatNumber = default(int), string priceGrade = default(string), string seatingTemplateCode = default(string), SeatType? seatType = default(SeatType?), int seatDesireability = default(int), int sectionDesireability = default(int), bool orderTix = default(bool), int bookingPhase = default(int), string sectorCode = default(string), TheaterEntrance? entranceCode = default(TheaterEntrance?), SeatingTemplate template = default(SeatingTemplate), SeatingTemplateSection section = default(SeatingTemplateSection), int xcoordinate = default(int), int ycoordinate = default(int), int zrotation = default(int))
        {
            // to ensure "sectionCode" is required (not null)
            if (sectionCode == null)
            {
                throw new ArgumentNullException("sectionCode is a required property for SeatingTemplateSectionSeat and cannot be null");
            }
            this.SectionCode = sectionCode;
            // to ensure "rowNumber" is required (not null)
            if (rowNumber == null)
            {
                throw new ArgumentNullException("rowNumber is a required property for SeatingTemplateSectionSeat and cannot be null");
            }
            this.RowNumber = rowNumber;
            // to ensure "priceGrade" is required (not null)
            if (priceGrade == null)
            {
                throw new ArgumentNullException("priceGrade is a required property for SeatingTemplateSectionSeat and cannot be null");
            }
            this.PriceGrade = priceGrade;
            // to ensure "seatingTemplateCode" is required (not null)
            if (seatingTemplateCode == null)
            {
                throw new ArgumentNullException("seatingTemplateCode is a required property for SeatingTemplateSectionSeat and cannot be null");
            }
            this.SeatingTemplateCode = seatingTemplateCode;
            this.SeatNumber = seatNumber;
            this.SeatType = seatType;
            this.SeatDesireability = seatDesireability;
            this.SectionDesireability = sectionDesireability;
            this.OrderTix = orderTix;
            this.BookingPhase = bookingPhase;
            this.SectorCode = sectorCode;
            this.EntranceCode = entranceCode;
            this.Template = template;
            this.Section = section;
            this.Xcoordinate = xcoordinate;
            this.Ycoordinate = ycoordinate;
            this.Zrotation = zrotation;
        }

        /// <summary>
        /// Gets or Sets SectionCode
        /// </summary>
        [DataMember(Name = "sectionCode", IsRequired = true, EmitDefaultValue = false)]
        public string SectionCode { get; set; }

        /// <summary>
        /// Gets or Sets RowNumber
        /// </summary>
        [DataMember(Name = "rowNumber", IsRequired = true, EmitDefaultValue = false)]
        public string RowNumber { get; set; }

        /// <summary>
        /// Gets or Sets SeatNumber
        /// </summary>
        [DataMember(Name = "seatNumber", EmitDefaultValue = false)]
        public int SeatNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceGrade
        /// </summary>
        [DataMember(Name = "priceGrade", IsRequired = true, EmitDefaultValue = false)]
        public string PriceGrade { get; set; }

        /// <summary>
        /// Gets or Sets SeatingTemplateCode
        /// </summary>
        [DataMember(Name = "seatingTemplateCode", IsRequired = true, EmitDefaultValue = false)]
        public string SeatingTemplateCode { get; set; }

        /// <summary>
        /// Gets or Sets SeatDesireability
        /// </summary>
        [DataMember(Name = "seatDesireability", EmitDefaultValue = false)]
        public int SeatDesireability { get; set; }

        /// <summary>
        /// Gets or Sets SectionDesireability
        /// </summary>
        [DataMember(Name = "sectionDesireability", EmitDefaultValue = false)]
        public int SectionDesireability { get; set; }

        /// <summary>
        /// Gets or Sets OrderTix
        /// </summary>
        [DataMember(Name = "orderTix", EmitDefaultValue = true)]
        public bool OrderTix { get; set; }

        /// <summary>
        /// Gets or Sets BookingPhase
        /// </summary>
        [DataMember(Name = "bookingPhase", EmitDefaultValue = false)]
        public int BookingPhase { get; set; }

        /// <summary>
        /// Gets or Sets SectorCode
        /// </summary>
        [DataMember(Name = "sectorCode", EmitDefaultValue = false)]
        public string SectorCode { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public SeatingTemplate Template { get; set; }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public SeatingTemplateSection Section { get; set; }

        /// <summary>
        /// Gets or Sets Xcoordinate
        /// </summary>
        [DataMember(Name = "xcoordinate", EmitDefaultValue = false)]
        public int Xcoordinate { get; set; }

        /// <summary>
        /// Gets or Sets Ycoordinate
        /// </summary>
        [DataMember(Name = "ycoordinate", EmitDefaultValue = false)]
        public int Ycoordinate { get; set; }

        /// <summary>
        /// Gets or Sets Zrotation
        /// </summary>
        [DataMember(Name = "zrotation", EmitDefaultValue = false)]
        public int Zrotation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SeatingTemplateSectionSeat {\n");
            sb.Append("  SectionCode: ").Append(SectionCode).Append("\n");
            sb.Append("  RowNumber: ").Append(RowNumber).Append("\n");
            sb.Append("  SeatNumber: ").Append(SeatNumber).Append("\n");
            sb.Append("  PriceGrade: ").Append(PriceGrade).Append("\n");
            sb.Append("  SeatingTemplateCode: ").Append(SeatingTemplateCode).Append("\n");
            sb.Append("  SeatType: ").Append(SeatType).Append("\n");
            sb.Append("  SeatDesireability: ").Append(SeatDesireability).Append("\n");
            sb.Append("  SectionDesireability: ").Append(SectionDesireability).Append("\n");
            sb.Append("  OrderTix: ").Append(OrderTix).Append("\n");
            sb.Append("  BookingPhase: ").Append(BookingPhase).Append("\n");
            sb.Append("  SectorCode: ").Append(SectorCode).Append("\n");
            sb.Append("  EntranceCode: ").Append(EntranceCode).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Xcoordinate: ").Append(Xcoordinate).Append("\n");
            sb.Append("  Ycoordinate: ").Append(Ycoordinate).Append("\n");
            sb.Append("  Zrotation: ").Append(Zrotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeatingTemplateSectionSeat);
        }

        /// <summary>
        /// Returns true if SeatingTemplateSectionSeat instances are equal
        /// </summary>
        /// <param name="input">Instance of SeatingTemplateSectionSeat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeatingTemplateSectionSeat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SectionCode == input.SectionCode ||
                    (this.SectionCode != null &&
                    this.SectionCode.Equals(input.SectionCode))
                ) && 
                (
                    this.RowNumber == input.RowNumber ||
                    (this.RowNumber != null &&
                    this.RowNumber.Equals(input.RowNumber))
                ) && 
                (
                    this.SeatNumber == input.SeatNumber ||
                    this.SeatNumber.Equals(input.SeatNumber)
                ) && 
                (
                    this.PriceGrade == input.PriceGrade ||
                    (this.PriceGrade != null &&
                    this.PriceGrade.Equals(input.PriceGrade))
                ) && 
                (
                    this.SeatingTemplateCode == input.SeatingTemplateCode ||
                    (this.SeatingTemplateCode != null &&
                    this.SeatingTemplateCode.Equals(input.SeatingTemplateCode))
                ) && 
                (
                    this.SeatType == input.SeatType ||
                    this.SeatType.Equals(input.SeatType)
                ) && 
                (
                    this.SeatDesireability == input.SeatDesireability ||
                    this.SeatDesireability.Equals(input.SeatDesireability)
                ) && 
                (
                    this.SectionDesireability == input.SectionDesireability ||
                    this.SectionDesireability.Equals(input.SectionDesireability)
                ) && 
                (
                    this.OrderTix == input.OrderTix ||
                    this.OrderTix.Equals(input.OrderTix)
                ) && 
                (
                    this.BookingPhase == input.BookingPhase ||
                    this.BookingPhase.Equals(input.BookingPhase)
                ) && 
                (
                    this.SectorCode == input.SectorCode ||
                    (this.SectorCode != null &&
                    this.SectorCode.Equals(input.SectorCode))
                ) && 
                (
                    this.EntranceCode == input.EntranceCode ||
                    this.EntranceCode.Equals(input.EntranceCode)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.Xcoordinate == input.Xcoordinate ||
                    this.Xcoordinate.Equals(input.Xcoordinate)
                ) && 
                (
                    this.Ycoordinate == input.Ycoordinate ||
                    this.Ycoordinate.Equals(input.Ycoordinate)
                ) && 
                (
                    this.Zrotation == input.Zrotation ||
                    this.Zrotation.Equals(input.Zrotation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SectionCode != null)
                {
                    hashCode = (hashCode * 59) + this.SectionCode.GetHashCode();
                }
                if (this.RowNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RowNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatNumber.GetHashCode();
                if (this.PriceGrade != null)
                {
                    hashCode = (hashCode * 59) + this.PriceGrade.GetHashCode();
                }
                if (this.SeatingTemplateCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatingTemplateCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatType.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatDesireability.GetHashCode();
                hashCode = (hashCode * 59) + this.SectionDesireability.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderTix.GetHashCode();
                hashCode = (hashCode * 59) + this.BookingPhase.GetHashCode();
                if (this.SectorCode != null)
                {
                    hashCode = (hashCode * 59) + this.SectorCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntranceCode.GetHashCode();
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                if (this.Section != null)
                {
                    hashCode = (hashCode * 59) + this.Section.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Xcoordinate.GetHashCode();
                hashCode = (hashCode * 59) + this.Ycoordinate.GetHashCode();
                hashCode = (hashCode * 59) + this.Zrotation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SectionCode (string) maxLength
            if (this.SectionCode != null && this.SectionCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SectionCode, length must be less than 10.", new [] { "SectionCode" });
            }

            // SectionCode (string) minLength
            if (this.SectionCode != null && this.SectionCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SectionCode, length must be greater than 0.", new [] { "SectionCode" });
            }

            // RowNumber (string) maxLength
            if (this.RowNumber != null && this.RowNumber.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RowNumber, length must be less than 10.", new [] { "RowNumber" });
            }

            // RowNumber (string) minLength
            if (this.RowNumber != null && this.RowNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RowNumber, length must be greater than 0.", new [] { "RowNumber" });
            }

            // PriceGrade (string) maxLength
            if (this.PriceGrade != null && this.PriceGrade.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceGrade, length must be less than 1.", new [] { "PriceGrade" });
            }

            // PriceGrade (string) minLength
            if (this.PriceGrade != null && this.PriceGrade.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceGrade, length must be greater than 0.", new [] { "PriceGrade" });
            }

            // SeatingTemplateCode (string) maxLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be less than 30.", new [] { "SeatingTemplateCode" });
            }

            // SeatingTemplateCode (string) minLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be greater than 0.", new [] { "SeatingTemplateCode" });
            }

            // SectorCode (string) maxLength
            if (this.SectorCode != null && this.SectorCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SectorCode, length must be less than 20.", new [] { "SectorCode" });
            }

            // SectorCode (string) minLength
            if (this.SectorCode != null && this.SectorCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SectorCode, length must be greater than 0.", new [] { "SectorCode" });
            }

            yield break;
        }
    }

}
