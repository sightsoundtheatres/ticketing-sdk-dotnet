/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Schedule
    /// </summary>
    [DataContract(Name = "Schedule")]
    public partial class Schedule : IEquatable<Schedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Schedule" /> class.
        /// </summary>
        /// <param name="eventCode">eventCode.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="seatsAvailable">seatsAvailable.</param>
        /// <param name="seatsBooked">seatsBooked.</param>
        /// <param name="seatsBlocked">seatsBlocked.</param>
        /// <param name="seatsOverflow">seatsOverflow.</param>
        /// <param name="seatingTemplateCode">seatingTemplateCode.</param>
        /// <param name="active">active.</param>
        /// <param name="priceListCode">priceListCode.</param>
        /// <param name="seatsOverbooked">seatsOverbooked.</param>
        /// <param name="allowQtoDiscount">allowQtoDiscount.</param>
        /// <param name="custTandcProfileCode">custTandcProfileCode.</param>
        /// <param name="heldCount">heldCount.</param>
        /// <param name="wheelChairCount">wheelChairCount.</param>
        /// <param name="blackoutUpdateSent">blackoutUpdateSent.</param>
        /// <param name="blackoutUpdateDatetime">blackoutUpdateDatetime.</param>
        /// <param name="traDevCount">traDevCount.</param>
        /// <param name="hdShoot">hdShoot.</param>
        /// <param name="cmsAnnouncement">cmsAnnouncement.</param>
        /// <param name="denyApplicationCode">denyApplicationCode.</param>
        /// <param name="cancelled">cancelled.</param>
        /// <param name="_event">_event.</param>
        public Schedule(string eventCode = default(string), DateTime dateTime = default(DateTime), int seatsAvailable = default(int), int seatsBooked = default(int), int seatsBlocked = default(int), int seatsOverflow = default(int), string seatingTemplateCode = default(string), bool active = default(bool), string priceListCode = default(string), int seatsOverbooked = default(int), bool allowQtoDiscount = default(bool), string custTandcProfileCode = default(string), int heldCount = default(int), int wheelChairCount = default(int), bool blackoutUpdateSent = default(bool), DateTime blackoutUpdateDatetime = default(DateTime), int traDevCount = default(int), bool hdShoot = default(bool), string cmsAnnouncement = default(string), string denyApplicationCode = default(string), bool cancelled = default(bool), Event _event = default(Event))
        {
            this.EventCode = eventCode;
            this.DateTime = dateTime;
            this.SeatsAvailable = seatsAvailable;
            this.SeatsBooked = seatsBooked;
            this.SeatsBlocked = seatsBlocked;
            this.SeatsOverflow = seatsOverflow;
            this.SeatingTemplateCode = seatingTemplateCode;
            this.Active = active;
            this.PriceListCode = priceListCode;
            this.SeatsOverbooked = seatsOverbooked;
            this.AllowQtoDiscount = allowQtoDiscount;
            this.CustTandcProfileCode = custTandcProfileCode;
            this.HeldCount = heldCount;
            this.WheelChairCount = wheelChairCount;
            this.BlackoutUpdateSent = blackoutUpdateSent;
            this.BlackoutUpdateDatetime = blackoutUpdateDatetime;
            this.TraDevCount = traDevCount;
            this.HdShoot = hdShoot;
            this.CmsAnnouncement = cmsAnnouncement;
            this.DenyApplicationCode = denyApplicationCode;
            this.Cancelled = cancelled;
            this.Event = _event;
        }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets SeatsAvailable
        /// </summary>
        [DataMember(Name = "seatsAvailable", EmitDefaultValue = false)]
        [Obsolete]
        public int SeatsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets SeatsBooked
        /// </summary>
        [DataMember(Name = "seatsBooked", EmitDefaultValue = false)]
        [Obsolete]
        public int SeatsBooked { get; set; }

        /// <summary>
        /// Gets or Sets SeatsBlocked
        /// </summary>
        [DataMember(Name = "seatsBlocked", EmitDefaultValue = false)]
        [Obsolete]
        public int SeatsBlocked { get; set; }

        /// <summary>
        /// Gets or Sets SeatsOverflow
        /// </summary>
        [DataMember(Name = "seatsOverflow", EmitDefaultValue = false)]
        [Obsolete]
        public int SeatsOverflow { get; set; }

        /// <summary>
        /// Gets or Sets SeatingTemplateCode
        /// </summary>
        [DataMember(Name = "seatingTemplateCode", EmitDefaultValue = false)]
        public string SeatingTemplateCode { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets PriceListCode
        /// </summary>
        [DataMember(Name = "priceListCode", EmitDefaultValue = false)]
        public string PriceListCode { get; set; }

        /// <summary>
        /// Gets or Sets SeatsOverbooked
        /// </summary>
        [DataMember(Name = "seatsOverbooked", EmitDefaultValue = false)]
        public int SeatsOverbooked { get; set; }

        /// <summary>
        /// Gets or Sets AllowQtoDiscount
        /// </summary>
        [DataMember(Name = "allowQtoDiscount", EmitDefaultValue = true)]
        public bool AllowQtoDiscount { get; set; }

        /// <summary>
        /// Gets or Sets CustTandcProfileCode
        /// </summary>
        [DataMember(Name = "custTandcProfileCode", EmitDefaultValue = false)]
        [Obsolete]
        public string CustTandcProfileCode { get; set; }

        /// <summary>
        /// Gets or Sets HeldCount
        /// </summary>
        [DataMember(Name = "heldCount", EmitDefaultValue = false)]
        public int HeldCount { get; set; }

        /// <summary>
        /// Gets or Sets WheelChairCount
        /// </summary>
        [DataMember(Name = "wheelChairCount", EmitDefaultValue = false)]
        [Obsolete]
        public int WheelChairCount { get; set; }

        /// <summary>
        /// Gets or Sets BlackoutUpdateSent
        /// </summary>
        [DataMember(Name = "blackoutUpdateSent", EmitDefaultValue = true)]
        public bool BlackoutUpdateSent { get; set; }

        /// <summary>
        /// Gets or Sets BlackoutUpdateDatetime
        /// </summary>
        [DataMember(Name = "blackoutUpdateDatetime", EmitDefaultValue = false)]
        public DateTime BlackoutUpdateDatetime { get; set; }

        /// <summary>
        /// Gets or Sets TraDevCount
        /// </summary>
        [DataMember(Name = "traDevCount", EmitDefaultValue = false)]
        public int TraDevCount { get; set; }

        /// <summary>
        /// Gets or Sets HdShoot
        /// </summary>
        [DataMember(Name = "hdShoot", EmitDefaultValue = true)]
        public bool HdShoot { get; set; }

        /// <summary>
        /// Gets or Sets CmsAnnouncement
        /// </summary>
        [DataMember(Name = "cmsAnnouncement", EmitDefaultValue = false)]
        public string CmsAnnouncement { get; set; }

        /// <summary>
        /// Gets or Sets DenyApplicationCode
        /// </summary>
        [DataMember(Name = "denyApplicationCode", EmitDefaultValue = false)]
        public string DenyApplicationCode { get; set; }

        /// <summary>
        /// Gets or Sets Cancelled
        /// </summary>
        [DataMember(Name = "cancelled", EmitDefaultValue = true)]
        public bool Cancelled { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public Event Event { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Schedule {\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  SeatsAvailable: ").Append(SeatsAvailable).Append("\n");
            sb.Append("  SeatsBooked: ").Append(SeatsBooked).Append("\n");
            sb.Append("  SeatsBlocked: ").Append(SeatsBlocked).Append("\n");
            sb.Append("  SeatsOverflow: ").Append(SeatsOverflow).Append("\n");
            sb.Append("  SeatingTemplateCode: ").Append(SeatingTemplateCode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  PriceListCode: ").Append(PriceListCode).Append("\n");
            sb.Append("  SeatsOverbooked: ").Append(SeatsOverbooked).Append("\n");
            sb.Append("  AllowQtoDiscount: ").Append(AllowQtoDiscount).Append("\n");
            sb.Append("  CustTandcProfileCode: ").Append(CustTandcProfileCode).Append("\n");
            sb.Append("  HeldCount: ").Append(HeldCount).Append("\n");
            sb.Append("  WheelChairCount: ").Append(WheelChairCount).Append("\n");
            sb.Append("  BlackoutUpdateSent: ").Append(BlackoutUpdateSent).Append("\n");
            sb.Append("  BlackoutUpdateDatetime: ").Append(BlackoutUpdateDatetime).Append("\n");
            sb.Append("  TraDevCount: ").Append(TraDevCount).Append("\n");
            sb.Append("  HdShoot: ").Append(HdShoot).Append("\n");
            sb.Append("  CmsAnnouncement: ").Append(CmsAnnouncement).Append("\n");
            sb.Append("  DenyApplicationCode: ").Append(DenyApplicationCode).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Schedule);
        }

        /// <summary>
        /// Returns true if Schedule instances are equal
        /// </summary>
        /// <param name="input">Instance of Schedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Schedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.SeatsAvailable == input.SeatsAvailable ||
                    this.SeatsAvailable.Equals(input.SeatsAvailable)
                ) && 
                (
                    this.SeatsBooked == input.SeatsBooked ||
                    this.SeatsBooked.Equals(input.SeatsBooked)
                ) && 
                (
                    this.SeatsBlocked == input.SeatsBlocked ||
                    this.SeatsBlocked.Equals(input.SeatsBlocked)
                ) && 
                (
                    this.SeatsOverflow == input.SeatsOverflow ||
                    this.SeatsOverflow.Equals(input.SeatsOverflow)
                ) && 
                (
                    this.SeatingTemplateCode == input.SeatingTemplateCode ||
                    (this.SeatingTemplateCode != null &&
                    this.SeatingTemplateCode.Equals(input.SeatingTemplateCode))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.PriceListCode == input.PriceListCode ||
                    (this.PriceListCode != null &&
                    this.PriceListCode.Equals(input.PriceListCode))
                ) && 
                (
                    this.SeatsOverbooked == input.SeatsOverbooked ||
                    this.SeatsOverbooked.Equals(input.SeatsOverbooked)
                ) && 
                (
                    this.AllowQtoDiscount == input.AllowQtoDiscount ||
                    this.AllowQtoDiscount.Equals(input.AllowQtoDiscount)
                ) && 
                (
                    this.CustTandcProfileCode == input.CustTandcProfileCode ||
                    (this.CustTandcProfileCode != null &&
                    this.CustTandcProfileCode.Equals(input.CustTandcProfileCode))
                ) && 
                (
                    this.HeldCount == input.HeldCount ||
                    this.HeldCount.Equals(input.HeldCount)
                ) && 
                (
                    this.WheelChairCount == input.WheelChairCount ||
                    this.WheelChairCount.Equals(input.WheelChairCount)
                ) && 
                (
                    this.BlackoutUpdateSent == input.BlackoutUpdateSent ||
                    this.BlackoutUpdateSent.Equals(input.BlackoutUpdateSent)
                ) && 
                (
                    this.BlackoutUpdateDatetime == input.BlackoutUpdateDatetime ||
                    (this.BlackoutUpdateDatetime != null &&
                    this.BlackoutUpdateDatetime.Equals(input.BlackoutUpdateDatetime))
                ) && 
                (
                    this.TraDevCount == input.TraDevCount ||
                    this.TraDevCount.Equals(input.TraDevCount)
                ) && 
                (
                    this.HdShoot == input.HdShoot ||
                    this.HdShoot.Equals(input.HdShoot)
                ) && 
                (
                    this.CmsAnnouncement == input.CmsAnnouncement ||
                    (this.CmsAnnouncement != null &&
                    this.CmsAnnouncement.Equals(input.CmsAnnouncement))
                ) && 
                (
                    this.DenyApplicationCode == input.DenyApplicationCode ||
                    (this.DenyApplicationCode != null &&
                    this.DenyApplicationCode.Equals(input.DenyApplicationCode))
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    this.Cancelled.Equals(input.Cancelled)
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.DateTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatsAvailable.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatsBooked.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatsBlocked.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatsOverflow.GetHashCode();
                if (this.SeatingTemplateCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatingTemplateCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.PriceListCode != null)
                {
                    hashCode = (hashCode * 59) + this.PriceListCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatsOverbooked.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowQtoDiscount.GetHashCode();
                if (this.CustTandcProfileCode != null)
                {
                    hashCode = (hashCode * 59) + this.CustTandcProfileCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HeldCount.GetHashCode();
                hashCode = (hashCode * 59) + this.WheelChairCount.GetHashCode();
                hashCode = (hashCode * 59) + this.BlackoutUpdateSent.GetHashCode();
                if (this.BlackoutUpdateDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.BlackoutUpdateDatetime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TraDevCount.GetHashCode();
                hashCode = (hashCode * 59) + this.HdShoot.GetHashCode();
                if (this.CmsAnnouncement != null)
                {
                    hashCode = (hashCode * 59) + this.CmsAnnouncement.GetHashCode();
                }
                if (this.DenyApplicationCode != null)
                {
                    hashCode = (hashCode * 59) + this.DenyApplicationCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cancelled.GetHashCode();
                if (this.Event != null)
                {
                    hashCode = (hashCode * 59) + this.Event.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SeatingTemplateCode (string) maxLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be less than 30.", new [] { "SeatingTemplateCode" });
            }

            // SeatingTemplateCode (string) minLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be greater than 0.", new [] { "SeatingTemplateCode" });
            }

            // PriceListCode (string) maxLength
            if (this.PriceListCode != null && this.PriceListCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceListCode, length must be less than 20.", new [] { "PriceListCode" });
            }

            // PriceListCode (string) minLength
            if (this.PriceListCode != null && this.PriceListCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceListCode, length must be greater than 0.", new [] { "PriceListCode" });
            }

            // CustTandcProfileCode (string) maxLength
            if (this.CustTandcProfileCode != null && this.CustTandcProfileCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustTandcProfileCode, length must be less than 20.", new [] { "CustTandcProfileCode" });
            }

            // CustTandcProfileCode (string) minLength
            if (this.CustTandcProfileCode != null && this.CustTandcProfileCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustTandcProfileCode, length must be greater than 0.", new [] { "CustTandcProfileCode" });
            }

            // CmsAnnouncement (string) maxLength
            if (this.CmsAnnouncement != null && this.CmsAnnouncement.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsAnnouncement, length must be less than 60.", new [] { "CmsAnnouncement" });
            }

            // CmsAnnouncement (string) minLength
            if (this.CmsAnnouncement != null && this.CmsAnnouncement.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CmsAnnouncement, length must be greater than 0.", new [] { "CmsAnnouncement" });
            }

            yield break;
        }
    }

}
