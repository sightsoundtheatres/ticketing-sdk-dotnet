/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ShowOverflowSeat
    /// </summary>
    [DataContract(Name = "ShowOverflowSeat")]
    public partial class ShowOverflowSeat : IEquatable<ShowOverflowSeat>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TicketStatus
        /// </summary>
        [DataMember(Name = "ticketStatus", EmitDefaultValue = false)]
        public TicketPrintStatus? TicketStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowOverflowSeat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowOverflowSeat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowOverflowSeat" /> class.
        /// </summary>
        /// <param name="overflowId">overflowId.</param>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="showDateTime">showDateTime.</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="itemNumber">itemNumber.</param>
        /// <param name="ticketText">ticketText.</param>
        /// <param name="ticketStatus">ticketStatus.</param>
        /// <param name="orderItem">orderItem.</param>
        public ShowOverflowSeat(long overflowId = default(long), string eventCode = default(string), DateTime showDateTime = default(DateTime), long orderNumber = default(long), int itemNumber = default(int), string ticketText = default(string), TicketPrintStatus? ticketStatus = default(TicketPrintStatus?), OrderItem orderItem = default(OrderItem))
        {
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for ShowOverflowSeat and cannot be null");
            }
            this.EventCode = eventCode;
            this.OverflowId = overflowId;
            this.ShowDateTime = showDateTime;
            this.OrderNumber = orderNumber;
            this.ItemNumber = itemNumber;
            this.TicketText = ticketText;
            this.TicketStatus = ticketStatus;
            this.OrderItem = orderItem;
        }

        /// <summary>
        /// Gets or Sets OverflowId
        /// </summary>
        [DataMember(Name = "overflowId", EmitDefaultValue = false)]
        public long OverflowId { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets ShowDateTime
        /// </summary>
        [DataMember(Name = "showDateTime", EmitDefaultValue = false)]
        public DateTime ShowDateTime { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets TicketText
        /// </summary>
        [DataMember(Name = "ticketText", EmitDefaultValue = false)]
        public string TicketText { get; set; }

        /// <summary>
        /// Gets or Sets OrderItem
        /// </summary>
        [DataMember(Name = "orderItem", EmitDefaultValue = false)]
        public OrderItem OrderItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowOverflowSeat {\n");
            sb.Append("  OverflowId: ").Append(OverflowId).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  ShowDateTime: ").Append(ShowDateTime).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  TicketText: ").Append(TicketText).Append("\n");
            sb.Append("  TicketStatus: ").Append(TicketStatus).Append("\n");
            sb.Append("  OrderItem: ").Append(OrderItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowOverflowSeat);
        }

        /// <summary>
        /// Returns true if ShowOverflowSeat instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowOverflowSeat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowOverflowSeat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OverflowId == input.OverflowId ||
                    this.OverflowId.Equals(input.OverflowId)
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.ShowDateTime == input.ShowDateTime ||
                    (this.ShowDateTime != null &&
                    this.ShowDateTime.Equals(input.ShowDateTime))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.TicketText == input.TicketText ||
                    (this.TicketText != null &&
                    this.TicketText.Equals(input.TicketText))
                ) && 
                (
                    this.TicketStatus == input.TicketStatus ||
                    this.TicketStatus.Equals(input.TicketStatus)
                ) && 
                (
                    this.OrderItem == input.OrderItem ||
                    (this.OrderItem != null &&
                    this.OrderItem.Equals(input.OrderItem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OverflowId.GetHashCode();
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.ShowDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ShowDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                if (this.TicketText != null)
                {
                    hashCode = (hashCode * 59) + this.TicketText.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TicketStatus.GetHashCode();
                if (this.OrderItem != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItem.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TicketText (string) maxLength
            if (this.TicketText != null && this.TicketText.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TicketText, length must be less than 50.", new [] { "TicketText" });
            }

            // TicketText (string) minLength
            if (this.TicketText != null && this.TicketText.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TicketText, length must be greater than 0.", new [] { "TicketText" });
            }

            yield break;
        }
    }

}
