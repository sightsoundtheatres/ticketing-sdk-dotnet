/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// GroupInfo
    /// </summary>
    [DataContract(Name = "GroupInfo")]
    public partial class GroupInfo : IEquatable<GroupInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupInfo" /> class.
        /// </summary>
        /// <param name="orderNumber">orderNumber (required).</param>
        /// <param name="itemNumber">itemNumber (required).</param>
        /// <param name="eventCode">eventCode.</param>
        /// <param name="showDateTime">showDateTime.</param>
        /// <param name="groupNumber">groupNumber.</param>
        /// <param name="groupCount">groupCount.</param>
        /// <param name="arrivalDateTime">arrivalDateTime.</param>
        /// <param name="busSpaces">busSpaces.</param>
        /// <param name="order">order.</param>
        /// <param name="orderItem">orderItem.</param>
        public GroupInfo(long orderNumber = default(long), int itemNumber = default(int), string eventCode = default(string), DateTime showDateTime = default(DateTime), int groupNumber = default(int), int groupCount = default(int), DateTime arrivalDateTime = default(DateTime), string busSpaces = default(string), Order order = default(Order), OrderItem orderItem = default(OrderItem))
        {
            this.OrderNumber = orderNumber;
            this.ItemNumber = itemNumber;
            this.EventCode = eventCode;
            this.ShowDateTime = showDateTime;
            this.GroupNumber = groupNumber;
            this.GroupCount = groupCount;
            this.ArrivalDateTime = arrivalDateTime;
            this.BusSpaces = busSpaces;
            this.Order = order;
            this.OrderItem = orderItem;
        }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", IsRequired = true, EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", IsRequired = true, EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets ShowDateTime
        /// </summary>
        [DataMember(Name = "showDateTime", EmitDefaultValue = false)]
        public DateTime ShowDateTime { get; set; }

        /// <summary>
        /// Gets or Sets GroupNumber
        /// </summary>
        [DataMember(Name = "groupNumber", EmitDefaultValue = false)]
        public int GroupNumber { get; set; }

        /// <summary>
        /// Gets or Sets GroupCount
        /// </summary>
        [DataMember(Name = "groupCount", EmitDefaultValue = false)]
        public int GroupCount { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalDateTime
        /// </summary>
        [DataMember(Name = "arrivalDateTime", EmitDefaultValue = false)]
        public DateTime ArrivalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets BusSpaces
        /// </summary>
        [DataMember(Name = "busSpaces", EmitDefaultValue = false)]
        public string BusSpaces { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets OrderItem
        /// </summary>
        [DataMember(Name = "orderItem", EmitDefaultValue = false)]
        public OrderItem OrderItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupInfo {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  ShowDateTime: ").Append(ShowDateTime).Append("\n");
            sb.Append("  GroupNumber: ").Append(GroupNumber).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  ArrivalDateTime: ").Append(ArrivalDateTime).Append("\n");
            sb.Append("  BusSpaces: ").Append(BusSpaces).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OrderItem: ").Append(OrderItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupInfo);
        }

        /// <summary>
        /// Returns true if GroupInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.ShowDateTime == input.ShowDateTime ||
                    (this.ShowDateTime != null &&
                    this.ShowDateTime.Equals(input.ShowDateTime))
                ) && 
                (
                    this.GroupNumber == input.GroupNumber ||
                    this.GroupNumber.Equals(input.GroupNumber)
                ) && 
                (
                    this.GroupCount == input.GroupCount ||
                    this.GroupCount.Equals(input.GroupCount)
                ) && 
                (
                    this.ArrivalDateTime == input.ArrivalDateTime ||
                    (this.ArrivalDateTime != null &&
                    this.ArrivalDateTime.Equals(input.ArrivalDateTime))
                ) && 
                (
                    this.BusSpaces == input.BusSpaces ||
                    (this.BusSpaces != null &&
                    this.BusSpaces.Equals(input.BusSpaces))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.OrderItem == input.OrderItem ||
                    (this.OrderItem != null &&
                    this.OrderItem.Equals(input.OrderItem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.ShowDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ShowDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.GroupCount.GetHashCode();
                if (this.ArrivalDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ArrivalDateTime.GetHashCode();
                }
                if (this.BusSpaces != null)
                {
                    hashCode = (hashCode * 59) + this.BusSpaces.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.OrderItem != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItem.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BusSpaces (string) maxLength
            if (this.BusSpaces != null && this.BusSpaces.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusSpaces, length must be less than 50.", new [] { "BusSpaces" });
            }

            // BusSpaces (string) minLength
            if (this.BusSpaces != null && this.BusSpaces.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusSpaces, length must be greater than 0.", new [] { "BusSpaces" });
            }

            yield break;
        }
    }

}
