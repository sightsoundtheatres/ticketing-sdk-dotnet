/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Invoice
    /// </summary>
    [DataContract(Name = "Invoice")]
    public partial class Invoice : IEquatable<Invoice>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", IsRequired = true, EmitDefaultValue = false)]
        public InvoiceCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public InvoiceStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public InvoiceType? Type { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public ImpSSIInvoiceCategory? Category { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name = "paymentTerms", EmitDefaultValue = false)]
        public PaymentTerms? PaymentTerms { get; set; }

        /// <summary>
        /// Gets or Sets SyncSource
        /// </summary>
        [DataMember(Name = "syncSource", EmitDefaultValue = false)]
        public SyncSource? SyncSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Invoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="company">company (required).</param>
        /// <param name="invoiceDate">invoiceDate (required).</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="paidDate">paidDate.</param>
        /// <param name="paidAmount">paidAmount.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="status">status.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="type">type.</param>
        /// <param name="batchNumber">batchNumber.</param>
        /// <param name="category">category.</param>
        /// <param name="baseAmount">baseAmount.</param>
        /// <param name="arSegment1">arSegment1.</param>
        /// <param name="arSegment2">arSegment2.</param>
        /// <param name="arSegment3">arSegment3.</param>
        /// <param name="arSegment4">arSegment4.</param>
        /// <param name="arSegment5">arSegment5.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        /// <param name="postFlag">postFlag.</param>
        /// <param name="lockFlag">lockFlag.</param>
        /// <param name="voidDate">voidDate.</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="orderDate">orderDate.</param>
        /// <param name="lastPrintDate">lastPrintDate.</param>
        /// <param name="contactFirstName">contactFirstName.</param>
        /// <param name="contactLastName">contactLastName.</param>
        /// <param name="reservationLocation">reservationLocation.</param>
        /// <param name="addUserId">addUserId.</param>
        /// <param name="executiveSeriesInvoiceNumber">executiveSeriesInvoiceNumber.</param>
        /// <param name="order">order.</param>
        /// <param name="invoiceDetails">invoiceDetails.</param>
        /// <param name="modifyDate">modifyDate.</param>
        /// <param name="syncSource">syncSource.</param>
        /// <param name="receiptDetails">receiptDetails.</param>
        /// <param name="customer">customer.</param>
        public Invoice(long invoiceNumber = default(long), InvoiceCompany company = default(InvoiceCompany), DateTime invoiceDate = default(DateTime), decimal totalAmount = default(decimal), DateTime paidDate = default(DateTime), decimal paidAmount = default(decimal), long customerNumber = default(long), InvoiceStatus? status = default(InvoiceStatus?), DateTime dueDate = default(DateTime), InvoiceType? type = default(InvoiceType?), string batchNumber = default(string), ImpSSIInvoiceCategory? category = default(ImpSSIInvoiceCategory?), decimal baseAmount = default(decimal), string arSegment1 = default(string), string arSegment2 = default(string), string arSegment3 = default(string), string arSegment4 = default(string), string arSegment5 = default(string), PaymentTerms? paymentTerms = default(PaymentTerms?), string postFlag = default(string), bool lockFlag = default(bool), DateTime voidDate = default(DateTime), long orderNumber = default(long), DateTime orderDate = default(DateTime), DateTime lastPrintDate = default(DateTime), string contactFirstName = default(string), string contactLastName = default(string), string reservationLocation = default(string), string addUserId = default(string), long executiveSeriesInvoiceNumber = default(long), Order order = default(Order), List<InvoiceDetail> invoiceDetails = default(List<InvoiceDetail>), DateTime modifyDate = default(DateTime), SyncSource? syncSource = default(SyncSource?), List<ReceiptDetail> receiptDetails = default(List<ReceiptDetail>), Customer customer = default(Customer))
        {
            this.Company = company;
            this.InvoiceDate = invoiceDate;
            this.InvoiceNumber = invoiceNumber;
            this.TotalAmount = totalAmount;
            this.PaidDate = paidDate;
            this.PaidAmount = paidAmount;
            this.CustomerNumber = customerNumber;
            this.Status = status;
            this.DueDate = dueDate;
            this.Type = type;
            this.BatchNumber = batchNumber;
            this.Category = category;
            this.BaseAmount = baseAmount;
            this.ArSegment1 = arSegment1;
            this.ArSegment2 = arSegment2;
            this.ArSegment3 = arSegment3;
            this.ArSegment4 = arSegment4;
            this.ArSegment5 = arSegment5;
            this.PaymentTerms = paymentTerms;
            this.PostFlag = postFlag;
            this.LockFlag = lockFlag;
            this.VoidDate = voidDate;
            this.OrderNumber = orderNumber;
            this.OrderDate = orderDate;
            this.LastPrintDate = lastPrintDate;
            this.ContactFirstName = contactFirstName;
            this.ContactLastName = contactLastName;
            this.ReservationLocation = reservationLocation;
            this.AddUserId = addUserId;
            this.ExecutiveSeriesInvoiceNumber = executiveSeriesInvoiceNumber;
            this.Order = order;
            this.InvoiceDetails = invoiceDetails;
            this.ModifyDate = modifyDate;
            this.SyncSource = syncSource;
            this.ReceiptDetails = receiptDetails;
            this.Customer = customer;
        }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name = "invoiceNumber", EmitDefaultValue = false)]
        public long InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name = "invoiceDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public decimal TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaidDate
        /// </summary>
        [DataMember(Name = "paidDate", EmitDefaultValue = false)]
        public DateTime PaidDate { get; set; }

        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name = "paidAmount", EmitDefaultValue = false)]
        public decimal PaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "dueDate", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets BatchNumber
        /// </summary>
        [DataMember(Name = "batchNumber", EmitDefaultValue = false)]
        public string BatchNumber { get; set; }

        /// <summary>
        /// Gets or Sets BaseAmount
        /// </summary>
        [DataMember(Name = "baseAmount", EmitDefaultValue = false)]
        public decimal BaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets ArSegment1
        /// </summary>
        [DataMember(Name = "arSegment1", EmitDefaultValue = false)]
        public string ArSegment1 { get; set; }

        /// <summary>
        /// Gets or Sets ArSegment2
        /// </summary>
        [DataMember(Name = "arSegment2", EmitDefaultValue = false)]
        public string ArSegment2 { get; set; }

        /// <summary>
        /// Gets or Sets ArSegment3
        /// </summary>
        [DataMember(Name = "arSegment3", EmitDefaultValue = false)]
        public string ArSegment3 { get; set; }

        /// <summary>
        /// Gets or Sets ArSegment4
        /// </summary>
        [DataMember(Name = "arSegment4", EmitDefaultValue = false)]
        public string ArSegment4 { get; set; }

        /// <summary>
        /// Gets or Sets ArSegment5
        /// </summary>
        [DataMember(Name = "arSegment5", EmitDefaultValue = false)]
        public string ArSegment5 { get; set; }

        /// <summary>
        /// Gets or Sets PostFlag
        /// </summary>
        [DataMember(Name = "postFlag", EmitDefaultValue = false)]
        public string PostFlag { get; set; }

        /// <summary>
        /// Gets or Sets LockFlag
        /// </summary>
        [DataMember(Name = "lockFlag", EmitDefaultValue = true)]
        public bool LockFlag { get; set; }

        /// <summary>
        /// Gets or Sets VoidDate
        /// </summary>
        [DataMember(Name = "voidDate", EmitDefaultValue = false)]
        public DateTime VoidDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name = "orderDate", EmitDefaultValue = false)]
        public DateTime OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets LastPrintDate
        /// </summary>
        [DataMember(Name = "lastPrintDate", EmitDefaultValue = false)]
        public DateTime LastPrintDate { get; set; }

        /// <summary>
        /// Gets or Sets ContactFirstName
        /// </summary>
        [DataMember(Name = "contactFirstName", EmitDefaultValue = false)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Gets or Sets ContactLastName
        /// </summary>
        [DataMember(Name = "contactLastName", EmitDefaultValue = false)]
        public string ContactLastName { get; set; }

        /// <summary>
        /// Gets or Sets ReservationLocation
        /// </summary>
        [DataMember(Name = "reservationLocation", EmitDefaultValue = false)]
        public string ReservationLocation { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets ExecutiveSeriesInvoiceNumber
        /// </summary>
        [DataMember(Name = "executiveSeriesInvoiceNumber", EmitDefaultValue = false)]
        public long ExecutiveSeriesInvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDetails
        /// </summary>
        [DataMember(Name = "invoiceDetails", EmitDefaultValue = false)]
        public List<InvoiceDetail> InvoiceDetails { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name = "modifyDate", EmitDefaultValue = false)]
        public DateTime ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptDetails
        /// </summary>
        [DataMember(Name = "receiptDetails", EmitDefaultValue = false)]
        public List<ReceiptDetail> ReceiptDetails { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BatchNumber: ").Append(BatchNumber).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  ArSegment1: ").Append(ArSegment1).Append("\n");
            sb.Append("  ArSegment2: ").Append(ArSegment2).Append("\n");
            sb.Append("  ArSegment3: ").Append(ArSegment3).Append("\n");
            sb.Append("  ArSegment4: ").Append(ArSegment4).Append("\n");
            sb.Append("  ArSegment5: ").Append(ArSegment5).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  PostFlag: ").Append(PostFlag).Append("\n");
            sb.Append("  LockFlag: ").Append(LockFlag).Append("\n");
            sb.Append("  VoidDate: ").Append(VoidDate).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  LastPrintDate: ").Append(LastPrintDate).Append("\n");
            sb.Append("  ContactFirstName: ").Append(ContactFirstName).Append("\n");
            sb.Append("  ContactLastName: ").Append(ContactLastName).Append("\n");
            sb.Append("  ReservationLocation: ").Append(ReservationLocation).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  ExecutiveSeriesInvoiceNumber: ").Append(ExecutiveSeriesInvoiceNumber).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  InvoiceDetails: ").Append(InvoiceDetails).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  SyncSource: ").Append(SyncSource).Append("\n");
            sb.Append("  ReceiptDetails: ").Append(ReceiptDetails).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    this.InvoiceNumber.Equals(input.InvoiceNumber)
                ) && 
                (
                    this.Company == input.Company ||
                    this.Company.Equals(input.Company)
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                ) && 
                (
                    this.PaidDate == input.PaidDate ||
                    (this.PaidDate != null &&
                    this.PaidDate.Equals(input.PaidDate))
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    this.PaidAmount.Equals(input.PaidAmount)
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.BatchNumber == input.BatchNumber ||
                    (this.BatchNumber != null &&
                    this.BatchNumber.Equals(input.BatchNumber))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.BaseAmount == input.BaseAmount ||
                    this.BaseAmount.Equals(input.BaseAmount)
                ) && 
                (
                    this.ArSegment1 == input.ArSegment1 ||
                    (this.ArSegment1 != null &&
                    this.ArSegment1.Equals(input.ArSegment1))
                ) && 
                (
                    this.ArSegment2 == input.ArSegment2 ||
                    (this.ArSegment2 != null &&
                    this.ArSegment2.Equals(input.ArSegment2))
                ) && 
                (
                    this.ArSegment3 == input.ArSegment3 ||
                    (this.ArSegment3 != null &&
                    this.ArSegment3.Equals(input.ArSegment3))
                ) && 
                (
                    this.ArSegment4 == input.ArSegment4 ||
                    (this.ArSegment4 != null &&
                    this.ArSegment4.Equals(input.ArSegment4))
                ) && 
                (
                    this.ArSegment5 == input.ArSegment5 ||
                    (this.ArSegment5 != null &&
                    this.ArSegment5.Equals(input.ArSegment5))
                ) && 
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    this.PaymentTerms.Equals(input.PaymentTerms)
                ) && 
                (
                    this.PostFlag == input.PostFlag ||
                    (this.PostFlag != null &&
                    this.PostFlag.Equals(input.PostFlag))
                ) && 
                (
                    this.LockFlag == input.LockFlag ||
                    this.LockFlag.Equals(input.LockFlag)
                ) && 
                (
                    this.VoidDate == input.VoidDate ||
                    (this.VoidDate != null &&
                    this.VoidDate.Equals(input.VoidDate))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.LastPrintDate == input.LastPrintDate ||
                    (this.LastPrintDate != null &&
                    this.LastPrintDate.Equals(input.LastPrintDate))
                ) && 
                (
                    this.ContactFirstName == input.ContactFirstName ||
                    (this.ContactFirstName != null &&
                    this.ContactFirstName.Equals(input.ContactFirstName))
                ) && 
                (
                    this.ContactLastName == input.ContactLastName ||
                    (this.ContactLastName != null &&
                    this.ContactLastName.Equals(input.ContactLastName))
                ) && 
                (
                    this.ReservationLocation == input.ReservationLocation ||
                    (this.ReservationLocation != null &&
                    this.ReservationLocation.Equals(input.ReservationLocation))
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.ExecutiveSeriesInvoiceNumber == input.ExecutiveSeriesInvoiceNumber ||
                    this.ExecutiveSeriesInvoiceNumber.Equals(input.ExecutiveSeriesInvoiceNumber)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.InvoiceDetails == input.InvoiceDetails ||
                    this.InvoiceDetails != null &&
                    input.InvoiceDetails != null &&
                    this.InvoiceDetails.SequenceEqual(input.InvoiceDetails)
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.SyncSource == input.SyncSource ||
                    this.SyncSource.Equals(input.SyncSource)
                ) && 
                (
                    this.ReceiptDetails == input.ReceiptDetails ||
                    this.ReceiptDetails != null &&
                    input.ReceiptDetails != null &&
                    this.ReceiptDetails.SequenceEqual(input.ReceiptDetails)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InvoiceNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Company.GetHashCode();
                if (this.InvoiceDate != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                if (this.PaidDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaidDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaidAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.BatchNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BatchNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                hashCode = (hashCode * 59) + this.BaseAmount.GetHashCode();
                if (this.ArSegment1 != null)
                {
                    hashCode = (hashCode * 59) + this.ArSegment1.GetHashCode();
                }
                if (this.ArSegment2 != null)
                {
                    hashCode = (hashCode * 59) + this.ArSegment2.GetHashCode();
                }
                if (this.ArSegment3 != null)
                {
                    hashCode = (hashCode * 59) + this.ArSegment3.GetHashCode();
                }
                if (this.ArSegment4 != null)
                {
                    hashCode = (hashCode * 59) + this.ArSegment4.GetHashCode();
                }
                if (this.ArSegment5 != null)
                {
                    hashCode = (hashCode * 59) + this.ArSegment5.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentTerms.GetHashCode();
                if (this.PostFlag != null)
                {
                    hashCode = (hashCode * 59) + this.PostFlag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LockFlag.GetHashCode();
                if (this.VoidDate != null)
                {
                    hashCode = (hashCode * 59) + this.VoidDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.LastPrintDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastPrintDate.GetHashCode();
                }
                if (this.ContactFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactFirstName.GetHashCode();
                }
                if (this.ContactLastName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactLastName.GetHashCode();
                }
                if (this.ReservationLocation != null)
                {
                    hashCode = (hashCode * 59) + this.ReservationLocation.GetHashCode();
                }
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExecutiveSeriesInvoiceNumber.GetHashCode();
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.InvoiceDetails != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDetails.GetHashCode();
                }
                if (this.ModifyDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyncSource.GetHashCode();
                if (this.ReceiptDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptDetails.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BatchNumber (string) maxLength
            if (this.BatchNumber != null && this.BatchNumber.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatchNumber, length must be less than 6.", new [] { "BatchNumber" });
            }

            // BatchNumber (string) minLength
            if (this.BatchNumber != null && this.BatchNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatchNumber, length must be greater than 0.", new [] { "BatchNumber" });
            }

            // ArSegment1 (string) maxLength
            if (this.ArSegment1 != null && this.ArSegment1.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment1, length must be less than 9.", new [] { "ArSegment1" });
            }

            // ArSegment1 (string) minLength
            if (this.ArSegment1 != null && this.ArSegment1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment1, length must be greater than 0.", new [] { "ArSegment1" });
            }

            // ArSegment2 (string) maxLength
            if (this.ArSegment2 != null && this.ArSegment2.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment2, length must be less than 9.", new [] { "ArSegment2" });
            }

            // ArSegment2 (string) minLength
            if (this.ArSegment2 != null && this.ArSegment2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment2, length must be greater than 0.", new [] { "ArSegment2" });
            }

            // ArSegment3 (string) maxLength
            if (this.ArSegment3 != null && this.ArSegment3.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment3, length must be less than 9.", new [] { "ArSegment3" });
            }

            // ArSegment3 (string) minLength
            if (this.ArSegment3 != null && this.ArSegment3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment3, length must be greater than 0.", new [] { "ArSegment3" });
            }

            // ArSegment4 (string) maxLength
            if (this.ArSegment4 != null && this.ArSegment4.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment4, length must be less than 9.", new [] { "ArSegment4" });
            }

            // ArSegment4 (string) minLength
            if (this.ArSegment4 != null && this.ArSegment4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment4, length must be greater than 0.", new [] { "ArSegment4" });
            }

            // ArSegment5 (string) maxLength
            if (this.ArSegment5 != null && this.ArSegment5.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment5, length must be less than 9.", new [] { "ArSegment5" });
            }

            // ArSegment5 (string) minLength
            if (this.ArSegment5 != null && this.ArSegment5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArSegment5, length must be greater than 0.", new [] { "ArSegment5" });
            }

            // PostFlag (string) maxLength
            if (this.PostFlag != null && this.PostFlag.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostFlag, length must be less than 1.", new [] { "PostFlag" });
            }

            // PostFlag (string) minLength
            if (this.PostFlag != null && this.PostFlag.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostFlag, length must be greater than 0.", new [] { "PostFlag" });
            }

            // ContactFirstName (string) maxLength
            if (this.ContactFirstName != null && this.ContactFirstName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactFirstName, length must be less than 20.", new [] { "ContactFirstName" });
            }

            // ContactFirstName (string) minLength
            if (this.ContactFirstName != null && this.ContactFirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactFirstName, length must be greater than 0.", new [] { "ContactFirstName" });
            }

            // ContactLastName (string) maxLength
            if (this.ContactLastName != null && this.ContactLastName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactLastName, length must be less than 20.", new [] { "ContactLastName" });
            }

            // ContactLastName (string) minLength
            if (this.ContactLastName != null && this.ContactLastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactLastName, length must be greater than 0.", new [] { "ContactLastName" });
            }

            // ReservationLocation (string) maxLength
            if (this.ReservationLocation != null && this.ReservationLocation.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReservationLocation, length must be less than 50.", new [] { "ReservationLocation" });
            }

            // ReservationLocation (string) minLength
            if (this.ReservationLocation != null && this.ReservationLocation.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReservationLocation, length must be greater than 0.", new [] { "ReservationLocation" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            yield break;
        }
    }

}
