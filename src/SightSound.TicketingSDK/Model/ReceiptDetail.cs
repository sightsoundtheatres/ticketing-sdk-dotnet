/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ReceiptDetail
    /// </summary>
    [DataContract(Name = "ReceiptDetail")]
    public partial class ReceiptDetail : IEquatable<ReceiptDetail>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReceiptCompany
        /// </summary>
        [DataMember(Name = "receiptCompany", EmitDefaultValue = false)]
        public InvoiceCompany? ReceiptCompany { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceCompany
        /// </summary>
        [DataMember(Name = "invoiceCompany", EmitDefaultValue = false)]
        public InvoiceCompany? InvoiceCompany { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ReceiptDetailType? Type { get; set; }

        /// <summary>
        /// Gets or Sets GltCompany
        /// </summary>
        [DataMember(Name = "gltCompany", EmitDefaultValue = false)]
        public InvoiceCompany? GltCompany { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceiptDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptDetail" /> class.
        /// </summary>
        /// <param name="receiptNumber">receiptNumber (required).</param>
        /// <param name="seqNumber">seqNumber (required).</param>
        /// <param name="receiptCompany">receiptCompany.</param>
        /// <param name="receiptDetailStatus">receiptDetailStatus.</param>
        /// <param name="receiptDetailAmount">receiptDetailAmount.</param>
        /// <param name="date">date (required).</param>
        /// <param name="creditSegment1">creditSegment1.</param>
        /// <param name="creditSegment2">creditSegment2.</param>
        /// <param name="creditSegment3">creditSegment3.</param>
        /// <param name="creditSegment4">creditSegment4.</param>
        /// <param name="creditSegment5">creditSegment5.</param>
        /// <param name="debitSegment1">debitSegment1.</param>
        /// <param name="debitSegment2">debitSegment2.</param>
        /// <param name="debitSegment3">debitSegment3.</param>
        /// <param name="debitSegment4">debitSegment4.</param>
        /// <param name="debitSegment5">debitSegment5.</param>
        /// <param name="invoiceCompany">invoiceCompany.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="type">type.</param>
        /// <param name="gltNumber">gltNumber.</param>
        /// <param name="gltCompany">gltCompany.</param>
        /// <param name="modifyDate">modifyDate.</param>
        /// <param name="receipt">receipt.</param>
        /// <param name="invoice">invoice.</param>
        public ReceiptDetail(long receiptNumber = default(long), int seqNumber = default(int), InvoiceCompany? receiptCompany = default(InvoiceCompany?), string receiptDetailStatus = default(string), decimal receiptDetailAmount = default(decimal), DateTime date = default(DateTime), string creditSegment1 = default(string), string creditSegment2 = default(string), string creditSegment3 = default(string), string creditSegment4 = default(string), string creditSegment5 = default(string), string debitSegment1 = default(string), string debitSegment2 = default(string), string debitSegment3 = default(string), string debitSegment4 = default(string), string debitSegment5 = default(string), InvoiceCompany? invoiceCompany = default(InvoiceCompany?), long invoiceNumber = default(long), ReceiptDetailType? type = default(ReceiptDetailType?), int gltNumber = default(int), InvoiceCompany? gltCompany = default(InvoiceCompany?), DateTime modifyDate = default(DateTime), Receipt receipt = default(Receipt), Invoice invoice = default(Invoice))
        {
            this.ReceiptNumber = receiptNumber;
            this.SeqNumber = seqNumber;
            this.Date = date;
            this.ReceiptCompany = receiptCompany;
            this.ReceiptDetailStatus = receiptDetailStatus;
            this.ReceiptDetailAmount = receiptDetailAmount;
            this.CreditSegment1 = creditSegment1;
            this.CreditSegment2 = creditSegment2;
            this.CreditSegment3 = creditSegment3;
            this.CreditSegment4 = creditSegment4;
            this.CreditSegment5 = creditSegment5;
            this.DebitSegment1 = debitSegment1;
            this.DebitSegment2 = debitSegment2;
            this.DebitSegment3 = debitSegment3;
            this.DebitSegment4 = debitSegment4;
            this.DebitSegment5 = debitSegment5;
            this.InvoiceCompany = invoiceCompany;
            this.InvoiceNumber = invoiceNumber;
            this.Type = type;
            this.GltNumber = gltNumber;
            this.GltCompany = gltCompany;
            this.ModifyDate = modifyDate;
            this.Receipt = receipt;
            this.Invoice = invoice;
        }

        /// <summary>
        /// Gets or Sets ReceiptNumber
        /// </summary>
        [DataMember(Name = "receiptNumber", IsRequired = true, EmitDefaultValue = false)]
        public long ReceiptNumber { get; set; }

        /// <summary>
        /// Gets or Sets SeqNumber
        /// </summary>
        [DataMember(Name = "seqNumber", IsRequired = true, EmitDefaultValue = false)]
        public int SeqNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptDetailStatus
        /// </summary>
        [DataMember(Name = "receiptDetailStatus", EmitDefaultValue = false)]
        public string ReceiptDetailStatus { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptDetailAmount
        /// </summary>
        [DataMember(Name = "receiptDetailAmount", EmitDefaultValue = false)]
        public decimal ReceiptDetailAmount { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets CreditSegment1
        /// </summary>
        [DataMember(Name = "creditSegment1", EmitDefaultValue = false)]
        public string CreditSegment1 { get; set; }

        /// <summary>
        /// Gets or Sets CreditSegment2
        /// </summary>
        [DataMember(Name = "creditSegment2", EmitDefaultValue = false)]
        public string CreditSegment2 { get; set; }

        /// <summary>
        /// Gets or Sets CreditSegment3
        /// </summary>
        [DataMember(Name = "creditSegment3", EmitDefaultValue = false)]
        public string CreditSegment3 { get; set; }

        /// <summary>
        /// Gets or Sets CreditSegment4
        /// </summary>
        [DataMember(Name = "creditSegment4", EmitDefaultValue = false)]
        public string CreditSegment4 { get; set; }

        /// <summary>
        /// Gets or Sets CreditSegment5
        /// </summary>
        [DataMember(Name = "creditSegment5", EmitDefaultValue = false)]
        public string CreditSegment5 { get; set; }

        /// <summary>
        /// Gets or Sets DebitSegment1
        /// </summary>
        [DataMember(Name = "debitSegment1", EmitDefaultValue = false)]
        public string DebitSegment1 { get; set; }

        /// <summary>
        /// Gets or Sets DebitSegment2
        /// </summary>
        [DataMember(Name = "debitSegment2", EmitDefaultValue = false)]
        public string DebitSegment2 { get; set; }

        /// <summary>
        /// Gets or Sets DebitSegment3
        /// </summary>
        [DataMember(Name = "debitSegment3", EmitDefaultValue = false)]
        public string DebitSegment3 { get; set; }

        /// <summary>
        /// Gets or Sets DebitSegment4
        /// </summary>
        [DataMember(Name = "debitSegment4", EmitDefaultValue = false)]
        public string DebitSegment4 { get; set; }

        /// <summary>
        /// Gets or Sets DebitSegment5
        /// </summary>
        [DataMember(Name = "debitSegment5", EmitDefaultValue = false)]
        public string DebitSegment5 { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name = "invoiceNumber", EmitDefaultValue = false)]
        public long InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets GltNumber
        /// </summary>
        [DataMember(Name = "gltNumber", EmitDefaultValue = false)]
        public int GltNumber { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name = "modifyDate", EmitDefaultValue = false)]
        public DateTime ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets Receipt
        /// </summary>
        [DataMember(Name = "receipt", EmitDefaultValue = false)]
        public Receipt Receipt { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name = "invoice", EmitDefaultValue = false)]
        public Invoice Invoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceiptDetail {\n");
            sb.Append("  ReceiptNumber: ").Append(ReceiptNumber).Append("\n");
            sb.Append("  SeqNumber: ").Append(SeqNumber).Append("\n");
            sb.Append("  ReceiptCompany: ").Append(ReceiptCompany).Append("\n");
            sb.Append("  ReceiptDetailStatus: ").Append(ReceiptDetailStatus).Append("\n");
            sb.Append("  ReceiptDetailAmount: ").Append(ReceiptDetailAmount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CreditSegment1: ").Append(CreditSegment1).Append("\n");
            sb.Append("  CreditSegment2: ").Append(CreditSegment2).Append("\n");
            sb.Append("  CreditSegment3: ").Append(CreditSegment3).Append("\n");
            sb.Append("  CreditSegment4: ").Append(CreditSegment4).Append("\n");
            sb.Append("  CreditSegment5: ").Append(CreditSegment5).Append("\n");
            sb.Append("  DebitSegment1: ").Append(DebitSegment1).Append("\n");
            sb.Append("  DebitSegment2: ").Append(DebitSegment2).Append("\n");
            sb.Append("  DebitSegment3: ").Append(DebitSegment3).Append("\n");
            sb.Append("  DebitSegment4: ").Append(DebitSegment4).Append("\n");
            sb.Append("  DebitSegment5: ").Append(DebitSegment5).Append("\n");
            sb.Append("  InvoiceCompany: ").Append(InvoiceCompany).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  GltNumber: ").Append(GltNumber).Append("\n");
            sb.Append("  GltCompany: ").Append(GltCompany).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  Receipt: ").Append(Receipt).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceiptDetail);
        }

        /// <summary>
        /// Returns true if ReceiptDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceiptDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceiptDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReceiptNumber == input.ReceiptNumber ||
                    this.ReceiptNumber.Equals(input.ReceiptNumber)
                ) && 
                (
                    this.SeqNumber == input.SeqNumber ||
                    this.SeqNumber.Equals(input.SeqNumber)
                ) && 
                (
                    this.ReceiptCompany == input.ReceiptCompany ||
                    this.ReceiptCompany.Equals(input.ReceiptCompany)
                ) && 
                (
                    this.ReceiptDetailStatus == input.ReceiptDetailStatus ||
                    (this.ReceiptDetailStatus != null &&
                    this.ReceiptDetailStatus.Equals(input.ReceiptDetailStatus))
                ) && 
                (
                    this.ReceiptDetailAmount == input.ReceiptDetailAmount ||
                    this.ReceiptDetailAmount.Equals(input.ReceiptDetailAmount)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.CreditSegment1 == input.CreditSegment1 ||
                    (this.CreditSegment1 != null &&
                    this.CreditSegment1.Equals(input.CreditSegment1))
                ) && 
                (
                    this.CreditSegment2 == input.CreditSegment2 ||
                    (this.CreditSegment2 != null &&
                    this.CreditSegment2.Equals(input.CreditSegment2))
                ) && 
                (
                    this.CreditSegment3 == input.CreditSegment3 ||
                    (this.CreditSegment3 != null &&
                    this.CreditSegment3.Equals(input.CreditSegment3))
                ) && 
                (
                    this.CreditSegment4 == input.CreditSegment4 ||
                    (this.CreditSegment4 != null &&
                    this.CreditSegment4.Equals(input.CreditSegment4))
                ) && 
                (
                    this.CreditSegment5 == input.CreditSegment5 ||
                    (this.CreditSegment5 != null &&
                    this.CreditSegment5.Equals(input.CreditSegment5))
                ) && 
                (
                    this.DebitSegment1 == input.DebitSegment1 ||
                    (this.DebitSegment1 != null &&
                    this.DebitSegment1.Equals(input.DebitSegment1))
                ) && 
                (
                    this.DebitSegment2 == input.DebitSegment2 ||
                    (this.DebitSegment2 != null &&
                    this.DebitSegment2.Equals(input.DebitSegment2))
                ) && 
                (
                    this.DebitSegment3 == input.DebitSegment3 ||
                    (this.DebitSegment3 != null &&
                    this.DebitSegment3.Equals(input.DebitSegment3))
                ) && 
                (
                    this.DebitSegment4 == input.DebitSegment4 ||
                    (this.DebitSegment4 != null &&
                    this.DebitSegment4.Equals(input.DebitSegment4))
                ) && 
                (
                    this.DebitSegment5 == input.DebitSegment5 ||
                    (this.DebitSegment5 != null &&
                    this.DebitSegment5.Equals(input.DebitSegment5))
                ) && 
                (
                    this.InvoiceCompany == input.InvoiceCompany ||
                    this.InvoiceCompany.Equals(input.InvoiceCompany)
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    this.InvoiceNumber.Equals(input.InvoiceNumber)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.GltNumber == input.GltNumber ||
                    this.GltNumber.Equals(input.GltNumber)
                ) && 
                (
                    this.GltCompany == input.GltCompany ||
                    this.GltCompany.Equals(input.GltCompany)
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.Receipt == input.Receipt ||
                    (this.Receipt != null &&
                    this.Receipt.Equals(input.Receipt))
                ) && 
                (
                    this.Invoice == input.Invoice ||
                    (this.Invoice != null &&
                    this.Invoice.Equals(input.Invoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReceiptNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.SeqNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiptCompany.GetHashCode();
                if (this.ReceiptDetailStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptDetailStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReceiptDetailAmount.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.CreditSegment1 != null)
                {
                    hashCode = (hashCode * 59) + this.CreditSegment1.GetHashCode();
                }
                if (this.CreditSegment2 != null)
                {
                    hashCode = (hashCode * 59) + this.CreditSegment2.GetHashCode();
                }
                if (this.CreditSegment3 != null)
                {
                    hashCode = (hashCode * 59) + this.CreditSegment3.GetHashCode();
                }
                if (this.CreditSegment4 != null)
                {
                    hashCode = (hashCode * 59) + this.CreditSegment4.GetHashCode();
                }
                if (this.CreditSegment5 != null)
                {
                    hashCode = (hashCode * 59) + this.CreditSegment5.GetHashCode();
                }
                if (this.DebitSegment1 != null)
                {
                    hashCode = (hashCode * 59) + this.DebitSegment1.GetHashCode();
                }
                if (this.DebitSegment2 != null)
                {
                    hashCode = (hashCode * 59) + this.DebitSegment2.GetHashCode();
                }
                if (this.DebitSegment3 != null)
                {
                    hashCode = (hashCode * 59) + this.DebitSegment3.GetHashCode();
                }
                if (this.DebitSegment4 != null)
                {
                    hashCode = (hashCode * 59) + this.DebitSegment4.GetHashCode();
                }
                if (this.DebitSegment5 != null)
                {
                    hashCode = (hashCode * 59) + this.DebitSegment5.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceCompany.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.GltNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.GltCompany.GetHashCode();
                if (this.ModifyDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyDate.GetHashCode();
                }
                if (this.Receipt != null)
                {
                    hashCode = (hashCode * 59) + this.Receipt.GetHashCode();
                }
                if (this.Invoice != null)
                {
                    hashCode = (hashCode * 59) + this.Invoice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ReceiptDetailStatus (string) maxLength
            if (this.ReceiptDetailStatus != null && this.ReceiptDetailStatus.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptDetailStatus, length must be less than 2.", new [] { "ReceiptDetailStatus" });
            }

            // ReceiptDetailStatus (string) minLength
            if (this.ReceiptDetailStatus != null && this.ReceiptDetailStatus.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReceiptDetailStatus, length must be greater than 0.", new [] { "ReceiptDetailStatus" });
            }

            // CreditSegment1 (string) maxLength
            if (this.CreditSegment1 != null && this.CreditSegment1.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment1, length must be less than 9.", new [] { "CreditSegment1" });
            }

            // CreditSegment1 (string) minLength
            if (this.CreditSegment1 != null && this.CreditSegment1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment1, length must be greater than 0.", new [] { "CreditSegment1" });
            }

            // CreditSegment2 (string) maxLength
            if (this.CreditSegment2 != null && this.CreditSegment2.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment2, length must be less than 9.", new [] { "CreditSegment2" });
            }

            // CreditSegment2 (string) minLength
            if (this.CreditSegment2 != null && this.CreditSegment2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment2, length must be greater than 0.", new [] { "CreditSegment2" });
            }

            // CreditSegment3 (string) maxLength
            if (this.CreditSegment3 != null && this.CreditSegment3.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment3, length must be less than 9.", new [] { "CreditSegment3" });
            }

            // CreditSegment3 (string) minLength
            if (this.CreditSegment3 != null && this.CreditSegment3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment3, length must be greater than 0.", new [] { "CreditSegment3" });
            }

            // CreditSegment4 (string) maxLength
            if (this.CreditSegment4 != null && this.CreditSegment4.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment4, length must be less than 9.", new [] { "CreditSegment4" });
            }

            // CreditSegment4 (string) minLength
            if (this.CreditSegment4 != null && this.CreditSegment4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment4, length must be greater than 0.", new [] { "CreditSegment4" });
            }

            // CreditSegment5 (string) maxLength
            if (this.CreditSegment5 != null && this.CreditSegment5.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment5, length must be less than 9.", new [] { "CreditSegment5" });
            }

            // CreditSegment5 (string) minLength
            if (this.CreditSegment5 != null && this.CreditSegment5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditSegment5, length must be greater than 0.", new [] { "CreditSegment5" });
            }

            // DebitSegment1 (string) maxLength
            if (this.DebitSegment1 != null && this.DebitSegment1.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment1, length must be less than 9.", new [] { "DebitSegment1" });
            }

            // DebitSegment1 (string) minLength
            if (this.DebitSegment1 != null && this.DebitSegment1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment1, length must be greater than 0.", new [] { "DebitSegment1" });
            }

            // DebitSegment2 (string) maxLength
            if (this.DebitSegment2 != null && this.DebitSegment2.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment2, length must be less than 9.", new [] { "DebitSegment2" });
            }

            // DebitSegment2 (string) minLength
            if (this.DebitSegment2 != null && this.DebitSegment2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment2, length must be greater than 0.", new [] { "DebitSegment2" });
            }

            // DebitSegment3 (string) maxLength
            if (this.DebitSegment3 != null && this.DebitSegment3.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment3, length must be less than 9.", new [] { "DebitSegment3" });
            }

            // DebitSegment3 (string) minLength
            if (this.DebitSegment3 != null && this.DebitSegment3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment3, length must be greater than 0.", new [] { "DebitSegment3" });
            }

            // DebitSegment4 (string) maxLength
            if (this.DebitSegment4 != null && this.DebitSegment4.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment4, length must be less than 9.", new [] { "DebitSegment4" });
            }

            // DebitSegment4 (string) minLength
            if (this.DebitSegment4 != null && this.DebitSegment4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment4, length must be greater than 0.", new [] { "DebitSegment4" });
            }

            // DebitSegment5 (string) maxLength
            if (this.DebitSegment5 != null && this.DebitSegment5.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment5, length must be less than 9.", new [] { "DebitSegment5" });
            }

            // DebitSegment5 (string) minLength
            if (this.DebitSegment5 != null && this.DebitSegment5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebitSegment5, length must be greater than 0.", new [] { "DebitSegment5" });
            }

            yield break;
        }
    }

}
