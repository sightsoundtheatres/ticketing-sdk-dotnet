/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// CustomerPricingLevel
    /// </summary>
    [DataContract(Name = "CustomerPricingLevel")]
    public partial class CustomerPricingLevel : IEquatable<CustomerPricingLevel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PricingLevel
        /// </summary>
        [DataMember(Name = "pricingLevel", EmitDefaultValue = false)]
        public PricingLevel? PricingLevel { get; set; }

        /// <summary>
        /// Gets or Sets BookingLocation
        /// </summary>
        [DataMember(Name = "bookingLocation", EmitDefaultValue = false)]
        public BookingLocation? BookingLocation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerPricingLevel" /> class.
        /// </summary>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="pricingLevel">pricingLevel.</param>
        /// <param name="tierYear">tierYear.</param>
        /// <param name="booked">booked.</param>
        /// <param name="cancelled">cancelled.</param>
        /// <param name="slidingScaleTickets">slidingScaleTickets.</param>
        /// <param name="slidingScaleDiscount">slidingScaleDiscount.</param>
        /// <param name="tickets1">tickets1.</param>
        /// <param name="percent1">percent1.</param>
        /// <param name="tickets2">tickets2.</param>
        /// <param name="percent2">percent2.</param>
        /// <param name="tickets3">tickets3.</param>
        /// <param name="percent3">percent3.</param>
        /// <param name="tickets4">tickets4.</param>
        /// <param name="percent4">percent4.</param>
        /// <param name="tickets5">tickets5.</param>
        /// <param name="percent5">percent5.</param>
        /// <param name="salesRepId">salesRepId.</param>
        /// <param name="bookingLocation">bookingLocation.</param>
        /// <param name="postPay">postPay.</param>
        /// <param name="ticketIncrease">ticketIncrease.</param>
        /// <param name="ticketDecrease">ticketDecrease.</param>
        /// <param name="speculativeBooking">speculativeBooking.</param>
        /// <param name="customer">customer.</param>
        public CustomerPricingLevel(long customerNumber = default(long), PricingLevel? pricingLevel = default(PricingLevel?), int tierYear = default(int), int booked = default(int), int cancelled = default(int), int slidingScaleTickets = default(int), decimal slidingScaleDiscount = default(decimal), int tickets1 = default(int), decimal percent1 = default(decimal), int tickets2 = default(int), decimal percent2 = default(decimal), int tickets3 = default(int), decimal percent3 = default(decimal), int tickets4 = default(int), decimal percent4 = default(decimal), int tickets5 = default(int), decimal percent5 = default(decimal), string salesRepId = default(string), BookingLocation? bookingLocation = default(BookingLocation?), bool postPay = default(bool), int ticketIncrease = default(int), int ticketDecrease = default(int), int speculativeBooking = default(int), Customer customer = default(Customer))
        {
            this.CustomerNumber = customerNumber;
            this.PricingLevel = pricingLevel;
            this.TierYear = tierYear;
            this.Booked = booked;
            this.Cancelled = cancelled;
            this.SlidingScaleTickets = slidingScaleTickets;
            this.SlidingScaleDiscount = slidingScaleDiscount;
            this.Tickets1 = tickets1;
            this.Percent1 = percent1;
            this.Tickets2 = tickets2;
            this.Percent2 = percent2;
            this.Tickets3 = tickets3;
            this.Percent3 = percent3;
            this.Tickets4 = tickets4;
            this.Percent4 = percent4;
            this.Tickets5 = tickets5;
            this.Percent5 = percent5;
            this.SalesRepId = salesRepId;
            this.BookingLocation = bookingLocation;
            this.PostPay = postPay;
            this.TicketIncrease = ticketIncrease;
            this.TicketDecrease = ticketDecrease;
            this.SpeculativeBooking = speculativeBooking;
            this.Customer = customer;
        }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets TierYear
        /// </summary>
        [DataMember(Name = "tierYear", EmitDefaultValue = false)]
        public int TierYear { get; set; }

        /// <summary>
        /// Gets or Sets Booked
        /// </summary>
        [DataMember(Name = "booked", EmitDefaultValue = false)]
        public int Booked { get; set; }

        /// <summary>
        /// Gets or Sets Cancelled
        /// </summary>
        [DataMember(Name = "cancelled", EmitDefaultValue = false)]
        public int Cancelled { get; set; }

        /// <summary>
        /// Gets or Sets SlidingScaleTickets
        /// </summary>
        [DataMember(Name = "slidingScaleTickets", EmitDefaultValue = false)]
        public int SlidingScaleTickets { get; set; }

        /// <summary>
        /// Gets or Sets SlidingScaleDiscount
        /// </summary>
        [DataMember(Name = "slidingScaleDiscount", EmitDefaultValue = false)]
        public decimal SlidingScaleDiscount { get; set; }

        /// <summary>
        /// Gets or Sets Tickets1
        /// </summary>
        [DataMember(Name = "tickets1", EmitDefaultValue = false)]
        public int Tickets1 { get; set; }

        /// <summary>
        /// Gets or Sets Percent1
        /// </summary>
        [DataMember(Name = "percent1", EmitDefaultValue = false)]
        public decimal Percent1 { get; set; }

        /// <summary>
        /// Gets or Sets Tickets2
        /// </summary>
        [DataMember(Name = "tickets2", EmitDefaultValue = false)]
        public int Tickets2 { get; set; }

        /// <summary>
        /// Gets or Sets Percent2
        /// </summary>
        [DataMember(Name = "percent2", EmitDefaultValue = false)]
        public decimal Percent2 { get; set; }

        /// <summary>
        /// Gets or Sets Tickets3
        /// </summary>
        [DataMember(Name = "tickets3", EmitDefaultValue = false)]
        public int Tickets3 { get; set; }

        /// <summary>
        /// Gets or Sets Percent3
        /// </summary>
        [DataMember(Name = "percent3", EmitDefaultValue = false)]
        public decimal Percent3 { get; set; }

        /// <summary>
        /// Gets or Sets Tickets4
        /// </summary>
        [DataMember(Name = "tickets4", EmitDefaultValue = false)]
        public int Tickets4 { get; set; }

        /// <summary>
        /// Gets or Sets Percent4
        /// </summary>
        [DataMember(Name = "percent4", EmitDefaultValue = false)]
        public decimal Percent4 { get; set; }

        /// <summary>
        /// Gets or Sets Tickets5
        /// </summary>
        [DataMember(Name = "tickets5", EmitDefaultValue = false)]
        public int Tickets5 { get; set; }

        /// <summary>
        /// Gets or Sets Percent5
        /// </summary>
        [DataMember(Name = "percent5", EmitDefaultValue = false)]
        public decimal Percent5 { get; set; }

        /// <summary>
        /// Gets or Sets SalesRepId
        /// </summary>
        [DataMember(Name = "salesRepId", EmitDefaultValue = false)]
        public string SalesRepId { get; set; }

        /// <summary>
        /// Gets or Sets PostPay
        /// </summary>
        [DataMember(Name = "postPay", EmitDefaultValue = true)]
        public bool PostPay { get; set; }

        /// <summary>
        /// Gets or Sets TicketIncrease
        /// </summary>
        [DataMember(Name = "ticketIncrease", EmitDefaultValue = false)]
        public int TicketIncrease { get; set; }

        /// <summary>
        /// Gets or Sets TicketDecrease
        /// </summary>
        [DataMember(Name = "ticketDecrease", EmitDefaultValue = false)]
        public int TicketDecrease { get; set; }

        /// <summary>
        /// Gets or Sets SpeculativeBooking
        /// </summary>
        [DataMember(Name = "speculativeBooking", EmitDefaultValue = false)]
        public int SpeculativeBooking { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerPricingLevel {\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  PricingLevel: ").Append(PricingLevel).Append("\n");
            sb.Append("  TierYear: ").Append(TierYear).Append("\n");
            sb.Append("  Booked: ").Append(Booked).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  SlidingScaleTickets: ").Append(SlidingScaleTickets).Append("\n");
            sb.Append("  SlidingScaleDiscount: ").Append(SlidingScaleDiscount).Append("\n");
            sb.Append("  Tickets1: ").Append(Tickets1).Append("\n");
            sb.Append("  Percent1: ").Append(Percent1).Append("\n");
            sb.Append("  Tickets2: ").Append(Tickets2).Append("\n");
            sb.Append("  Percent2: ").Append(Percent2).Append("\n");
            sb.Append("  Tickets3: ").Append(Tickets3).Append("\n");
            sb.Append("  Percent3: ").Append(Percent3).Append("\n");
            sb.Append("  Tickets4: ").Append(Tickets4).Append("\n");
            sb.Append("  Percent4: ").Append(Percent4).Append("\n");
            sb.Append("  Tickets5: ").Append(Tickets5).Append("\n");
            sb.Append("  Percent5: ").Append(Percent5).Append("\n");
            sb.Append("  SalesRepId: ").Append(SalesRepId).Append("\n");
            sb.Append("  BookingLocation: ").Append(BookingLocation).Append("\n");
            sb.Append("  PostPay: ").Append(PostPay).Append("\n");
            sb.Append("  TicketIncrease: ").Append(TicketIncrease).Append("\n");
            sb.Append("  TicketDecrease: ").Append(TicketDecrease).Append("\n");
            sb.Append("  SpeculativeBooking: ").Append(SpeculativeBooking).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerPricingLevel);
        }

        /// <summary>
        /// Returns true if CustomerPricingLevel instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerPricingLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerPricingLevel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.PricingLevel == input.PricingLevel ||
                    this.PricingLevel.Equals(input.PricingLevel)
                ) && 
                (
                    this.TierYear == input.TierYear ||
                    this.TierYear.Equals(input.TierYear)
                ) && 
                (
                    this.Booked == input.Booked ||
                    this.Booked.Equals(input.Booked)
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    this.Cancelled.Equals(input.Cancelled)
                ) && 
                (
                    this.SlidingScaleTickets == input.SlidingScaleTickets ||
                    this.SlidingScaleTickets.Equals(input.SlidingScaleTickets)
                ) && 
                (
                    this.SlidingScaleDiscount == input.SlidingScaleDiscount ||
                    this.SlidingScaleDiscount.Equals(input.SlidingScaleDiscount)
                ) && 
                (
                    this.Tickets1 == input.Tickets1 ||
                    this.Tickets1.Equals(input.Tickets1)
                ) && 
                (
                    this.Percent1 == input.Percent1 ||
                    this.Percent1.Equals(input.Percent1)
                ) && 
                (
                    this.Tickets2 == input.Tickets2 ||
                    this.Tickets2.Equals(input.Tickets2)
                ) && 
                (
                    this.Percent2 == input.Percent2 ||
                    this.Percent2.Equals(input.Percent2)
                ) && 
                (
                    this.Tickets3 == input.Tickets3 ||
                    this.Tickets3.Equals(input.Tickets3)
                ) && 
                (
                    this.Percent3 == input.Percent3 ||
                    this.Percent3.Equals(input.Percent3)
                ) && 
                (
                    this.Tickets4 == input.Tickets4 ||
                    this.Tickets4.Equals(input.Tickets4)
                ) && 
                (
                    this.Percent4 == input.Percent4 ||
                    this.Percent4.Equals(input.Percent4)
                ) && 
                (
                    this.Tickets5 == input.Tickets5 ||
                    this.Tickets5.Equals(input.Tickets5)
                ) && 
                (
                    this.Percent5 == input.Percent5 ||
                    this.Percent5.Equals(input.Percent5)
                ) && 
                (
                    this.SalesRepId == input.SalesRepId ||
                    (this.SalesRepId != null &&
                    this.SalesRepId.Equals(input.SalesRepId))
                ) && 
                (
                    this.BookingLocation == input.BookingLocation ||
                    this.BookingLocation.Equals(input.BookingLocation)
                ) && 
                (
                    this.PostPay == input.PostPay ||
                    this.PostPay.Equals(input.PostPay)
                ) && 
                (
                    this.TicketIncrease == input.TicketIncrease ||
                    this.TicketIncrease.Equals(input.TicketIncrease)
                ) && 
                (
                    this.TicketDecrease == input.TicketDecrease ||
                    this.TicketDecrease.Equals(input.TicketDecrease)
                ) && 
                (
                    this.SpeculativeBooking == input.SpeculativeBooking ||
                    this.SpeculativeBooking.Equals(input.SpeculativeBooking)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.PricingLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.TierYear.GetHashCode();
                hashCode = (hashCode * 59) + this.Booked.GetHashCode();
                hashCode = (hashCode * 59) + this.Cancelled.GetHashCode();
                hashCode = (hashCode * 59) + this.SlidingScaleTickets.GetHashCode();
                hashCode = (hashCode * 59) + this.SlidingScaleDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.Tickets1.GetHashCode();
                hashCode = (hashCode * 59) + this.Percent1.GetHashCode();
                hashCode = (hashCode * 59) + this.Tickets2.GetHashCode();
                hashCode = (hashCode * 59) + this.Percent2.GetHashCode();
                hashCode = (hashCode * 59) + this.Tickets3.GetHashCode();
                hashCode = (hashCode * 59) + this.Percent3.GetHashCode();
                hashCode = (hashCode * 59) + this.Tickets4.GetHashCode();
                hashCode = (hashCode * 59) + this.Percent4.GetHashCode();
                hashCode = (hashCode * 59) + this.Tickets5.GetHashCode();
                hashCode = (hashCode * 59) + this.Percent5.GetHashCode();
                if (this.SalesRepId != null)
                {
                    hashCode = (hashCode * 59) + this.SalesRepId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BookingLocation.GetHashCode();
                hashCode = (hashCode * 59) + this.PostPay.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketIncrease.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketDecrease.GetHashCode();
                hashCode = (hashCode * 59) + this.SpeculativeBooking.GetHashCode();
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SalesRepId (string) maxLength
            if (this.SalesRepId != null && this.SalesRepId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesRepId, length must be less than 50.", new [] { "SalesRepId" });
            }

            // SalesRepId (string) minLength
            if (this.SalesRepId != null && this.SalesRepId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesRepId, length must be greater than 0.", new [] { "SalesRepId" });
            }

            yield break;
        }
    }

}
