/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract(Name = "Payment")]
    public partial class Payment : IEquatable<Payment>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name = "paymentType", IsRequired = true, EmitDefaultValue = false)]
        public ReceiptPaymentType PaymentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Payment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="paymentDate">paymentDate.</param>
        /// <param name="amount">amount.</param>
        /// <param name="paymentType">paymentType (required).</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="transSequenceNumber">transSequenceNumber.</param>
        /// <param name="checks">checks.</param>
        /// <param name="achRequest">achRequest.</param>
        /// <param name="paymentAch">paymentAch.</param>
        /// <param name="paymentCreditCard">paymentCreditCard.</param>
        /// <param name="adyenPaymentRequest">adyenPaymentRequest.</param>
        /// <param name="giftCards">giftCards.</param>
        /// <param name="storeCreditCard">storeCreditCard.</param>
        /// <param name="applyMoa">applyMoa.</param>
        /// <param name="paymentAppliedInfo">paymentAppliedInfo.</param>
        /// <param name="cashApplied">cashApplied.</param>
        /// <param name="moaApplied">moaApplied.</param>
        public Payment(DateTime paymentDate = default(DateTime), decimal amount = default(decimal), ReceiptPaymentType paymentType = default(ReceiptPaymentType), string accountNumber = default(string), long transSequenceNumber = default(long), List<PaperCheckRequest> checks = default(List<PaperCheckRequest>), ACHRequest achRequest = default(ACHRequest), PaymentAch paymentAch = default(PaymentAch), PaymentCreditCard paymentCreditCard = default(PaymentCreditCard), PaymentsRequest adyenPaymentRequest = default(PaymentsRequest), List<PaymentGiftCard> giftCards = default(List<PaymentGiftCard>), bool storeCreditCard = default(bool), bool applyMoa = default(bool), string paymentAppliedInfo = default(string), PaymentAppliedDetail cashApplied = default(PaymentAppliedDetail), PaymentAppliedDetail moaApplied = default(PaymentAppliedDetail))
        {
            this.PaymentType = paymentType;
            this.PaymentDate = paymentDate;
            this.Amount = amount;
            this.AccountNumber = accountNumber;
            this.TransSequenceNumber = transSequenceNumber;
            this.Checks = checks;
            this.AchRequest = achRequest;
            this.PaymentAch = paymentAch;
            this.PaymentCreditCard = paymentCreditCard;
            this.AdyenPaymentRequest = adyenPaymentRequest;
            this.GiftCards = giftCards;
            this.StoreCreditCard = storeCreditCard;
            this.ApplyMoa = applyMoa;
            this.PaymentAppliedInfo = paymentAppliedInfo;
            this.CashApplied = cashApplied;
            this.MoaApplied = moaApplied;
        }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name = "paymentDate", EmitDefaultValue = false)]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransSequenceNumber
        /// </summary>
        [DataMember(Name = "transSequenceNumber", EmitDefaultValue = false)]
        public long TransSequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Checks
        /// </summary>
        [DataMember(Name = "checks", EmitDefaultValue = false)]
        public List<PaperCheckRequest> Checks { get; set; }

        /// <summary>
        /// Gets or Sets AchRequest
        /// </summary>
        [DataMember(Name = "achRequest", EmitDefaultValue = false)]
        public ACHRequest AchRequest { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAch
        /// </summary>
        [DataMember(Name = "paymentAch", EmitDefaultValue = false)]
        public PaymentAch PaymentAch { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCreditCard
        /// </summary>
        [DataMember(Name = "paymentCreditCard", EmitDefaultValue = false)]
        public PaymentCreditCard PaymentCreditCard { get; set; }

        /// <summary>
        /// Gets or Sets AdyenPaymentRequest
        /// </summary>
        [DataMember(Name = "adyenPaymentRequest", EmitDefaultValue = false)]
        public PaymentsRequest AdyenPaymentRequest { get; set; }

        /// <summary>
        /// Gets or Sets GiftCards
        /// </summary>
        [DataMember(Name = "giftCards", EmitDefaultValue = false)]
        public List<PaymentGiftCard> GiftCards { get; set; }

        /// <summary>
        /// Gets or Sets StoreCreditCard
        /// </summary>
        [DataMember(Name = "storeCreditCard", EmitDefaultValue = true)]
        public bool StoreCreditCard { get; set; }

        /// <summary>
        /// Gets or Sets ApplyMoa
        /// </summary>
        [DataMember(Name = "applyMoa", EmitDefaultValue = true)]
        public bool ApplyMoa { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAppliedInfo
        /// </summary>
        [DataMember(Name = "paymentAppliedInfo", EmitDefaultValue = false)]
        public string PaymentAppliedInfo { get; set; }

        /// <summary>
        /// Gets or Sets CashApplied
        /// </summary>
        [DataMember(Name = "cashApplied", EmitDefaultValue = false)]
        public PaymentAppliedDetail CashApplied { get; set; }

        /// <summary>
        /// Gets or Sets MoaApplied
        /// </summary>
        [DataMember(Name = "moaApplied", EmitDefaultValue = false)]
        public PaymentAppliedDetail MoaApplied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  TransSequenceNumber: ").Append(TransSequenceNumber).Append("\n");
            sb.Append("  Checks: ").Append(Checks).Append("\n");
            sb.Append("  AchRequest: ").Append(AchRequest).Append("\n");
            sb.Append("  PaymentAch: ").Append(PaymentAch).Append("\n");
            sb.Append("  PaymentCreditCard: ").Append(PaymentCreditCard).Append("\n");
            sb.Append("  AdyenPaymentRequest: ").Append(AdyenPaymentRequest).Append("\n");
            sb.Append("  GiftCards: ").Append(GiftCards).Append("\n");
            sb.Append("  StoreCreditCard: ").Append(StoreCreditCard).Append("\n");
            sb.Append("  ApplyMoa: ").Append(ApplyMoa).Append("\n");
            sb.Append("  PaymentAppliedInfo: ").Append(PaymentAppliedInfo).Append("\n");
            sb.Append("  CashApplied: ").Append(CashApplied).Append("\n");
            sb.Append("  MoaApplied: ").Append(MoaApplied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    this.PaymentType.Equals(input.PaymentType)
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.TransSequenceNumber == input.TransSequenceNumber ||
                    this.TransSequenceNumber.Equals(input.TransSequenceNumber)
                ) && 
                (
                    this.Checks == input.Checks ||
                    this.Checks != null &&
                    input.Checks != null &&
                    this.Checks.SequenceEqual(input.Checks)
                ) && 
                (
                    this.AchRequest == input.AchRequest ||
                    (this.AchRequest != null &&
                    this.AchRequest.Equals(input.AchRequest))
                ) && 
                (
                    this.PaymentAch == input.PaymentAch ||
                    (this.PaymentAch != null &&
                    this.PaymentAch.Equals(input.PaymentAch))
                ) && 
                (
                    this.PaymentCreditCard == input.PaymentCreditCard ||
                    (this.PaymentCreditCard != null &&
                    this.PaymentCreditCard.Equals(input.PaymentCreditCard))
                ) && 
                (
                    this.AdyenPaymentRequest == input.AdyenPaymentRequest ||
                    (this.AdyenPaymentRequest != null &&
                    this.AdyenPaymentRequest.Equals(input.AdyenPaymentRequest))
                ) && 
                (
                    this.GiftCards == input.GiftCards ||
                    this.GiftCards != null &&
                    input.GiftCards != null &&
                    this.GiftCards.SequenceEqual(input.GiftCards)
                ) && 
                (
                    this.StoreCreditCard == input.StoreCreditCard ||
                    this.StoreCreditCard.Equals(input.StoreCreditCard)
                ) && 
                (
                    this.ApplyMoa == input.ApplyMoa ||
                    this.ApplyMoa.Equals(input.ApplyMoa)
                ) && 
                (
                    this.PaymentAppliedInfo == input.PaymentAppliedInfo ||
                    (this.PaymentAppliedInfo != null &&
                    this.PaymentAppliedInfo.Equals(input.PaymentAppliedInfo))
                ) && 
                (
                    this.CashApplied == input.CashApplied ||
                    (this.CashApplied != null &&
                    this.CashApplied.Equals(input.CashApplied))
                ) && 
                (
                    this.MoaApplied == input.MoaApplied ||
                    (this.MoaApplied != null &&
                    this.MoaApplied.Equals(input.MoaApplied))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentType.GetHashCode();
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransSequenceNumber.GetHashCode();
                if (this.Checks != null)
                {
                    hashCode = (hashCode * 59) + this.Checks.GetHashCode();
                }
                if (this.AchRequest != null)
                {
                    hashCode = (hashCode * 59) + this.AchRequest.GetHashCode();
                }
                if (this.PaymentAch != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAch.GetHashCode();
                }
                if (this.PaymentCreditCard != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentCreditCard.GetHashCode();
                }
                if (this.AdyenPaymentRequest != null)
                {
                    hashCode = (hashCode * 59) + this.AdyenPaymentRequest.GetHashCode();
                }
                if (this.GiftCards != null)
                {
                    hashCode = (hashCode * 59) + this.GiftCards.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StoreCreditCard.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplyMoa.GetHashCode();
                if (this.PaymentAppliedInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAppliedInfo.GetHashCode();
                }
                if (this.CashApplied != null)
                {
                    hashCode = (hashCode * 59) + this.CashApplied.GetHashCode();
                }
                if (this.MoaApplied != null)
                {
                    hashCode = (hashCode * 59) + this.MoaApplied.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
