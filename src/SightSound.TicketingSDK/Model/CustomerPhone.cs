/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// CustomerPhone
    /// </summary>
    [DataContract(Name = "CustomerPhone")]
    public partial class CustomerPhone : IEquatable<CustomerPhone>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        [DataMember(Name = "phoneType", IsRequired = true, EmitDefaultValue = false)]
        public PhoneType PhoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerPhone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerPhone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerPhone" /> class.
        /// </summary>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="sequenceNumber">sequenceNumber.</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        /// <param name="phoneType">phoneType (required).</param>
        /// <param name="phoneNote">phoneNote.</param>
        /// <param name="customer">customer.</param>
        public CustomerPhone(long customerNumber = default(long), long sequenceNumber = default(long), string phoneNumber = default(string), PhoneType phoneType = default(PhoneType), string phoneNote = default(string), Customer customer = default(Customer))
        {
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new ArgumentNullException("phoneNumber is a required property for CustomerPhone and cannot be null");
            }
            this.PhoneNumber = phoneNumber;
            this.PhoneType = phoneType;
            this.CustomerNumber = customerNumber;
            this.SequenceNumber = sequenceNumber;
            this.PhoneNote = phoneNote;
            this.Customer = customer;
        }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public long SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNote
        /// </summary>
        [DataMember(Name = "phoneNote", EmitDefaultValue = false)]
        public string PhoneNote { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerPhone {\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  PhoneNote: ").Append(PhoneNote).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerPhone);
        }

        /// <summary>
        /// Returns true if CustomerPhone instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerPhone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerPhone input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneType == input.PhoneType ||
                    this.PhoneType.Equals(input.PhoneType)
                ) && 
                (
                    this.PhoneNote == input.PhoneNote ||
                    (this.PhoneNote != null &&
                    this.PhoneNote.Equals(input.PhoneNote))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhoneType.GetHashCode();
                if (this.PhoneNote != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNote.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be greater than 0.", new [] { "PhoneNumber" });
            }

            // PhoneNote (string) maxLength
            if (this.PhoneNote != null && this.PhoneNote.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNote, length must be less than 30.", new [] { "PhoneNote" });
            }

            // PhoneNote (string) minLength
            if (this.PhoneNote != null && this.PhoneNote.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNote, length must be greater than 0.", new [] { "PhoneNote" });
            }

            yield break;
        }
    }

}
