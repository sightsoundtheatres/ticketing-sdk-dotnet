/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// PaymentGiftCard
    /// </summary>
    [DataContract(Name = "PaymentGiftCard")]
    public partial class PaymentGiftCard : IEquatable<PaymentGiftCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGiftCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentGiftCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGiftCard" /> class.
        /// </summary>
        /// <param name="balance">balance.</param>
        /// <param name="amountToCharge">amountToCharge.</param>
        /// <param name="cardNumber">cardNumber (required).</param>
        /// <param name="pspReference">pspReference.</param>
        /// <param name="merchantReference">merchantReference.</param>
        /// <param name="applied">applied.</param>
        public PaymentGiftCard(decimal balance = default(decimal), decimal amountToCharge = default(decimal), string cardNumber = default(string), string pspReference = default(string), string merchantReference = default(string), bool applied = default(bool))
        {
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new ArgumentNullException("cardNumber is a required property for PaymentGiftCard and cannot be null");
            }
            this.CardNumber = cardNumber;
            this.Balance = balance;
            this.AmountToCharge = amountToCharge;
            this.PspReference = pspReference;
            this.MerchantReference = merchantReference;
            this.Applied = applied;
        }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public decimal Balance { get; set; }

        /// <summary>
        /// Gets or Sets AmountToCharge
        /// </summary>
        [DataMember(Name = "amountToCharge", EmitDefaultValue = false)]
        public decimal AmountToCharge { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "cardNumber", IsRequired = true, EmitDefaultValue = false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets PspReference
        /// </summary>
        [DataMember(Name = "pspReference", EmitDefaultValue = false)]
        public string PspReference { get; set; }

        /// <summary>
        /// Gets or Sets MerchantReference
        /// </summary>
        [DataMember(Name = "merchantReference", EmitDefaultValue = false)]
        public string MerchantReference { get; set; }

        /// <summary>
        /// Gets or Sets Applied
        /// </summary>
        [DataMember(Name = "applied", EmitDefaultValue = true)]
        public bool Applied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentGiftCard {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  AmountToCharge: ").Append(AmountToCharge).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  PspReference: ").Append(PspReference).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentGiftCard);
        }

        /// <summary>
        /// Returns true if PaymentGiftCard instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentGiftCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentGiftCard input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && 
                (
                    this.AmountToCharge == input.AmountToCharge ||
                    this.AmountToCharge.Equals(input.AmountToCharge)
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.PspReference == input.PspReference ||
                    (this.PspReference != null &&
                    this.PspReference.Equals(input.PspReference))
                ) && 
                (
                    this.MerchantReference == input.MerchantReference ||
                    (this.MerchantReference != null &&
                    this.MerchantReference.Equals(input.MerchantReference))
                ) && 
                (
                    this.Applied == input.Applied ||
                    this.Applied.Equals(input.Applied)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountToCharge.GetHashCode();
                if (this.CardNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CardNumber.GetHashCode();
                }
                if (this.PspReference != null)
                {
                    hashCode = (hashCode * 59) + this.PspReference.GetHashCode();
                }
                if (this.MerchantReference != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Applied.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
