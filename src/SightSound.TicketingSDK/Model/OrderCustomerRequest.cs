/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// OrderCustomerRequest
    /// </summary>
    [DataContract(Name = "OrderCustomerRequest")]
    public partial class OrderCustomerRequest : IEquatable<OrderCustomerRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        [DataMember(Name = "phoneType", EmitDefaultValue = false)]
        public PhoneType? PhoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCustomerRequest" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneType">phoneType.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="organizationName">organizationName.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="emailList">emailList.</param>
        /// <param name="websiteCustomerSearchRequest">websiteCustomerSearchRequest.</param>
        public OrderCustomerRequest(string firstName = default(string), string lastName = default(string), string phoneNumber = default(string), PhoneType? phoneType = default(PhoneType?), string emailAddress = default(string), string organizationName = default(string), AddressExtended billingAddress = default(AddressExtended), AddressExtended shippingAddress = default(AddressExtended), bool emailList = default(bool), CreateWebsiteCustomerRequest websiteCustomerSearchRequest = default(CreateWebsiteCustomerRequest))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.PhoneNumber = phoneNumber;
            this.PhoneType = phoneType;
            this.EmailAddress = emailAddress;
            this.OrganizationName = organizationName;
            this.BillingAddress = billingAddress;
            this.ShippingAddress = shippingAddress;
            this.EmailList = emailList;
            this.WebsiteCustomerSearchRequest = websiteCustomerSearchRequest;
        }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name = "organizationName", EmitDefaultValue = false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", EmitDefaultValue = false)]
        public AddressExtended BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shippingAddress", EmitDefaultValue = false)]
        public AddressExtended ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets EmailList
        /// </summary>
        [DataMember(Name = "emailList", EmitDefaultValue = true)]
        public bool EmailList { get; set; }

        /// <summary>
        /// Gets or Sets WebsiteCustomerSearchRequest
        /// </summary>
        [DataMember(Name = "websiteCustomerSearchRequest", EmitDefaultValue = false)]
        public CreateWebsiteCustomerRequest WebsiteCustomerSearchRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCustomerRequest {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  EmailList: ").Append(EmailList).Append("\n");
            sb.Append("  WebsiteCustomerSearchRequest: ").Append(WebsiteCustomerSearchRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCustomerRequest);
        }

        /// <summary>
        /// Returns true if OrderCustomerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCustomerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCustomerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneType == input.PhoneType ||
                    this.PhoneType.Equals(input.PhoneType)
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.EmailList == input.EmailList ||
                    this.EmailList.Equals(input.EmailList)
                ) && 
                (
                    this.WebsiteCustomerSearchRequest == input.WebsiteCustomerSearchRequest ||
                    (this.WebsiteCustomerSearchRequest != null &&
                    this.WebsiteCustomerSearchRequest.Equals(input.WebsiteCustomerSearchRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhoneType.GetHashCode();
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.OrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationName.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.ShippingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailList.GetHashCode();
                if (this.WebsiteCustomerSearchRequest != null)
                {
                    hashCode = (hashCode * 59) + this.WebsiteCustomerSearchRequest.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FirstName (string) pattern
            Regex regexFirstName = new Regex(@"^[a-zA-Z0-9\\s\\-&]*", RegexOptions.CultureInvariant);
            if (false == regexFirstName.Match(this.FirstName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, must match a pattern of " + regexFirstName, new [] { "FirstName" });
            }

            // LastName (string) pattern
            Regex regexLastName = new Regex(@"^[a-zA-Z0-9\\s\\-&]*", RegexOptions.CultureInvariant);
            if (false == regexLastName.Match(this.LastName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, must match a pattern of " + regexLastName, new [] { "LastName" });
            }

            // OrganizationName (string) pattern
            Regex regexOrganizationName = new Regex(@"^[a-zA-Z0-9\\s\\-&]*", RegexOptions.CultureInvariant);
            if (false == regexOrganizationName.Match(this.OrganizationName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationName, must match a pattern of " + regexOrganizationName, new [] { "OrganizationName" });
            }

            yield break;
        }
    }

}
