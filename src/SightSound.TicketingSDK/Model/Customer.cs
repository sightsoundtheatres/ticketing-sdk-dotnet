/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract(Name = "Customer")]
    public partial class Customer : IEquatable<Customer>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public CustomerType Type { get; set; }

        /// <summary>
        /// Gets or Sets OldCustTypeCode
        /// </summary>
        [DataMember(Name = "oldCustTypeCode", EmitDefaultValue = false)]
        public OldCustomerType? OldCustTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets TicketDelivery
        /// </summary>
        [DataMember(Name = "ticketDelivery", EmitDefaultValue = false)]
        public TicketBatch? TicketDelivery { get; set; }

        /// <summary>
        /// Gets or Sets CustomerTypeResponse
        /// </summary>
        [DataMember(Name = "customerTypeResponse", EmitDefaultValue = false)]
        public CustomerTypeResponse? CustomerTypeResponse { get; set; }

        /// <summary>
        /// Gets or Sets AddressVerifiedStatus
        /// </summary>
        [DataMember(Name = "addressVerifiedStatus", EmitDefaultValue = false)]
        public AddressVerifyStatus? AddressVerifiedStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Customer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="email">email.</param>
        /// <param name="mailingList">mailingList.</param>
        /// <param name="comments">comments.</param>
        /// <param name="corpIdExpirationDate">corpIdExpirationDate.</param>
        /// <param name="lastBookingDate">lastBookingDate.</param>
        /// <param name="numberBookedCurrYear">numberBookedCurrYear.</param>
        /// <param name="numberCanceledCurrYear">numberCanceledCurrYear.</param>
        /// <param name="numberBookedLastYear">numberBookedLastYear.</param>
        /// <param name="numberCanceledLastYear">numberCanceledLastYear.</param>
        /// <param name="numberBookedNextYear">numberBookedNextYear.</param>
        /// <param name="numberCanceledNextYear">numberCanceledNextYear.</param>
        /// <param name="addUserId">addUserId.</param>
        /// <param name="addDate">addDate.</param>
        /// <param name="active">active.</param>
        /// <param name="type">type (required).</param>
        /// <param name="sourceCode">sourceCode.</param>
        /// <param name="additionalDiscPercent">additionalDiscPercent.</param>
        /// <param name="corpIdNumber">corpIdNumber.</param>
        /// <param name="corpAffiliatedCode">corpAffiliatedCode.</param>
        /// <param name="sourceCodeComments">sourceCodeComments.</param>
        /// <param name="emailList">emailList.</param>
        /// <param name="emailStyle">emailStyle.</param>
        /// <param name="rpOfficeNumber">rpOfficeNumber.</param>
        /// <param name="taxExempt">taxExempt.</param>
        /// <param name="oldCustTypeCode">oldCustTypeCode.</param>
        /// <param name="callList">callList.</param>
        /// <param name="textList">textList.</param>
        /// <param name="address">address (required).</param>
        /// <param name="sysProcessDate">sysProcessDate.</param>
        /// <param name="sysStatusCode">sysStatusCode.</param>
        /// <param name="sysCheckDate">sysCheckDate.</param>
        /// <param name="sysCheckResult">sysCheckResult.</param>
        /// <param name="club">club.</param>
        /// <param name="title">title.</param>
        /// <param name="birthDay">birthDay.</param>
        /// <param name="birthMonth">birthMonth.</param>
        /// <param name="birthYear">birthYear.</param>
        /// <param name="press">press.</param>
        /// <param name="clubMemberCancelComments">clubMemberCancelComments.</param>
        /// <param name="ageRange">ageRange.</param>
        /// <param name="clubCancelDate">clubCancelDate.</param>
        /// <param name="specialNeeds">specialNeeds.</param>
        /// <param name="addressVerifyDate">addressVerifyDate.</param>
        /// <param name="custDetail">custDetail.</param>
        /// <param name="fitFrozen">fitFrozen.</param>
        /// <param name="fitMaxTickets">fitMaxTickets.</param>
        /// <param name="fitMaxTicketsEmailSent">fitMaxTicketsEmailSent.</param>
        /// <param name="addressVerifyFailDate">addressVerifyFailDate.</param>
        /// <param name="fitPrepaidThresholdEmail">fitPrepaidThresholdEmail.</param>
        /// <param name="fitFrozenOverride">fitFrozenOverride.</param>
        /// <param name="passPhrase">passPhrase.</param>
        /// <param name="extraCompTickets">extraCompTickets.</param>
        /// <param name="empNumber">empNumber.</param>
        /// <param name="bookUntilDate">bookUntilDate.</param>
        /// <param name="checkPayment">checkPayment.</param>
        /// <param name="emailPaperwork">emailPaperwork.</param>
        /// <param name="emailVerifiedDate">emailVerifiedDate.</param>
        /// <param name="church">church.</param>
        /// <param name="congregationSize">congregationSize.</param>
        /// <param name="marketingPartner">marketingPartner.</param>
        /// <param name="immediateSeatAssign">immediateSeatAssign.</param>
        /// <param name="printETicket">printETicket.</param>
        /// <param name="slidingScaleDiscount">slidingScaleDiscount.</param>
        /// <param name="groupNumber">groupNumber.</param>
        /// <param name="tier">tier.</param>
        /// <param name="tour">tour.</param>
        /// <param name="receptive">receptive.</param>
        /// <param name="employeeExitDate">employeeExitDate.</param>
        /// <param name="group">group.</param>
        /// <param name="lastShowCode">lastShowCode.</param>
        /// <param name="lastShowDate">lastShowDate.</param>
        /// <param name="lastShowTickets">lastShowTickets.</param>
        /// <param name="lastShowOrderNumber">lastShowOrderNumber.</param>
        /// <param name="company">company.</param>
        /// <param name="uspsAddressError">uspsAddressError.</param>
        /// <param name="ticketDelivery">ticketDelivery.</param>
        /// <param name="documents">documents.</param>
        /// <param name="upsAddresses">upsAddresses.</param>
        /// <param name="prices">prices.</param>
        /// <param name="phones">phones.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="customerAttributes">customerAttributes.</param>
        /// <param name="orders">orders.</param>
        /// <param name="notes">notes.</param>
        /// <param name="additionalContacts">additionalContacts.</param>
        /// <param name="customerNameToDisplay">customerNameToDisplay.</param>
        /// <param name="customerTypeResponse">customerTypeResponse.</param>
        /// <param name="defaultPhoneNumber">defaultPhoneNumber.</param>
        /// <param name="reseller">reseller.</param>
        /// <param name="primaryContact">primaryContact.</param>
        /// <param name="generalConsumer">generalConsumer.</param>
        /// <param name="accountFrozen">accountFrozen.</param>
        /// <param name="employee">employee.</param>
        /// <param name="addressVerifiedStatus">addressVerifiedStatus.</param>
        /// <param name="organization">organization.</param>
        public Customer(long customerNumber = default(long), string companyName = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), bool mailingList = default(bool), string comments = default(string), DateTime corpIdExpirationDate = default(DateTime), DateTime lastBookingDate = default(DateTime), int numberBookedCurrYear = default(int), int numberCanceledCurrYear = default(int), int numberBookedLastYear = default(int), int numberCanceledLastYear = default(int), int numberBookedNextYear = default(int), int numberCanceledNextYear = default(int), string addUserId = default(string), DateTime addDate = default(DateTime), bool active = default(bool), CustomerType type = default(CustomerType), string sourceCode = default(string), decimal additionalDiscPercent = default(decimal), string corpIdNumber = default(string), string corpAffiliatedCode = default(string), string sourceCodeComments = default(string), bool emailList = default(bool), string emailStyle = default(string), string rpOfficeNumber = default(string), bool taxExempt = default(bool), OldCustomerType? oldCustTypeCode = default(OldCustomerType?), bool callList = default(bool), bool textList = default(bool), AddressExtended address = default(AddressExtended), DateTime sysProcessDate = default(DateTime), string sysStatusCode = default(string), DateTime sysCheckDate = default(DateTime), string sysCheckResult = default(string), bool club = default(bool), string title = default(string), string birthDay = default(string), string birthMonth = default(string), string birthYear = default(string), bool press = default(bool), string clubMemberCancelComments = default(string), string ageRange = default(string), DateTime clubCancelDate = default(DateTime), bool specialNeeds = default(bool), DateTime addressVerifyDate = default(DateTime), bool custDetail = default(bool), bool fitFrozen = default(bool), int fitMaxTickets = default(int), bool fitMaxTicketsEmailSent = default(bool), DateTime addressVerifyFailDate = default(DateTime), bool fitPrepaidThresholdEmail = default(bool), bool fitFrozenOverride = default(bool), string passPhrase = default(string), int extraCompTickets = default(int), long empNumber = default(long), DateTime bookUntilDate = default(DateTime), bool checkPayment = default(bool), bool emailPaperwork = default(bool), DateTime emailVerifiedDate = default(DateTime), bool church = default(bool), int congregationSize = default(int), bool marketingPartner = default(bool), bool immediateSeatAssign = default(bool), bool printETicket = default(bool), bool slidingScaleDiscount = default(bool), int groupNumber = default(int), bool tier = default(bool), bool tour = default(bool), bool receptive = default(bool), DateTime employeeExitDate = default(DateTime), bool group = default(bool), string lastShowCode = default(string), DateTime lastShowDate = default(DateTime), string lastShowTickets = default(string), int lastShowOrderNumber = default(int), bool company = default(bool), string uspsAddressError = default(string), TicketBatch? ticketDelivery = default(TicketBatch?), List<CustomerDocument> documents = default(List<CustomerDocument>), List<CustomerUPSAddress> upsAddresses = default(List<CustomerUPSAddress>), List<CustomerPricingLevel> prices = default(List<CustomerPricingLevel>), List<CustomerPhone> phones = default(List<CustomerPhone>), List<CustomerContactInfo> contacts = default(List<CustomerContactInfo>), List<CustomerAttribute> customerAttributes = default(List<CustomerAttribute>), List<Order> orders = default(List<Order>), List<Note> notes = default(List<Note>), List<CustomerContactInfo> additionalContacts = default(List<CustomerContactInfo>), string customerNameToDisplay = default(string), CustomerTypeResponse? customerTypeResponse = default(CustomerTypeResponse?), string defaultPhoneNumber = default(string), bool reseller = default(bool), CustomerContactInfo primaryContact = default(CustomerContactInfo), bool generalConsumer = default(bool), bool accountFrozen = default(bool), bool employee = default(bool), AddressVerifyStatus? addressVerifiedStatus = default(AddressVerifyStatus?), bool organization = default(bool))
        {
            this.Type = type;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for Customer and cannot be null");
            }
            this.Address = address;
            this.CustomerNumber = customerNumber;
            this.CompanyName = companyName;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.MailingList = mailingList;
            this.Comments = comments;
            this.CorpIdExpirationDate = corpIdExpirationDate;
            this.LastBookingDate = lastBookingDate;
            this.NumberBookedCurrYear = numberBookedCurrYear;
            this.NumberCanceledCurrYear = numberCanceledCurrYear;
            this.NumberBookedLastYear = numberBookedLastYear;
            this.NumberCanceledLastYear = numberCanceledLastYear;
            this.NumberBookedNextYear = numberBookedNextYear;
            this.NumberCanceledNextYear = numberCanceledNextYear;
            this.AddUserId = addUserId;
            this.AddDate = addDate;
            this.Active = active;
            this.SourceCode = sourceCode;
            this.AdditionalDiscPercent = additionalDiscPercent;
            this.CorpIdNumber = corpIdNumber;
            this.CorpAffiliatedCode = corpAffiliatedCode;
            this.SourceCodeComments = sourceCodeComments;
            this.EmailList = emailList;
            this.EmailStyle = emailStyle;
            this.RpOfficeNumber = rpOfficeNumber;
            this.TaxExempt = taxExempt;
            this.OldCustTypeCode = oldCustTypeCode;
            this.CallList = callList;
            this.TextList = textList;
            this.SysProcessDate = sysProcessDate;
            this.SysStatusCode = sysStatusCode;
            this.SysCheckDate = sysCheckDate;
            this.SysCheckResult = sysCheckResult;
            this.Club = club;
            this.Title = title;
            this.BirthDay = birthDay;
            this.BirthMonth = birthMonth;
            this.BirthYear = birthYear;
            this.Press = press;
            this.ClubMemberCancelComments = clubMemberCancelComments;
            this.AgeRange = ageRange;
            this.ClubCancelDate = clubCancelDate;
            this.SpecialNeeds = specialNeeds;
            this.AddressVerifyDate = addressVerifyDate;
            this.CustDetail = custDetail;
            this.FitFrozen = fitFrozen;
            this.FitMaxTickets = fitMaxTickets;
            this.FitMaxTicketsEmailSent = fitMaxTicketsEmailSent;
            this.AddressVerifyFailDate = addressVerifyFailDate;
            this.FitPrepaidThresholdEmail = fitPrepaidThresholdEmail;
            this.FitFrozenOverride = fitFrozenOverride;
            this.PassPhrase = passPhrase;
            this.ExtraCompTickets = extraCompTickets;
            this.EmpNumber = empNumber;
            this.BookUntilDate = bookUntilDate;
            this.CheckPayment = checkPayment;
            this.EmailPaperwork = emailPaperwork;
            this.EmailVerifiedDate = emailVerifiedDate;
            this.Church = church;
            this.CongregationSize = congregationSize;
            this.MarketingPartner = marketingPartner;
            this.ImmediateSeatAssign = immediateSeatAssign;
            this.PrintETicket = printETicket;
            this.SlidingScaleDiscount = slidingScaleDiscount;
            this.GroupNumber = groupNumber;
            this.Tier = tier;
            this.Tour = tour;
            this.Receptive = receptive;
            this.EmployeeExitDate = employeeExitDate;
            this.Group = group;
            this.LastShowCode = lastShowCode;
            this.LastShowDate = lastShowDate;
            this.LastShowTickets = lastShowTickets;
            this.LastShowOrderNumber = lastShowOrderNumber;
            this.Company = company;
            this.UspsAddressError = uspsAddressError;
            this.TicketDelivery = ticketDelivery;
            this.Documents = documents;
            this.UpsAddresses = upsAddresses;
            this.Prices = prices;
            this.Phones = phones;
            this.Contacts = contacts;
            this.CustomerAttributes = customerAttributes;
            this.Orders = orders;
            this.Notes = notes;
            this.AdditionalContacts = additionalContacts;
            this.CustomerNameToDisplay = customerNameToDisplay;
            this.CustomerTypeResponse = customerTypeResponse;
            this.DefaultPhoneNumber = defaultPhoneNumber;
            this.Reseller = reseller;
            this.PrimaryContact = primaryContact;
            this.GeneralConsumer = generalConsumer;
            this.AccountFrozen = accountFrozen;
            this.Employee = employee;
            this.AddressVerifiedStatus = addressVerifiedStatus;
            this.Organization = organization;
        }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets MailingList
        /// </summary>
        [DataMember(Name = "mailingList", EmitDefaultValue = true)]
        public bool MailingList { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets CorpIdExpirationDate
        /// </summary>
        [DataMember(Name = "corpIdExpirationDate", EmitDefaultValue = false)]
        public DateTime CorpIdExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets LastBookingDate
        /// </summary>
        [DataMember(Name = "lastBookingDate", EmitDefaultValue = false)]
        public DateTime LastBookingDate { get; set; }

        /// <summary>
        /// Gets or Sets NumberBookedCurrYear
        /// </summary>
        [DataMember(Name = "numberBookedCurrYear", EmitDefaultValue = false)]
        public int NumberBookedCurrYear { get; set; }

        /// <summary>
        /// Gets or Sets NumberCanceledCurrYear
        /// </summary>
        [DataMember(Name = "numberCanceledCurrYear", EmitDefaultValue = false)]
        public int NumberCanceledCurrYear { get; set; }

        /// <summary>
        /// Gets or Sets NumberBookedLastYear
        /// </summary>
        [DataMember(Name = "numberBookedLastYear", EmitDefaultValue = false)]
        public int NumberBookedLastYear { get; set; }

        /// <summary>
        /// Gets or Sets NumberCanceledLastYear
        /// </summary>
        [DataMember(Name = "numberCanceledLastYear", EmitDefaultValue = false)]
        public int NumberCanceledLastYear { get; set; }

        /// <summary>
        /// Gets or Sets NumberBookedNextYear
        /// </summary>
        [DataMember(Name = "numberBookedNextYear", EmitDefaultValue = false)]
        public int NumberBookedNextYear { get; set; }

        /// <summary>
        /// Gets or Sets NumberCanceledNextYear
        /// </summary>
        [DataMember(Name = "numberCanceledNextYear", EmitDefaultValue = false)]
        public int NumberCanceledNextYear { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets AddDate
        /// </summary>
        [DataMember(Name = "addDate", EmitDefaultValue = false)]
        public DateTime AddDate { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets SourceCode
        /// </summary>
        [DataMember(Name = "sourceCode", EmitDefaultValue = false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDiscPercent
        /// </summary>
        [DataMember(Name = "additionalDiscPercent", EmitDefaultValue = false)]
        public decimal AdditionalDiscPercent { get; set; }

        /// <summary>
        /// Gets or Sets CorpIdNumber
        /// </summary>
        [DataMember(Name = "corpIdNumber", EmitDefaultValue = false)]
        public string CorpIdNumber { get; set; }

        /// <summary>
        /// Gets or Sets CorpAffiliatedCode
        /// </summary>
        [DataMember(Name = "corpAffiliatedCode", EmitDefaultValue = false)]
        public string CorpAffiliatedCode { get; set; }

        /// <summary>
        /// Gets or Sets SourceCodeComments
        /// </summary>
        [DataMember(Name = "sourceCodeComments", EmitDefaultValue = false)]
        public string SourceCodeComments { get; set; }

        /// <summary>
        /// Gets or Sets EmailList
        /// </summary>
        [DataMember(Name = "emailList", EmitDefaultValue = true)]
        public bool EmailList { get; set; }

        /// <summary>
        /// Gets or Sets EmailStyle
        /// </summary>
        [DataMember(Name = "emailStyle", EmitDefaultValue = false)]
        public string EmailStyle { get; set; }

        /// <summary>
        /// Gets or Sets RpOfficeNumber
        /// </summary>
        [DataMember(Name = "rpOfficeNumber", EmitDefaultValue = false)]
        public string RpOfficeNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxExempt
        /// </summary>
        [DataMember(Name = "taxExempt", EmitDefaultValue = true)]
        [Obsolete]
        public bool TaxExempt { get; set; }

        /// <summary>
        /// Gets or Sets CallList
        /// </summary>
        [DataMember(Name = "callList", EmitDefaultValue = true)]
        public bool CallList { get; set; }

        /// <summary>
        /// Gets or Sets TextList
        /// </summary>
        [DataMember(Name = "textList", EmitDefaultValue = true)]
        public bool TextList { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
        public AddressExtended Address { get; set; }

        /// <summary>
        /// Gets or Sets SysProcessDate
        /// </summary>
        [DataMember(Name = "sysProcessDate", EmitDefaultValue = false)]
        public DateTime SysProcessDate { get; set; }

        /// <summary>
        /// Gets or Sets SysStatusCode
        /// </summary>
        [DataMember(Name = "sysStatusCode", EmitDefaultValue = false)]
        public string SysStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets SysCheckDate
        /// </summary>
        [DataMember(Name = "sysCheckDate", EmitDefaultValue = false)]
        public DateTime SysCheckDate { get; set; }

        /// <summary>
        /// Gets or Sets SysCheckResult
        /// </summary>
        [DataMember(Name = "sysCheckResult", EmitDefaultValue = false)]
        public string SysCheckResult { get; set; }

        /// <summary>
        /// Gets or Sets Club
        /// </summary>
        [DataMember(Name = "club", EmitDefaultValue = true)]
        public bool Club { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets BirthDay
        /// </summary>
        [DataMember(Name = "birthDay", EmitDefaultValue = false)]
        public string BirthDay { get; set; }

        /// <summary>
        /// Gets or Sets BirthMonth
        /// </summary>
        [DataMember(Name = "birthMonth", EmitDefaultValue = false)]
        public string BirthMonth { get; set; }

        /// <summary>
        /// Gets or Sets BirthYear
        /// </summary>
        [DataMember(Name = "birthYear", EmitDefaultValue = false)]
        public string BirthYear { get; set; }

        /// <summary>
        /// Gets or Sets Press
        /// </summary>
        [DataMember(Name = "press", EmitDefaultValue = true)]
        public bool Press { get; set; }

        /// <summary>
        /// Gets or Sets ClubMemberCancelComments
        /// </summary>
        [DataMember(Name = "clubMemberCancelComments", EmitDefaultValue = false)]
        public string ClubMemberCancelComments { get; set; }

        /// <summary>
        /// Gets or Sets AgeRange
        /// </summary>
        [DataMember(Name = "ageRange", EmitDefaultValue = false)]
        public string AgeRange { get; set; }

        /// <summary>
        /// Gets or Sets ClubCancelDate
        /// </summary>
        [DataMember(Name = "clubCancelDate", EmitDefaultValue = false)]
        public DateTime ClubCancelDate { get; set; }

        /// <summary>
        /// Gets or Sets SpecialNeeds
        /// </summary>
        [DataMember(Name = "specialNeeds", EmitDefaultValue = true)]
        public bool SpecialNeeds { get; set; }

        /// <summary>
        /// Gets or Sets AddressVerifyDate
        /// </summary>
        [DataMember(Name = "addressVerifyDate", EmitDefaultValue = false)]
        public DateTime AddressVerifyDate { get; set; }

        /// <summary>
        /// Gets or Sets CustDetail
        /// </summary>
        [DataMember(Name = "custDetail", EmitDefaultValue = true)]
        public bool CustDetail { get; set; }

        /// <summary>
        /// Gets or Sets FitFrozen
        /// </summary>
        [DataMember(Name = "fitFrozen", EmitDefaultValue = true)]
        public bool FitFrozen { get; set; }

        /// <summary>
        /// Gets or Sets FitMaxTickets
        /// </summary>
        [DataMember(Name = "fitMaxTickets", EmitDefaultValue = false)]
        public int FitMaxTickets { get; set; }

        /// <summary>
        /// Gets or Sets FitMaxTicketsEmailSent
        /// </summary>
        [DataMember(Name = "fitMaxTicketsEmailSent", EmitDefaultValue = true)]
        public bool FitMaxTicketsEmailSent { get; set; }

        /// <summary>
        /// Gets or Sets AddressVerifyFailDate
        /// </summary>
        [DataMember(Name = "addressVerifyFailDate", EmitDefaultValue = false)]
        public DateTime AddressVerifyFailDate { get; set; }

        /// <summary>
        /// Gets or Sets FitPrepaidThresholdEmail
        /// </summary>
        [DataMember(Name = "fitPrepaidThresholdEmail", EmitDefaultValue = true)]
        public bool FitPrepaidThresholdEmail { get; set; }

        /// <summary>
        /// Gets or Sets FitFrozenOverride
        /// </summary>
        [DataMember(Name = "fitFrozenOverride", EmitDefaultValue = true)]
        public bool FitFrozenOverride { get; set; }

        /// <summary>
        /// Gets or Sets PassPhrase
        /// </summary>
        [DataMember(Name = "passPhrase", EmitDefaultValue = false)]
        public string PassPhrase { get; set; }

        /// <summary>
        /// Gets or Sets ExtraCompTickets
        /// </summary>
        [DataMember(Name = "extraCompTickets", EmitDefaultValue = false)]
        public int ExtraCompTickets { get; set; }

        /// <summary>
        /// Gets or Sets EmpNumber
        /// </summary>
        [DataMember(Name = "empNumber", EmitDefaultValue = false)]
        public long EmpNumber { get; set; }

        /// <summary>
        /// Gets or Sets BookUntilDate
        /// </summary>
        [DataMember(Name = "bookUntilDate", EmitDefaultValue = false)]
        public DateTime BookUntilDate { get; set; }

        /// <summary>
        /// Gets or Sets CheckPayment
        /// </summary>
        [DataMember(Name = "checkPayment", EmitDefaultValue = true)]
        public bool CheckPayment { get; set; }

        /// <summary>
        /// Gets or Sets EmailPaperwork
        /// </summary>
        [DataMember(Name = "emailPaperwork", EmitDefaultValue = true)]
        public bool EmailPaperwork { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerifiedDate
        /// </summary>
        [DataMember(Name = "emailVerifiedDate", EmitDefaultValue = false)]
        public DateTime EmailVerifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets Church
        /// </summary>
        [DataMember(Name = "church", EmitDefaultValue = true)]
        public bool Church { get; set; }

        /// <summary>
        /// Gets or Sets CongregationSize
        /// </summary>
        [DataMember(Name = "congregationSize", EmitDefaultValue = false)]
        public int CongregationSize { get; set; }

        /// <summary>
        /// Gets or Sets MarketingPartner
        /// </summary>
        [DataMember(Name = "marketingPartner", EmitDefaultValue = true)]
        public bool MarketingPartner { get; set; }

        /// <summary>
        /// Gets or Sets ImmediateSeatAssign
        /// </summary>
        [DataMember(Name = "immediateSeatAssign", EmitDefaultValue = true)]
        public bool ImmediateSeatAssign { get; set; }

        /// <summary>
        /// Gets or Sets PrintETicket
        /// </summary>
        [DataMember(Name = "printETicket", EmitDefaultValue = true)]
        public bool PrintETicket { get; set; }

        /// <summary>
        /// Gets or Sets SlidingScaleDiscount
        /// </summary>
        [DataMember(Name = "slidingScaleDiscount", EmitDefaultValue = true)]
        public bool SlidingScaleDiscount { get; set; }

        /// <summary>
        /// Gets or Sets GroupNumber
        /// </summary>
        [DataMember(Name = "groupNumber", EmitDefaultValue = false)]
        public int GroupNumber { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name = "tier", EmitDefaultValue = true)]
        public bool Tier { get; set; }

        /// <summary>
        /// Gets or Sets Tour
        /// </summary>
        [DataMember(Name = "tour", EmitDefaultValue = true)]
        public bool Tour { get; set; }

        /// <summary>
        /// Gets or Sets Receptive
        /// </summary>
        [DataMember(Name = "receptive", EmitDefaultValue = true)]
        public bool Receptive { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeExitDate
        /// </summary>
        [DataMember(Name = "employeeExitDate", EmitDefaultValue = false)]
        public DateTime EmployeeExitDate { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public bool Group { get; set; }

        /// <summary>
        /// Gets or Sets LastShowCode
        /// </summary>
        [DataMember(Name = "lastShowCode", EmitDefaultValue = false)]
        public string LastShowCode { get; set; }

        /// <summary>
        /// Gets or Sets LastShowDate
        /// </summary>
        [DataMember(Name = "lastShowDate", EmitDefaultValue = false)]
        public DateTime LastShowDate { get; set; }

        /// <summary>
        /// Gets or Sets LastShowTickets
        /// </summary>
        [DataMember(Name = "lastShowTickets", EmitDefaultValue = false)]
        public string LastShowTickets { get; set; }

        /// <summary>
        /// Gets or Sets LastShowOrderNumber
        /// </summary>
        [DataMember(Name = "lastShowOrderNumber", EmitDefaultValue = false)]
        public int LastShowOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public bool Company { get; set; }

        /// <summary>
        /// Gets or Sets UspsAddressError
        /// </summary>
        [DataMember(Name = "uspsAddressError", EmitDefaultValue = false)]
        public string UspsAddressError { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public List<CustomerDocument> Documents { get; set; }

        /// <summary>
        /// Gets or Sets UpsAddresses
        /// </summary>
        [DataMember(Name = "upsAddresses", EmitDefaultValue = false)]
        public List<CustomerUPSAddress> UpsAddresses { get; set; }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public List<CustomerPricingLevel> Prices { get; set; }

        /// <summary>
        /// Gets or Sets Phones
        /// </summary>
        [DataMember(Name = "phones", EmitDefaultValue = false)]
        public List<CustomerPhone> Phones { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<CustomerContactInfo> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAttributes
        /// </summary>
        [DataMember(Name = "customerAttributes", EmitDefaultValue = false)]
        public List<CustomerAttribute> CustomerAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "orders", EmitDefaultValue = false)]
        public List<Order> Orders { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalContacts
        /// </summary>
        [DataMember(Name = "additionalContacts", EmitDefaultValue = false)]
        public List<CustomerContactInfo> AdditionalContacts { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNameToDisplay
        /// </summary>
        [DataMember(Name = "customerNameToDisplay", EmitDefaultValue = false)]
        public string CustomerNameToDisplay { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPhoneNumber
        /// </summary>
        [DataMember(Name = "defaultPhoneNumber", EmitDefaultValue = false)]
        public string DefaultPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Reseller
        /// </summary>
        [DataMember(Name = "reseller", EmitDefaultValue = true)]
        public bool Reseller { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryContact
        /// </summary>
        [DataMember(Name = "primaryContact", EmitDefaultValue = false)]
        public CustomerContactInfo PrimaryContact { get; set; }

        /// <summary>
        /// Gets or Sets GeneralConsumer
        /// </summary>
        [DataMember(Name = "generalConsumer", EmitDefaultValue = true)]
        public bool GeneralConsumer { get; set; }

        /// <summary>
        /// Gets or Sets AccountFrozen
        /// </summary>
        [DataMember(Name = "accountFrozen", EmitDefaultValue = true)]
        public bool AccountFrozen { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name = "employee", EmitDefaultValue = true)]
        public bool Employee { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = true)]
        public bool Organization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MailingList: ").Append(MailingList).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CorpIdExpirationDate: ").Append(CorpIdExpirationDate).Append("\n");
            sb.Append("  LastBookingDate: ").Append(LastBookingDate).Append("\n");
            sb.Append("  NumberBookedCurrYear: ").Append(NumberBookedCurrYear).Append("\n");
            sb.Append("  NumberCanceledCurrYear: ").Append(NumberCanceledCurrYear).Append("\n");
            sb.Append("  NumberBookedLastYear: ").Append(NumberBookedLastYear).Append("\n");
            sb.Append("  NumberCanceledLastYear: ").Append(NumberCanceledLastYear).Append("\n");
            sb.Append("  NumberBookedNextYear: ").Append(NumberBookedNextYear).Append("\n");
            sb.Append("  NumberCanceledNextYear: ").Append(NumberCanceledNextYear).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  AddDate: ").Append(AddDate).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  AdditionalDiscPercent: ").Append(AdditionalDiscPercent).Append("\n");
            sb.Append("  CorpIdNumber: ").Append(CorpIdNumber).Append("\n");
            sb.Append("  CorpAffiliatedCode: ").Append(CorpAffiliatedCode).Append("\n");
            sb.Append("  SourceCodeComments: ").Append(SourceCodeComments).Append("\n");
            sb.Append("  EmailList: ").Append(EmailList).Append("\n");
            sb.Append("  EmailStyle: ").Append(EmailStyle).Append("\n");
            sb.Append("  RpOfficeNumber: ").Append(RpOfficeNumber).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  OldCustTypeCode: ").Append(OldCustTypeCode).Append("\n");
            sb.Append("  CallList: ").Append(CallList).Append("\n");
            sb.Append("  TextList: ").Append(TextList).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  SysProcessDate: ").Append(SysProcessDate).Append("\n");
            sb.Append("  SysStatusCode: ").Append(SysStatusCode).Append("\n");
            sb.Append("  SysCheckDate: ").Append(SysCheckDate).Append("\n");
            sb.Append("  SysCheckResult: ").Append(SysCheckResult).Append("\n");
            sb.Append("  Club: ").Append(Club).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BirthDay: ").Append(BirthDay).Append("\n");
            sb.Append("  BirthMonth: ").Append(BirthMonth).Append("\n");
            sb.Append("  BirthYear: ").Append(BirthYear).Append("\n");
            sb.Append("  Press: ").Append(Press).Append("\n");
            sb.Append("  ClubMemberCancelComments: ").Append(ClubMemberCancelComments).Append("\n");
            sb.Append("  AgeRange: ").Append(AgeRange).Append("\n");
            sb.Append("  ClubCancelDate: ").Append(ClubCancelDate).Append("\n");
            sb.Append("  SpecialNeeds: ").Append(SpecialNeeds).Append("\n");
            sb.Append("  AddressVerifyDate: ").Append(AddressVerifyDate).Append("\n");
            sb.Append("  CustDetail: ").Append(CustDetail).Append("\n");
            sb.Append("  FitFrozen: ").Append(FitFrozen).Append("\n");
            sb.Append("  FitMaxTickets: ").Append(FitMaxTickets).Append("\n");
            sb.Append("  FitMaxTicketsEmailSent: ").Append(FitMaxTicketsEmailSent).Append("\n");
            sb.Append("  AddressVerifyFailDate: ").Append(AddressVerifyFailDate).Append("\n");
            sb.Append("  FitPrepaidThresholdEmail: ").Append(FitPrepaidThresholdEmail).Append("\n");
            sb.Append("  FitFrozenOverride: ").Append(FitFrozenOverride).Append("\n");
            sb.Append("  PassPhrase: ").Append(PassPhrase).Append("\n");
            sb.Append("  ExtraCompTickets: ").Append(ExtraCompTickets).Append("\n");
            sb.Append("  EmpNumber: ").Append(EmpNumber).Append("\n");
            sb.Append("  BookUntilDate: ").Append(BookUntilDate).Append("\n");
            sb.Append("  CheckPayment: ").Append(CheckPayment).Append("\n");
            sb.Append("  EmailPaperwork: ").Append(EmailPaperwork).Append("\n");
            sb.Append("  EmailVerifiedDate: ").Append(EmailVerifiedDate).Append("\n");
            sb.Append("  Church: ").Append(Church).Append("\n");
            sb.Append("  CongregationSize: ").Append(CongregationSize).Append("\n");
            sb.Append("  MarketingPartner: ").Append(MarketingPartner).Append("\n");
            sb.Append("  ImmediateSeatAssign: ").Append(ImmediateSeatAssign).Append("\n");
            sb.Append("  PrintETicket: ").Append(PrintETicket).Append("\n");
            sb.Append("  SlidingScaleDiscount: ").Append(SlidingScaleDiscount).Append("\n");
            sb.Append("  GroupNumber: ").Append(GroupNumber).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Tour: ").Append(Tour).Append("\n");
            sb.Append("  Receptive: ").Append(Receptive).Append("\n");
            sb.Append("  EmployeeExitDate: ").Append(EmployeeExitDate).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  LastShowCode: ").Append(LastShowCode).Append("\n");
            sb.Append("  LastShowDate: ").Append(LastShowDate).Append("\n");
            sb.Append("  LastShowTickets: ").Append(LastShowTickets).Append("\n");
            sb.Append("  LastShowOrderNumber: ").Append(LastShowOrderNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  UspsAddressError: ").Append(UspsAddressError).Append("\n");
            sb.Append("  TicketDelivery: ").Append(TicketDelivery).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  UpsAddresses: ").Append(UpsAddresses).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  CustomerAttributes: ").Append(CustomerAttributes).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  AdditionalContacts: ").Append(AdditionalContacts).Append("\n");
            sb.Append("  CustomerNameToDisplay: ").Append(CustomerNameToDisplay).Append("\n");
            sb.Append("  CustomerTypeResponse: ").Append(CustomerTypeResponse).Append("\n");
            sb.Append("  DefaultPhoneNumber: ").Append(DefaultPhoneNumber).Append("\n");
            sb.Append("  Reseller: ").Append(Reseller).Append("\n");
            sb.Append("  PrimaryContact: ").Append(PrimaryContact).Append("\n");
            sb.Append("  GeneralConsumer: ").Append(GeneralConsumer).Append("\n");
            sb.Append("  AccountFrozen: ").Append(AccountFrozen).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  AddressVerifiedStatus: ").Append(AddressVerifiedStatus).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.MailingList == input.MailingList ||
                    this.MailingList.Equals(input.MailingList)
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CorpIdExpirationDate == input.CorpIdExpirationDate ||
                    (this.CorpIdExpirationDate != null &&
                    this.CorpIdExpirationDate.Equals(input.CorpIdExpirationDate))
                ) && 
                (
                    this.LastBookingDate == input.LastBookingDate ||
                    (this.LastBookingDate != null &&
                    this.LastBookingDate.Equals(input.LastBookingDate))
                ) && 
                (
                    this.NumberBookedCurrYear == input.NumberBookedCurrYear ||
                    this.NumberBookedCurrYear.Equals(input.NumberBookedCurrYear)
                ) && 
                (
                    this.NumberCanceledCurrYear == input.NumberCanceledCurrYear ||
                    this.NumberCanceledCurrYear.Equals(input.NumberCanceledCurrYear)
                ) && 
                (
                    this.NumberBookedLastYear == input.NumberBookedLastYear ||
                    this.NumberBookedLastYear.Equals(input.NumberBookedLastYear)
                ) && 
                (
                    this.NumberCanceledLastYear == input.NumberCanceledLastYear ||
                    this.NumberCanceledLastYear.Equals(input.NumberCanceledLastYear)
                ) && 
                (
                    this.NumberBookedNextYear == input.NumberBookedNextYear ||
                    this.NumberBookedNextYear.Equals(input.NumberBookedNextYear)
                ) && 
                (
                    this.NumberCanceledNextYear == input.NumberCanceledNextYear ||
                    this.NumberCanceledNextYear.Equals(input.NumberCanceledNextYear)
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.AddDate == input.AddDate ||
                    (this.AddDate != null &&
                    this.AddDate.Equals(input.AddDate))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && 
                (
                    this.AdditionalDiscPercent == input.AdditionalDiscPercent ||
                    this.AdditionalDiscPercent.Equals(input.AdditionalDiscPercent)
                ) && 
                (
                    this.CorpIdNumber == input.CorpIdNumber ||
                    (this.CorpIdNumber != null &&
                    this.CorpIdNumber.Equals(input.CorpIdNumber))
                ) && 
                (
                    this.CorpAffiliatedCode == input.CorpAffiliatedCode ||
                    (this.CorpAffiliatedCode != null &&
                    this.CorpAffiliatedCode.Equals(input.CorpAffiliatedCode))
                ) && 
                (
                    this.SourceCodeComments == input.SourceCodeComments ||
                    (this.SourceCodeComments != null &&
                    this.SourceCodeComments.Equals(input.SourceCodeComments))
                ) && 
                (
                    this.EmailList == input.EmailList ||
                    this.EmailList.Equals(input.EmailList)
                ) && 
                (
                    this.EmailStyle == input.EmailStyle ||
                    (this.EmailStyle != null &&
                    this.EmailStyle.Equals(input.EmailStyle))
                ) && 
                (
                    this.RpOfficeNumber == input.RpOfficeNumber ||
                    (this.RpOfficeNumber != null &&
                    this.RpOfficeNumber.Equals(input.RpOfficeNumber))
                ) && 
                (
                    this.TaxExempt == input.TaxExempt ||
                    this.TaxExempt.Equals(input.TaxExempt)
                ) && 
                (
                    this.OldCustTypeCode == input.OldCustTypeCode ||
                    this.OldCustTypeCode.Equals(input.OldCustTypeCode)
                ) && 
                (
                    this.CallList == input.CallList ||
                    this.CallList.Equals(input.CallList)
                ) && 
                (
                    this.TextList == input.TextList ||
                    this.TextList.Equals(input.TextList)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.SysProcessDate == input.SysProcessDate ||
                    (this.SysProcessDate != null &&
                    this.SysProcessDate.Equals(input.SysProcessDate))
                ) && 
                (
                    this.SysStatusCode == input.SysStatusCode ||
                    (this.SysStatusCode != null &&
                    this.SysStatusCode.Equals(input.SysStatusCode))
                ) && 
                (
                    this.SysCheckDate == input.SysCheckDate ||
                    (this.SysCheckDate != null &&
                    this.SysCheckDate.Equals(input.SysCheckDate))
                ) && 
                (
                    this.SysCheckResult == input.SysCheckResult ||
                    (this.SysCheckResult != null &&
                    this.SysCheckResult.Equals(input.SysCheckResult))
                ) && 
                (
                    this.Club == input.Club ||
                    this.Club.Equals(input.Club)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.BirthDay == input.BirthDay ||
                    (this.BirthDay != null &&
                    this.BirthDay.Equals(input.BirthDay))
                ) && 
                (
                    this.BirthMonth == input.BirthMonth ||
                    (this.BirthMonth != null &&
                    this.BirthMonth.Equals(input.BirthMonth))
                ) && 
                (
                    this.BirthYear == input.BirthYear ||
                    (this.BirthYear != null &&
                    this.BirthYear.Equals(input.BirthYear))
                ) && 
                (
                    this.Press == input.Press ||
                    this.Press.Equals(input.Press)
                ) && 
                (
                    this.ClubMemberCancelComments == input.ClubMemberCancelComments ||
                    (this.ClubMemberCancelComments != null &&
                    this.ClubMemberCancelComments.Equals(input.ClubMemberCancelComments))
                ) && 
                (
                    this.AgeRange == input.AgeRange ||
                    (this.AgeRange != null &&
                    this.AgeRange.Equals(input.AgeRange))
                ) && 
                (
                    this.ClubCancelDate == input.ClubCancelDate ||
                    (this.ClubCancelDate != null &&
                    this.ClubCancelDate.Equals(input.ClubCancelDate))
                ) && 
                (
                    this.SpecialNeeds == input.SpecialNeeds ||
                    this.SpecialNeeds.Equals(input.SpecialNeeds)
                ) && 
                (
                    this.AddressVerifyDate == input.AddressVerifyDate ||
                    (this.AddressVerifyDate != null &&
                    this.AddressVerifyDate.Equals(input.AddressVerifyDate))
                ) && 
                (
                    this.CustDetail == input.CustDetail ||
                    this.CustDetail.Equals(input.CustDetail)
                ) && 
                (
                    this.FitFrozen == input.FitFrozen ||
                    this.FitFrozen.Equals(input.FitFrozen)
                ) && 
                (
                    this.FitMaxTickets == input.FitMaxTickets ||
                    this.FitMaxTickets.Equals(input.FitMaxTickets)
                ) && 
                (
                    this.FitMaxTicketsEmailSent == input.FitMaxTicketsEmailSent ||
                    this.FitMaxTicketsEmailSent.Equals(input.FitMaxTicketsEmailSent)
                ) && 
                (
                    this.AddressVerifyFailDate == input.AddressVerifyFailDate ||
                    (this.AddressVerifyFailDate != null &&
                    this.AddressVerifyFailDate.Equals(input.AddressVerifyFailDate))
                ) && 
                (
                    this.FitPrepaidThresholdEmail == input.FitPrepaidThresholdEmail ||
                    this.FitPrepaidThresholdEmail.Equals(input.FitPrepaidThresholdEmail)
                ) && 
                (
                    this.FitFrozenOverride == input.FitFrozenOverride ||
                    this.FitFrozenOverride.Equals(input.FitFrozenOverride)
                ) && 
                (
                    this.PassPhrase == input.PassPhrase ||
                    (this.PassPhrase != null &&
                    this.PassPhrase.Equals(input.PassPhrase))
                ) && 
                (
                    this.ExtraCompTickets == input.ExtraCompTickets ||
                    this.ExtraCompTickets.Equals(input.ExtraCompTickets)
                ) && 
                (
                    this.EmpNumber == input.EmpNumber ||
                    this.EmpNumber.Equals(input.EmpNumber)
                ) && 
                (
                    this.BookUntilDate == input.BookUntilDate ||
                    (this.BookUntilDate != null &&
                    this.BookUntilDate.Equals(input.BookUntilDate))
                ) && 
                (
                    this.CheckPayment == input.CheckPayment ||
                    this.CheckPayment.Equals(input.CheckPayment)
                ) && 
                (
                    this.EmailPaperwork == input.EmailPaperwork ||
                    this.EmailPaperwork.Equals(input.EmailPaperwork)
                ) && 
                (
                    this.EmailVerifiedDate == input.EmailVerifiedDate ||
                    (this.EmailVerifiedDate != null &&
                    this.EmailVerifiedDate.Equals(input.EmailVerifiedDate))
                ) && 
                (
                    this.Church == input.Church ||
                    this.Church.Equals(input.Church)
                ) && 
                (
                    this.CongregationSize == input.CongregationSize ||
                    this.CongregationSize.Equals(input.CongregationSize)
                ) && 
                (
                    this.MarketingPartner == input.MarketingPartner ||
                    this.MarketingPartner.Equals(input.MarketingPartner)
                ) && 
                (
                    this.ImmediateSeatAssign == input.ImmediateSeatAssign ||
                    this.ImmediateSeatAssign.Equals(input.ImmediateSeatAssign)
                ) && 
                (
                    this.PrintETicket == input.PrintETicket ||
                    this.PrintETicket.Equals(input.PrintETicket)
                ) && 
                (
                    this.SlidingScaleDiscount == input.SlidingScaleDiscount ||
                    this.SlidingScaleDiscount.Equals(input.SlidingScaleDiscount)
                ) && 
                (
                    this.GroupNumber == input.GroupNumber ||
                    this.GroupNumber.Equals(input.GroupNumber)
                ) && 
                (
                    this.Tier == input.Tier ||
                    this.Tier.Equals(input.Tier)
                ) && 
                (
                    this.Tour == input.Tour ||
                    this.Tour.Equals(input.Tour)
                ) && 
                (
                    this.Receptive == input.Receptive ||
                    this.Receptive.Equals(input.Receptive)
                ) && 
                (
                    this.EmployeeExitDate == input.EmployeeExitDate ||
                    (this.EmployeeExitDate != null &&
                    this.EmployeeExitDate.Equals(input.EmployeeExitDate))
                ) && 
                (
                    this.Group == input.Group ||
                    this.Group.Equals(input.Group)
                ) && 
                (
                    this.LastShowCode == input.LastShowCode ||
                    (this.LastShowCode != null &&
                    this.LastShowCode.Equals(input.LastShowCode))
                ) && 
                (
                    this.LastShowDate == input.LastShowDate ||
                    (this.LastShowDate != null &&
                    this.LastShowDate.Equals(input.LastShowDate))
                ) && 
                (
                    this.LastShowTickets == input.LastShowTickets ||
                    (this.LastShowTickets != null &&
                    this.LastShowTickets.Equals(input.LastShowTickets))
                ) && 
                (
                    this.LastShowOrderNumber == input.LastShowOrderNumber ||
                    this.LastShowOrderNumber.Equals(input.LastShowOrderNumber)
                ) && 
                (
                    this.Company == input.Company ||
                    this.Company.Equals(input.Company)
                ) && 
                (
                    this.UspsAddressError == input.UspsAddressError ||
                    (this.UspsAddressError != null &&
                    this.UspsAddressError.Equals(input.UspsAddressError))
                ) && 
                (
                    this.TicketDelivery == input.TicketDelivery ||
                    this.TicketDelivery.Equals(input.TicketDelivery)
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.UpsAddresses == input.UpsAddresses ||
                    this.UpsAddresses != null &&
                    input.UpsAddresses != null &&
                    this.UpsAddresses.SequenceEqual(input.UpsAddresses)
                ) && 
                (
                    this.Prices == input.Prices ||
                    this.Prices != null &&
                    input.Prices != null &&
                    this.Prices.SequenceEqual(input.Prices)
                ) && 
                (
                    this.Phones == input.Phones ||
                    this.Phones != null &&
                    input.Phones != null &&
                    this.Phones.SequenceEqual(input.Phones)
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.CustomerAttributes == input.CustomerAttributes ||
                    this.CustomerAttributes != null &&
                    input.CustomerAttributes != null &&
                    this.CustomerAttributes.SequenceEqual(input.CustomerAttributes)
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.AdditionalContacts == input.AdditionalContacts ||
                    this.AdditionalContacts != null &&
                    input.AdditionalContacts != null &&
                    this.AdditionalContacts.SequenceEqual(input.AdditionalContacts)
                ) && 
                (
                    this.CustomerNameToDisplay == input.CustomerNameToDisplay ||
                    (this.CustomerNameToDisplay != null &&
                    this.CustomerNameToDisplay.Equals(input.CustomerNameToDisplay))
                ) && 
                (
                    this.CustomerTypeResponse == input.CustomerTypeResponse ||
                    this.CustomerTypeResponse.Equals(input.CustomerTypeResponse)
                ) && 
                (
                    this.DefaultPhoneNumber == input.DefaultPhoneNumber ||
                    (this.DefaultPhoneNumber != null &&
                    this.DefaultPhoneNumber.Equals(input.DefaultPhoneNumber))
                ) && 
                (
                    this.Reseller == input.Reseller ||
                    this.Reseller.Equals(input.Reseller)
                ) && 
                (
                    this.PrimaryContact == input.PrimaryContact ||
                    (this.PrimaryContact != null &&
                    this.PrimaryContact.Equals(input.PrimaryContact))
                ) && 
                (
                    this.GeneralConsumer == input.GeneralConsumer ||
                    this.GeneralConsumer.Equals(input.GeneralConsumer)
                ) && 
                (
                    this.AccountFrozen == input.AccountFrozen ||
                    this.AccountFrozen.Equals(input.AccountFrozen)
                ) && 
                (
                    this.Employee == input.Employee ||
                    this.Employee.Equals(input.Employee)
                ) && 
                (
                    this.AddressVerifiedStatus == input.AddressVerifiedStatus ||
                    this.AddressVerifiedStatus.Equals(input.AddressVerifiedStatus)
                ) && 
                (
                    this.Organization == input.Organization ||
                    this.Organization.Equals(input.Organization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MailingList.GetHashCode();
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                if (this.CorpIdExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CorpIdExpirationDate.GetHashCode();
                }
                if (this.LastBookingDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastBookingDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberBookedCurrYear.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberCanceledCurrYear.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberBookedLastYear.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberCanceledLastYear.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberBookedNextYear.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberCanceledNextYear.GetHashCode();
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                if (this.AddDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.SourceCode != null)
                {
                    hashCode = (hashCode * 59) + this.SourceCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AdditionalDiscPercent.GetHashCode();
                if (this.CorpIdNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CorpIdNumber.GetHashCode();
                }
                if (this.CorpAffiliatedCode != null)
                {
                    hashCode = (hashCode * 59) + this.CorpAffiliatedCode.GetHashCode();
                }
                if (this.SourceCodeComments != null)
                {
                    hashCode = (hashCode * 59) + this.SourceCodeComments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailList.GetHashCode();
                if (this.EmailStyle != null)
                {
                    hashCode = (hashCode * 59) + this.EmailStyle.GetHashCode();
                }
                if (this.RpOfficeNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RpOfficeNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaxExempt.GetHashCode();
                hashCode = (hashCode * 59) + this.OldCustTypeCode.GetHashCode();
                hashCode = (hashCode * 59) + this.CallList.GetHashCode();
                hashCode = (hashCode * 59) + this.TextList.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.SysProcessDate != null)
                {
                    hashCode = (hashCode * 59) + this.SysProcessDate.GetHashCode();
                }
                if (this.SysStatusCode != null)
                {
                    hashCode = (hashCode * 59) + this.SysStatusCode.GetHashCode();
                }
                if (this.SysCheckDate != null)
                {
                    hashCode = (hashCode * 59) + this.SysCheckDate.GetHashCode();
                }
                if (this.SysCheckResult != null)
                {
                    hashCode = (hashCode * 59) + this.SysCheckResult.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Club.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.BirthDay != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDay.GetHashCode();
                }
                if (this.BirthMonth != null)
                {
                    hashCode = (hashCode * 59) + this.BirthMonth.GetHashCode();
                }
                if (this.BirthYear != null)
                {
                    hashCode = (hashCode * 59) + this.BirthYear.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Press.GetHashCode();
                if (this.ClubMemberCancelComments != null)
                {
                    hashCode = (hashCode * 59) + this.ClubMemberCancelComments.GetHashCode();
                }
                if (this.AgeRange != null)
                {
                    hashCode = (hashCode * 59) + this.AgeRange.GetHashCode();
                }
                if (this.ClubCancelDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClubCancelDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpecialNeeds.GetHashCode();
                if (this.AddressVerifyDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddressVerifyDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustDetail.GetHashCode();
                hashCode = (hashCode * 59) + this.FitFrozen.GetHashCode();
                hashCode = (hashCode * 59) + this.FitMaxTickets.GetHashCode();
                hashCode = (hashCode * 59) + this.FitMaxTicketsEmailSent.GetHashCode();
                if (this.AddressVerifyFailDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddressVerifyFailDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FitPrepaidThresholdEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.FitFrozenOverride.GetHashCode();
                if (this.PassPhrase != null)
                {
                    hashCode = (hashCode * 59) + this.PassPhrase.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExtraCompTickets.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpNumber.GetHashCode();
                if (this.BookUntilDate != null)
                {
                    hashCode = (hashCode * 59) + this.BookUntilDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CheckPayment.GetHashCode();
                hashCode = (hashCode * 59) + this.EmailPaperwork.GetHashCode();
                if (this.EmailVerifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.EmailVerifiedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Church.GetHashCode();
                hashCode = (hashCode * 59) + this.CongregationSize.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketingPartner.GetHashCode();
                hashCode = (hashCode * 59) + this.ImmediateSeatAssign.GetHashCode();
                hashCode = (hashCode * 59) + this.PrintETicket.GetHashCode();
                hashCode = (hashCode * 59) + this.SlidingScaleDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.GroupNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Tier.GetHashCode();
                hashCode = (hashCode * 59) + this.Tour.GetHashCode();
                hashCode = (hashCode * 59) + this.Receptive.GetHashCode();
                if (this.EmployeeExitDate != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeExitDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Group.GetHashCode();
                if (this.LastShowCode != null)
                {
                    hashCode = (hashCode * 59) + this.LastShowCode.GetHashCode();
                }
                if (this.LastShowDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastShowDate.GetHashCode();
                }
                if (this.LastShowTickets != null)
                {
                    hashCode = (hashCode * 59) + this.LastShowTickets.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastShowOrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Company.GetHashCode();
                if (this.UspsAddressError != null)
                {
                    hashCode = (hashCode * 59) + this.UspsAddressError.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TicketDelivery.GetHashCode();
                if (this.Documents != null)
                {
                    hashCode = (hashCode * 59) + this.Documents.GetHashCode();
                }
                if (this.UpsAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.UpsAddresses.GetHashCode();
                }
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.Phones != null)
                {
                    hashCode = (hashCode * 59) + this.Phones.GetHashCode();
                }
                if (this.Contacts != null)
                {
                    hashCode = (hashCode * 59) + this.Contacts.GetHashCode();
                }
                if (this.CustomerAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerAttributes.GetHashCode();
                }
                if (this.Orders != null)
                {
                    hashCode = (hashCode * 59) + this.Orders.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.AdditionalContacts != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalContacts.GetHashCode();
                }
                if (this.CustomerNameToDisplay != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerNameToDisplay.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomerTypeResponse.GetHashCode();
                if (this.DefaultPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reseller.GetHashCode();
                if (this.PrimaryContact != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryContact.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GeneralConsumer.GetHashCode();
                hashCode = (hashCode * 59) + this.AccountFrozen.GetHashCode();
                hashCode = (hashCode * 59) + this.Employee.GetHashCode();
                hashCode = (hashCode * 59) + this.AddressVerifiedStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 50.", new [] { "CompanyName" });
            }

            // CompanyName (string) minLength
            if (this.CompanyName != null && this.CompanyName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be greater than 0.", new [] { "CompanyName" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 20.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if (this.FirstName != null && this.FirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 0.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 20.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if (this.LastName != null && this.LastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 0.", new [] { "LastName" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 50.", new [] { "Email" });
            }

            // Email (string) minLength
            if (this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            // Comments (string) maxLength
            if (this.Comments != null && this.Comments.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 200.", new [] { "Comments" });
            }

            // Comments (string) minLength
            if (this.Comments != null && this.Comments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be greater than 0.", new [] { "Comments" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            // SourceCode (string) maxLength
            if (this.SourceCode != null && this.SourceCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be less than 20.", new [] { "SourceCode" });
            }

            // SourceCode (string) minLength
            if (this.SourceCode != null && this.SourceCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be greater than 0.", new [] { "SourceCode" });
            }

            // CorpIdNumber (string) maxLength
            if (this.CorpIdNumber != null && this.CorpIdNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorpIdNumber, length must be less than 20.", new [] { "CorpIdNumber" });
            }

            // CorpIdNumber (string) minLength
            if (this.CorpIdNumber != null && this.CorpIdNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorpIdNumber, length must be greater than 0.", new [] { "CorpIdNumber" });
            }

            // CorpAffiliatedCode (string) maxLength
            if (this.CorpAffiliatedCode != null && this.CorpAffiliatedCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorpAffiliatedCode, length must be less than 20.", new [] { "CorpAffiliatedCode" });
            }

            // CorpAffiliatedCode (string) minLength
            if (this.CorpAffiliatedCode != null && this.CorpAffiliatedCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorpAffiliatedCode, length must be greater than 0.", new [] { "CorpAffiliatedCode" });
            }

            // SourceCodeComments (string) maxLength
            if (this.SourceCodeComments != null && this.SourceCodeComments.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCodeComments, length must be less than 50.", new [] { "SourceCodeComments" });
            }

            // SourceCodeComments (string) minLength
            if (this.SourceCodeComments != null && this.SourceCodeComments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCodeComments, length must be greater than 0.", new [] { "SourceCodeComments" });
            }

            // EmailStyle (string) maxLength
            if (this.EmailStyle != null && this.EmailStyle.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailStyle, length must be less than 1.", new [] { "EmailStyle" });
            }

            // EmailStyle (string) minLength
            if (this.EmailStyle != null && this.EmailStyle.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailStyle, length must be greater than 0.", new [] { "EmailStyle" });
            }

            // RpOfficeNumber (string) maxLength
            if (this.RpOfficeNumber != null && this.RpOfficeNumber.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RpOfficeNumber, length must be less than 30.", new [] { "RpOfficeNumber" });
            }

            // RpOfficeNumber (string) minLength
            if (this.RpOfficeNumber != null && this.RpOfficeNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RpOfficeNumber, length must be greater than 0.", new [] { "RpOfficeNumber" });
            }

            // SysStatusCode (string) maxLength
            if (this.SysStatusCode != null && this.SysStatusCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SysStatusCode, length must be less than 10.", new [] { "SysStatusCode" });
            }

            // SysStatusCode (string) minLength
            if (this.SysStatusCode != null && this.SysStatusCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SysStatusCode, length must be greater than 0.", new [] { "SysStatusCode" });
            }

            // SysCheckResult (string) maxLength
            if (this.SysCheckResult != null && this.SysCheckResult.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SysCheckResult, length must be less than 10.", new [] { "SysCheckResult" });
            }

            // SysCheckResult (string) minLength
            if (this.SysCheckResult != null && this.SysCheckResult.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SysCheckResult, length must be greater than 0.", new [] { "SysCheckResult" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 20.", new [] { "Title" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 0.", new [] { "Title" });
            }

            // BirthDay (string) maxLength
            if (this.BirthDay != null && this.BirthDay.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthDay, length must be less than 2.", new [] { "BirthDay" });
            }

            // BirthDay (string) minLength
            if (this.BirthDay != null && this.BirthDay.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthDay, length must be greater than 0.", new [] { "BirthDay" });
            }

            // BirthMonth (string) maxLength
            if (this.BirthMonth != null && this.BirthMonth.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthMonth, length must be less than 2.", new [] { "BirthMonth" });
            }

            // BirthMonth (string) minLength
            if (this.BirthMonth != null && this.BirthMonth.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthMonth, length must be greater than 0.", new [] { "BirthMonth" });
            }

            // BirthYear (string) maxLength
            if (this.BirthYear != null && this.BirthYear.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthYear, length must be less than 4.", new [] { "BirthYear" });
            }

            // BirthYear (string) minLength
            if (this.BirthYear != null && this.BirthYear.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthYear, length must be greater than 0.", new [] { "BirthYear" });
            }

            // ClubMemberCancelComments (string) maxLength
            if (this.ClubMemberCancelComments != null && this.ClubMemberCancelComments.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClubMemberCancelComments, length must be less than 200.", new [] { "ClubMemberCancelComments" });
            }

            // ClubMemberCancelComments (string) minLength
            if (this.ClubMemberCancelComments != null && this.ClubMemberCancelComments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClubMemberCancelComments, length must be greater than 0.", new [] { "ClubMemberCancelComments" });
            }

            // AgeRange (string) maxLength
            if (this.AgeRange != null && this.AgeRange.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AgeRange, length must be less than 50.", new [] { "AgeRange" });
            }

            // AgeRange (string) minLength
            if (this.AgeRange != null && this.AgeRange.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AgeRange, length must be greater than 0.", new [] { "AgeRange" });
            }

            // PassPhrase (string) maxLength
            if (this.PassPhrase != null && this.PassPhrase.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassPhrase, length must be less than 100.", new [] { "PassPhrase" });
            }

            // PassPhrase (string) minLength
            if (this.PassPhrase != null && this.PassPhrase.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassPhrase, length must be greater than 0.", new [] { "PassPhrase" });
            }

            // LastShowCode (string) maxLength
            if (this.LastShowCode != null && this.LastShowCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastShowCode, length must be less than 10.", new [] { "LastShowCode" });
            }

            // LastShowCode (string) minLength
            if (this.LastShowCode != null && this.LastShowCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastShowCode, length must be greater than 0.", new [] { "LastShowCode" });
            }

            // LastShowTickets (string) maxLength
            if (this.LastShowTickets != null && this.LastShowTickets.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastShowTickets, length must be less than 4.", new [] { "LastShowTickets" });
            }

            // LastShowTickets (string) minLength
            if (this.LastShowTickets != null && this.LastShowTickets.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastShowTickets, length must be greater than 0.", new [] { "LastShowTickets" });
            }

            // UspsAddressError (string) maxLength
            if (this.UspsAddressError != null && this.UspsAddressError.Length > 4000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UspsAddressError, length must be less than 4000.", new [] { "UspsAddressError" });
            }

            // UspsAddressError (string) minLength
            if (this.UspsAddressError != null && this.UspsAddressError.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UspsAddressError, length must be greater than 0.", new [] { "UspsAddressError" });
            }

            yield break;
        }
    }

}
