/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Order complete response
    /// </summary>
    [DataContract(Name = "OrderCompleteResponse")]
    public partial class OrderCompleteResponse : IEquatable<OrderCompleteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCompleteResponse" /> class.
        /// </summary>
        /// <param name="paymentAppliedInfo">paymentAppliedInfo.</param>
        /// <param name="ticketDeliveryMsg">ticketDeliveryMsg.</param>
        /// <param name="ticketDeliveryMessage">ticketDeliveryMessage.</param>
        /// <param name="cart">cart.</param>
        /// <param name="eTicketLink">eTicketLink.</param>
        public OrderCompleteResponse(string paymentAppliedInfo = default(string), string ticketDeliveryMsg = default(string), string ticketDeliveryMessage = default(string), CartResponse cart = default(CartResponse), string eTicketLink = default(string))
        {
            this.PaymentAppliedInfo = paymentAppliedInfo;
            this.TicketDeliveryMsg = ticketDeliveryMsg;
            this.TicketDeliveryMessage = ticketDeliveryMessage;
            this.Cart = cart;
            this.ETicketLink = eTicketLink;
        }

        /// <summary>
        /// Gets or Sets PaymentAppliedInfo
        /// </summary>
        [DataMember(Name = "paymentAppliedInfo", EmitDefaultValue = false)]
        public string PaymentAppliedInfo { get; set; }

        /// <summary>
        /// Gets or Sets TicketDeliveryMsg
        /// </summary>
        [DataMember(Name = "ticketDeliveryMsg", EmitDefaultValue = false)]
        [Obsolete]
        public string TicketDeliveryMsg { get; set; }

        /// <summary>
        /// Gets or Sets TicketDeliveryMessage
        /// </summary>
        [DataMember(Name = "ticketDeliveryMessage", EmitDefaultValue = false)]
        public string TicketDeliveryMessage { get; set; }

        /// <summary>
        /// Gets or Sets Cart
        /// </summary>
        [DataMember(Name = "cart", EmitDefaultValue = false)]
        public CartResponse Cart { get; set; }

        /// <summary>
        /// Gets or Sets ETicketLink
        /// </summary>
        [DataMember(Name = "eTicketLink", EmitDefaultValue = false)]
        public string ETicketLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCompleteResponse {\n");
            sb.Append("  PaymentAppliedInfo: ").Append(PaymentAppliedInfo).Append("\n");
            sb.Append("  TicketDeliveryMsg: ").Append(TicketDeliveryMsg).Append("\n");
            sb.Append("  TicketDeliveryMessage: ").Append(TicketDeliveryMessage).Append("\n");
            sb.Append("  Cart: ").Append(Cart).Append("\n");
            sb.Append("  ETicketLink: ").Append(ETicketLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCompleteResponse);
        }

        /// <summary>
        /// Returns true if OrderCompleteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCompleteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCompleteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentAppliedInfo == input.PaymentAppliedInfo ||
                    (this.PaymentAppliedInfo != null &&
                    this.PaymentAppliedInfo.Equals(input.PaymentAppliedInfo))
                ) && 
                (
                    this.TicketDeliveryMsg == input.TicketDeliveryMsg ||
                    (this.TicketDeliveryMsg != null &&
                    this.TicketDeliveryMsg.Equals(input.TicketDeliveryMsg))
                ) && 
                (
                    this.TicketDeliveryMessage == input.TicketDeliveryMessage ||
                    (this.TicketDeliveryMessage != null &&
                    this.TicketDeliveryMessage.Equals(input.TicketDeliveryMessage))
                ) && 
                (
                    this.Cart == input.Cart ||
                    (this.Cart != null &&
                    this.Cart.Equals(input.Cart))
                ) && 
                (
                    this.ETicketLink == input.ETicketLink ||
                    (this.ETicketLink != null &&
                    this.ETicketLink.Equals(input.ETicketLink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentAppliedInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAppliedInfo.GetHashCode();
                }
                if (this.TicketDeliveryMsg != null)
                {
                    hashCode = (hashCode * 59) + this.TicketDeliveryMsg.GetHashCode();
                }
                if (this.TicketDeliveryMessage != null)
                {
                    hashCode = (hashCode * 59) + this.TicketDeliveryMessage.GetHashCode();
                }
                if (this.Cart != null)
                {
                    hashCode = (hashCode * 59) + this.Cart.GetHashCode();
                }
                if (this.ETicketLink != null)
                {
                    hashCode = (hashCode * 59) + this.ETicketLink.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
