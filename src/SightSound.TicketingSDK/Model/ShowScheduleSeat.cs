/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// ShowScheduleSeat
    /// </summary>
    [DataContract(Name = "ShowScheduleSeat")]
    public partial class ShowScheduleSeat : IEquatable<ShowScheduleSeat>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SeatType
        /// </summary>
        [DataMember(Name = "seatType", EmitDefaultValue = false)]
        public SeatType? SeatType { get; set; }

        /// <summary>
        /// Gets or Sets SeatStatus
        /// </summary>
        [DataMember(Name = "seatStatus", EmitDefaultValue = false)]
        public SeatStatus? SeatStatus { get; set; }

        /// <summary>
        /// Gets or Sets TicketPrintStatus
        /// </summary>
        [DataMember(Name = "ticketPrintStatus", EmitDefaultValue = false)]
        public TicketPrintStatus? TicketPrintStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowScheduleSeat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowScheduleSeat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowScheduleSeat" /> class.
        /// </summary>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="showDateTime">showDateTime (required).</param>
        /// <param name="sectionCode">sectionCode (required).</param>
        /// <param name="rowNumber">rowNumber (required).</param>
        /// <param name="seatNumber">seatNumber.</param>
        /// <param name="priceGrade">priceGrade (required).</param>
        /// <param name="seatingTemplateCode">seatingTemplateCode.</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="itemNumber">itemNumber.</param>
        /// <param name="bookingPhase">bookingPhase.</param>
        /// <param name="sssDateTime">sssDateTime.</param>
        /// <param name="seatType">seatType.</param>
        /// <param name="seatStatus">seatStatus.</param>
        /// <param name="ticketPrintStatus">ticketPrintStatus.</param>
        /// <param name="modifyUserId">modifyUserId.</param>
        /// <param name="orderItem">orderItem.</param>
        /// <param name="templateSectionSeat">templateSectionSeat.</param>
        /// <param name="wheelchairOrMotorized">wheelchairOrMotorized.</param>
        /// <param name="seatCode">seatCode.</param>
        public ShowScheduleSeat(string eventCode = default(string), DateTime showDateTime = default(DateTime), string sectionCode = default(string), string rowNumber = default(string), int seatNumber = default(int), string priceGrade = default(string), string seatingTemplateCode = default(string), long orderNumber = default(long), int itemNumber = default(int), int bookingPhase = default(int), DateTime sssDateTime = default(DateTime), SeatType? seatType = default(SeatType?), SeatStatus? seatStatus = default(SeatStatus?), TicketPrintStatus? ticketPrintStatus = default(TicketPrintStatus?), string modifyUserId = default(string), OrderItem orderItem = default(OrderItem), SeatingTemplateSectionSeat templateSectionSeat = default(SeatingTemplateSectionSeat), bool wheelchairOrMotorized = default(bool), string seatCode = default(string))
        {
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for ShowScheduleSeat and cannot be null");
            }
            this.EventCode = eventCode;
            this.ShowDateTime = showDateTime;
            // to ensure "sectionCode" is required (not null)
            if (sectionCode == null)
            {
                throw new ArgumentNullException("sectionCode is a required property for ShowScheduleSeat and cannot be null");
            }
            this.SectionCode = sectionCode;
            // to ensure "rowNumber" is required (not null)
            if (rowNumber == null)
            {
                throw new ArgumentNullException("rowNumber is a required property for ShowScheduleSeat and cannot be null");
            }
            this.RowNumber = rowNumber;
            // to ensure "priceGrade" is required (not null)
            if (priceGrade == null)
            {
                throw new ArgumentNullException("priceGrade is a required property for ShowScheduleSeat and cannot be null");
            }
            this.PriceGrade = priceGrade;
            this.SeatNumber = seatNumber;
            this.SeatingTemplateCode = seatingTemplateCode;
            this.OrderNumber = orderNumber;
            this.ItemNumber = itemNumber;
            this.BookingPhase = bookingPhase;
            this.SssDateTime = sssDateTime;
            this.SeatType = seatType;
            this.SeatStatus = seatStatus;
            this.TicketPrintStatus = ticketPrintStatus;
            this.ModifyUserId = modifyUserId;
            this.OrderItem = orderItem;
            this.TemplateSectionSeat = templateSectionSeat;
            this.WheelchairOrMotorized = wheelchairOrMotorized;
            this.SeatCode = seatCode;
        }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets ShowDateTime
        /// </summary>
        [DataMember(Name = "showDateTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ShowDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SectionCode
        /// </summary>
        [DataMember(Name = "sectionCode", IsRequired = true, EmitDefaultValue = false)]
        public string SectionCode { get; set; }

        /// <summary>
        /// Gets or Sets RowNumber
        /// </summary>
        [DataMember(Name = "rowNumber", IsRequired = true, EmitDefaultValue = false)]
        public string RowNumber { get; set; }

        /// <summary>
        /// Gets or Sets SeatNumber
        /// </summary>
        [DataMember(Name = "seatNumber", EmitDefaultValue = false)]
        public int SeatNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceGrade
        /// </summary>
        [DataMember(Name = "priceGrade", IsRequired = true, EmitDefaultValue = false)]
        public string PriceGrade { get; set; }

        /// <summary>
        /// Gets or Sets SeatingTemplateCode
        /// </summary>
        [DataMember(Name = "seatingTemplateCode", EmitDefaultValue = false)]
        public string SeatingTemplateCode { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets BookingPhase
        /// </summary>
        [DataMember(Name = "bookingPhase", EmitDefaultValue = false)]
        public int BookingPhase { get; set; }

        /// <summary>
        /// Gets or Sets SssDateTime
        /// </summary>
        [DataMember(Name = "sssDateTime", EmitDefaultValue = false)]
        public DateTime SssDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ModifyUserId
        /// </summary>
        [DataMember(Name = "modifyUserId", EmitDefaultValue = false)]
        public string ModifyUserId { get; set; }

        /// <summary>
        /// Gets or Sets OrderItem
        /// </summary>
        [DataMember(Name = "orderItem", EmitDefaultValue = false)]
        public OrderItem OrderItem { get; set; }

        /// <summary>
        /// Gets or Sets TemplateSectionSeat
        /// </summary>
        [DataMember(Name = "templateSectionSeat", EmitDefaultValue = false)]
        public SeatingTemplateSectionSeat TemplateSectionSeat { get; set; }

        /// <summary>
        /// Gets or Sets WheelchairOrMotorized
        /// </summary>
        [DataMember(Name = "wheelchairOrMotorized", EmitDefaultValue = true)]
        public bool WheelchairOrMotorized { get; set; }

        /// <summary>
        /// Gets or Sets SeatCode
        /// </summary>
        [DataMember(Name = "seatCode", EmitDefaultValue = false)]
        public string SeatCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowScheduleSeat {\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  ShowDateTime: ").Append(ShowDateTime).Append("\n");
            sb.Append("  SectionCode: ").Append(SectionCode).Append("\n");
            sb.Append("  RowNumber: ").Append(RowNumber).Append("\n");
            sb.Append("  SeatNumber: ").Append(SeatNumber).Append("\n");
            sb.Append("  PriceGrade: ").Append(PriceGrade).Append("\n");
            sb.Append("  SeatingTemplateCode: ").Append(SeatingTemplateCode).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  BookingPhase: ").Append(BookingPhase).Append("\n");
            sb.Append("  SssDateTime: ").Append(SssDateTime).Append("\n");
            sb.Append("  SeatType: ").Append(SeatType).Append("\n");
            sb.Append("  SeatStatus: ").Append(SeatStatus).Append("\n");
            sb.Append("  TicketPrintStatus: ").Append(TicketPrintStatus).Append("\n");
            sb.Append("  ModifyUserId: ").Append(ModifyUserId).Append("\n");
            sb.Append("  OrderItem: ").Append(OrderItem).Append("\n");
            sb.Append("  TemplateSectionSeat: ").Append(TemplateSectionSeat).Append("\n");
            sb.Append("  WheelchairOrMotorized: ").Append(WheelchairOrMotorized).Append("\n");
            sb.Append("  SeatCode: ").Append(SeatCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowScheduleSeat);
        }

        /// <summary>
        /// Returns true if ShowScheduleSeat instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowScheduleSeat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowScheduleSeat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.ShowDateTime == input.ShowDateTime ||
                    (this.ShowDateTime != null &&
                    this.ShowDateTime.Equals(input.ShowDateTime))
                ) && 
                (
                    this.SectionCode == input.SectionCode ||
                    (this.SectionCode != null &&
                    this.SectionCode.Equals(input.SectionCode))
                ) && 
                (
                    this.RowNumber == input.RowNumber ||
                    (this.RowNumber != null &&
                    this.RowNumber.Equals(input.RowNumber))
                ) && 
                (
                    this.SeatNumber == input.SeatNumber ||
                    this.SeatNumber.Equals(input.SeatNumber)
                ) && 
                (
                    this.PriceGrade == input.PriceGrade ||
                    (this.PriceGrade != null &&
                    this.PriceGrade.Equals(input.PriceGrade))
                ) && 
                (
                    this.SeatingTemplateCode == input.SeatingTemplateCode ||
                    (this.SeatingTemplateCode != null &&
                    this.SeatingTemplateCode.Equals(input.SeatingTemplateCode))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.BookingPhase == input.BookingPhase ||
                    this.BookingPhase.Equals(input.BookingPhase)
                ) && 
                (
                    this.SssDateTime == input.SssDateTime ||
                    (this.SssDateTime != null &&
                    this.SssDateTime.Equals(input.SssDateTime))
                ) && 
                (
                    this.SeatType == input.SeatType ||
                    this.SeatType.Equals(input.SeatType)
                ) && 
                (
                    this.SeatStatus == input.SeatStatus ||
                    this.SeatStatus.Equals(input.SeatStatus)
                ) && 
                (
                    this.TicketPrintStatus == input.TicketPrintStatus ||
                    this.TicketPrintStatus.Equals(input.TicketPrintStatus)
                ) && 
                (
                    this.ModifyUserId == input.ModifyUserId ||
                    (this.ModifyUserId != null &&
                    this.ModifyUserId.Equals(input.ModifyUserId))
                ) && 
                (
                    this.OrderItem == input.OrderItem ||
                    (this.OrderItem != null &&
                    this.OrderItem.Equals(input.OrderItem))
                ) && 
                (
                    this.TemplateSectionSeat == input.TemplateSectionSeat ||
                    (this.TemplateSectionSeat != null &&
                    this.TemplateSectionSeat.Equals(input.TemplateSectionSeat))
                ) && 
                (
                    this.WheelchairOrMotorized == input.WheelchairOrMotorized ||
                    this.WheelchairOrMotorized.Equals(input.WheelchairOrMotorized)
                ) && 
                (
                    this.SeatCode == input.SeatCode ||
                    (this.SeatCode != null &&
                    this.SeatCode.Equals(input.SeatCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.ShowDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ShowDateTime.GetHashCode();
                }
                if (this.SectionCode != null)
                {
                    hashCode = (hashCode * 59) + this.SectionCode.GetHashCode();
                }
                if (this.RowNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RowNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatNumber.GetHashCode();
                if (this.PriceGrade != null)
                {
                    hashCode = (hashCode * 59) + this.PriceGrade.GetHashCode();
                }
                if (this.SeatingTemplateCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatingTemplateCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.BookingPhase.GetHashCode();
                if (this.SssDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.SssDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatType.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketPrintStatus.GetHashCode();
                if (this.ModifyUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyUserId.GetHashCode();
                }
                if (this.OrderItem != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItem.GetHashCode();
                }
                if (this.TemplateSectionSeat != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateSectionSeat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WheelchairOrMotorized.GetHashCode();
                if (this.SeatCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
