/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Event
    /// </summary>
    [DataContract(Name = "Event")]
    public partial class Event : IEquatable<Event>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", EmitDefaultValue = false)]
        public ItemType? ItemType { get; set; }

        /// <summary>
        /// Gets or Sets TheaterLocation
        /// </summary>
        [DataMember(Name = "theaterLocation", EmitDefaultValue = false)]
        public LocationDescription? TheaterLocation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="eventCode">eventCode.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="eventTimeMinutes">eventTimeMinutes.</param>
        /// <param name="ticketed">ticketed.</param>
        /// <param name="ticketStyleCode">ticketStyleCode.</param>
        /// <param name="locationCode">locationCode.</param>
        /// <param name="seatingTemplateCode">seatingTemplateCode.</param>
        /// <param name="eventDisplayColor">eventDisplayColor.</param>
        /// <param name="allowOrderTix">allowOrderTix.</param>
        /// <param name="internetSeatsMinimumLimit">internetSeatsMinimumLimit.</param>
        /// <param name="eventStartDate">eventStartDate.</param>
        /// <param name="eventEndDate">eventEndDate.</param>
        /// <param name="active">active.</param>
        /// <param name="eventTypeDetailCode">eventTypeDetailCode.</param>
        /// <param name="compTicketsSeatsMin">compTicketsSeatsMin.</param>
        /// <param name="compTicketsStartDate">compTicketsStartDate.</param>
        /// <param name="theaterLocation">theaterLocation.</param>
        /// <param name="empDiscDaysToShow">empDiscDaysToShow.</param>
        /// <param name="empDiscPercent">empDiscPercent.</param>
        /// <param name="taxCode">taxCode.</param>
        /// <param name="externalBooking">externalBooking.</param>
        /// <param name="externalBookingThreshold">externalBookingThreshold.</param>
        /// <param name="compTicketsMax">compTicketsMax.</param>
        /// <param name="empDayTicketsMax">empDayTicketsMax.</param>
        /// <param name="premierShow">premierShow.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="allowGroup">allowGroup.</param>
        /// <param name="empSeatsMin">empSeatsMin.</param>
        /// <param name="empShowMinutes">empShowMinutes.</param>
        /// <param name="empShowMinutesSeatsMin">empShowMinutesSeatsMin.</param>
        /// <param name="partnerEvent">partnerEvent.</param>
        /// <param name="enTaxCode">enTaxCode.</param>
        /// <param name="eventLogoUrl">eventLogoUrl.</param>
        /// <param name="txnCharge">txnCharge.</param>
        /// <param name="allowGroupDisc">allowGroupDisc.</param>
        /// <param name="sortSequence">sortSequence.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="showTrackingDetails">showTrackingDetails.</param>
        /// <param name="budget">budget.</param>
        /// <param name="zonedEventEndDateTime">zonedEventEndDateTime.</param>
        /// <param name="zonedEventStartDateTime">zonedEventStartDateTime.</param>
        public Event(string eventCode = default(string), string eventName = default(string), ItemType? itemType = default(ItemType?), int eventTimeMinutes = default(int), bool ticketed = default(bool), string ticketStyleCode = default(string), string locationCode = default(string), string seatingTemplateCode = default(string), string eventDisplayColor = default(string), bool allowOrderTix = default(bool), int internetSeatsMinimumLimit = default(int), DateTime eventStartDate = default(DateTime), DateTime eventEndDate = default(DateTime), bool active = default(bool), string eventTypeDetailCode = default(string), int compTicketsSeatsMin = default(int), DateTime compTicketsStartDate = default(DateTime), LocationDescription? theaterLocation = default(LocationDescription?), int empDiscDaysToShow = default(int), decimal empDiscPercent = default(decimal), string taxCode = default(string), bool externalBooking = default(bool), int externalBookingThreshold = default(int), int compTicketsMax = default(int), int empDayTicketsMax = default(int), bool premierShow = default(bool), bool taxable = default(bool), bool allowGroup = default(bool), int empSeatsMin = default(int), int empShowMinutes = default(int), int empShowMinutesSeatsMin = default(int), bool partnerEvent = default(bool), string enTaxCode = default(string), string eventLogoUrl = default(string), bool txnCharge = default(bool), bool allowGroupDisc = default(bool), int sortSequence = default(int), List<Schedule> schedule = default(List<Schedule>), List<ShowTrackingDetail> showTrackingDetails = default(List<ShowTrackingDetail>), ShowBudget budget = default(ShowBudget), DateTime zonedEventEndDateTime = default(DateTime), DateTime zonedEventStartDateTime = default(DateTime))
        {
            this.EventCode = eventCode;
            this.EventName = eventName;
            this.ItemType = itemType;
            this.EventTimeMinutes = eventTimeMinutes;
            this.Ticketed = ticketed;
            this.TicketStyleCode = ticketStyleCode;
            this.LocationCode = locationCode;
            this.SeatingTemplateCode = seatingTemplateCode;
            this.EventDisplayColor = eventDisplayColor;
            this.AllowOrderTix = allowOrderTix;
            this.InternetSeatsMinimumLimit = internetSeatsMinimumLimit;
            this.EventStartDate = eventStartDate;
            this.EventEndDate = eventEndDate;
            this.Active = active;
            this.EventTypeDetailCode = eventTypeDetailCode;
            this.CompTicketsSeatsMin = compTicketsSeatsMin;
            this.CompTicketsStartDate = compTicketsStartDate;
            this.TheaterLocation = theaterLocation;
            this.EmpDiscDaysToShow = empDiscDaysToShow;
            this.EmpDiscPercent = empDiscPercent;
            this.TaxCode = taxCode;
            this.ExternalBooking = externalBooking;
            this.ExternalBookingThreshold = externalBookingThreshold;
            this.CompTicketsMax = compTicketsMax;
            this.EmpDayTicketsMax = empDayTicketsMax;
            this.PremierShow = premierShow;
            this.Taxable = taxable;
            this.AllowGroup = allowGroup;
            this.EmpSeatsMin = empSeatsMin;
            this.EmpShowMinutes = empShowMinutes;
            this.EmpShowMinutesSeatsMin = empShowMinutesSeatsMin;
            this.PartnerEvent = partnerEvent;
            this.EnTaxCode = enTaxCode;
            this.EventLogoUrl = eventLogoUrl;
            this.TxnCharge = txnCharge;
            this.AllowGroupDisc = allowGroupDisc;
            this.SortSequence = sortSequence;
            this.Schedule = schedule;
            this.ShowTrackingDetails = showTrackingDetails;
            this.Budget = budget;
            this.ZonedEventEndDateTime = zonedEventEndDateTime;
            this.ZonedEventStartDateTime = zonedEventStartDateTime;
        }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name = "eventName", EmitDefaultValue = false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets EventTimeMinutes
        /// </summary>
        [DataMember(Name = "eventTimeMinutes", EmitDefaultValue = false)]
        public int EventTimeMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Ticketed
        /// </summary>
        [DataMember(Name = "ticketed", EmitDefaultValue = true)]
        public bool Ticketed { get; set; }

        /// <summary>
        /// Gets or Sets TicketStyleCode
        /// </summary>
        [DataMember(Name = "ticketStyleCode", EmitDefaultValue = false)]
        public string TicketStyleCode { get; set; }

        /// <summary>
        /// Gets or Sets LocationCode
        /// </summary>
        [DataMember(Name = "locationCode", EmitDefaultValue = false)]
        public string LocationCode { get; set; }

        /// <summary>
        /// Gets or Sets SeatingTemplateCode
        /// </summary>
        [DataMember(Name = "seatingTemplateCode", EmitDefaultValue = false)]
        public string SeatingTemplateCode { get; set; }

        /// <summary>
        /// Gets or Sets EventDisplayColor
        /// </summary>
        [DataMember(Name = "eventDisplayColor", EmitDefaultValue = false)]
        public string EventDisplayColor { get; set; }

        /// <summary>
        /// Gets or Sets AllowOrderTix
        /// </summary>
        [DataMember(Name = "allowOrderTix", EmitDefaultValue = true)]
        public bool AllowOrderTix { get; set; }

        /// <summary>
        /// Gets or Sets InternetSeatsMinimumLimit
        /// </summary>
        [DataMember(Name = "internetSeatsMinimumLimit", EmitDefaultValue = false)]
        public int InternetSeatsMinimumLimit { get; set; }

        /// <summary>
        /// Gets or Sets EventStartDate
        /// </summary>
        [DataMember(Name = "eventStartDate", EmitDefaultValue = false)]
        public DateTime EventStartDate { get; set; }

        /// <summary>
        /// Gets or Sets EventEndDate
        /// </summary>
        [DataMember(Name = "eventEndDate", EmitDefaultValue = false)]
        public DateTime EventEndDate { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets EventTypeDetailCode
        /// </summary>
        [DataMember(Name = "eventTypeDetailCode", EmitDefaultValue = false)]
        public string EventTypeDetailCode { get; set; }

        /// <summary>
        /// Gets or Sets CompTicketsSeatsMin
        /// </summary>
        [DataMember(Name = "compTicketsSeatsMin", EmitDefaultValue = false)]
        public int CompTicketsSeatsMin { get; set; }

        /// <summary>
        /// Gets or Sets CompTicketsStartDate
        /// </summary>
        [DataMember(Name = "compTicketsStartDate", EmitDefaultValue = false)]
        public DateTime CompTicketsStartDate { get; set; }

        /// <summary>
        /// Gets or Sets EmpDiscDaysToShow
        /// </summary>
        [DataMember(Name = "empDiscDaysToShow", EmitDefaultValue = false)]
        public int EmpDiscDaysToShow { get; set; }

        /// <summary>
        /// Gets or Sets EmpDiscPercent
        /// </summary>
        [DataMember(Name = "empDiscPercent", EmitDefaultValue = false)]
        public decimal EmpDiscPercent { get; set; }

        /// <summary>
        /// Gets or Sets TaxCode
        /// </summary>
        [DataMember(Name = "taxCode", EmitDefaultValue = false)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Gets or Sets ExternalBooking
        /// </summary>
        [DataMember(Name = "externalBooking", EmitDefaultValue = true)]
        public bool ExternalBooking { get; set; }

        /// <summary>
        /// Gets or Sets ExternalBookingThreshold
        /// </summary>
        [DataMember(Name = "externalBookingThreshold", EmitDefaultValue = false)]
        public int ExternalBookingThreshold { get; set; }

        /// <summary>
        /// Gets or Sets CompTicketsMax
        /// </summary>
        [DataMember(Name = "compTicketsMax", EmitDefaultValue = false)]
        public int CompTicketsMax { get; set; }

        /// <summary>
        /// Gets or Sets EmpDayTicketsMax
        /// </summary>
        [DataMember(Name = "empDayTicketsMax", EmitDefaultValue = false)]
        public int EmpDayTicketsMax { get; set; }

        /// <summary>
        /// Gets or Sets PremierShow
        /// </summary>
        [DataMember(Name = "premierShow", EmitDefaultValue = true)]
        public bool PremierShow { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name = "taxable", EmitDefaultValue = true)]
        public bool Taxable { get; set; }

        /// <summary>
        /// Gets or Sets AllowGroup
        /// </summary>
        [DataMember(Name = "allowGroup", EmitDefaultValue = true)]
        public bool AllowGroup { get; set; }

        /// <summary>
        /// Gets or Sets EmpSeatsMin
        /// </summary>
        [DataMember(Name = "empSeatsMin", EmitDefaultValue = false)]
        public int EmpSeatsMin { get; set; }

        /// <summary>
        /// Gets or Sets EmpShowMinutes
        /// </summary>
        [DataMember(Name = "empShowMinutes", EmitDefaultValue = false)]
        public int EmpShowMinutes { get; set; }

        /// <summary>
        /// Gets or Sets EmpShowMinutesSeatsMin
        /// </summary>
        [DataMember(Name = "empShowMinutesSeatsMin", EmitDefaultValue = false)]
        public int EmpShowMinutesSeatsMin { get; set; }

        /// <summary>
        /// Gets or Sets PartnerEvent
        /// </summary>
        [DataMember(Name = "partnerEvent", EmitDefaultValue = true)]
        public bool PartnerEvent { get; set; }

        /// <summary>
        /// Gets or Sets EnTaxCode
        /// </summary>
        [DataMember(Name = "enTaxCode", EmitDefaultValue = false)]
        public string EnTaxCode { get; set; }

        /// <summary>
        /// Gets or Sets EventLogoUrl
        /// </summary>
        [DataMember(Name = "eventLogoUrl", EmitDefaultValue = false)]
        public string EventLogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets TxnCharge
        /// </summary>
        [DataMember(Name = "txnCharge", EmitDefaultValue = true)]
        public bool TxnCharge { get; set; }

        /// <summary>
        /// Gets or Sets AllowGroupDisc
        /// </summary>
        [DataMember(Name = "allowGroupDisc", EmitDefaultValue = true)]
        public bool AllowGroupDisc { get; set; }

        /// <summary>
        /// Gets or Sets SortSequence
        /// </summary>
        [DataMember(Name = "sortSequence", EmitDefaultValue = false)]
        public int SortSequence { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public List<Schedule> Schedule { get; set; }

        /// <summary>
        /// Gets or Sets ShowTrackingDetails
        /// </summary>
        [DataMember(Name = "showTrackingDetails", EmitDefaultValue = false)]
        public List<ShowTrackingDetail> ShowTrackingDetails { get; set; }

        /// <summary>
        /// Gets or Sets Budget
        /// </summary>
        [DataMember(Name = "budget", EmitDefaultValue = false)]
        public ShowBudget Budget { get; set; }

        /// <summary>
        /// Gets or Sets ZonedEventEndDateTime
        /// </summary>
        [DataMember(Name = "zonedEventEndDateTime", EmitDefaultValue = false)]
        public DateTime ZonedEventEndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ZonedEventStartDateTime
        /// </summary>
        [DataMember(Name = "zonedEventStartDateTime", EmitDefaultValue = false)]
        public DateTime ZonedEventStartDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  EventTimeMinutes: ").Append(EventTimeMinutes).Append("\n");
            sb.Append("  Ticketed: ").Append(Ticketed).Append("\n");
            sb.Append("  TicketStyleCode: ").Append(TicketStyleCode).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  SeatingTemplateCode: ").Append(SeatingTemplateCode).Append("\n");
            sb.Append("  EventDisplayColor: ").Append(EventDisplayColor).Append("\n");
            sb.Append("  AllowOrderTix: ").Append(AllowOrderTix).Append("\n");
            sb.Append("  InternetSeatsMinimumLimit: ").Append(InternetSeatsMinimumLimit).Append("\n");
            sb.Append("  EventStartDate: ").Append(EventStartDate).Append("\n");
            sb.Append("  EventEndDate: ").Append(EventEndDate).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  EventTypeDetailCode: ").Append(EventTypeDetailCode).Append("\n");
            sb.Append("  CompTicketsSeatsMin: ").Append(CompTicketsSeatsMin).Append("\n");
            sb.Append("  CompTicketsStartDate: ").Append(CompTicketsStartDate).Append("\n");
            sb.Append("  TheaterLocation: ").Append(TheaterLocation).Append("\n");
            sb.Append("  EmpDiscDaysToShow: ").Append(EmpDiscDaysToShow).Append("\n");
            sb.Append("  EmpDiscPercent: ").Append(EmpDiscPercent).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  ExternalBooking: ").Append(ExternalBooking).Append("\n");
            sb.Append("  ExternalBookingThreshold: ").Append(ExternalBookingThreshold).Append("\n");
            sb.Append("  CompTicketsMax: ").Append(CompTicketsMax).Append("\n");
            sb.Append("  EmpDayTicketsMax: ").Append(EmpDayTicketsMax).Append("\n");
            sb.Append("  PremierShow: ").Append(PremierShow).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  AllowGroup: ").Append(AllowGroup).Append("\n");
            sb.Append("  EmpSeatsMin: ").Append(EmpSeatsMin).Append("\n");
            sb.Append("  EmpShowMinutes: ").Append(EmpShowMinutes).Append("\n");
            sb.Append("  EmpShowMinutesSeatsMin: ").Append(EmpShowMinutesSeatsMin).Append("\n");
            sb.Append("  PartnerEvent: ").Append(PartnerEvent).Append("\n");
            sb.Append("  EnTaxCode: ").Append(EnTaxCode).Append("\n");
            sb.Append("  EventLogoUrl: ").Append(EventLogoUrl).Append("\n");
            sb.Append("  TxnCharge: ").Append(TxnCharge).Append("\n");
            sb.Append("  AllowGroupDisc: ").Append(AllowGroupDisc).Append("\n");
            sb.Append("  SortSequence: ").Append(SortSequence).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  ShowTrackingDetails: ").Append(ShowTrackingDetails).Append("\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  ZonedEventEndDateTime: ").Append(ZonedEventEndDateTime).Append("\n");
            sb.Append("  ZonedEventStartDateTime: ").Append(ZonedEventStartDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Event);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="input">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    this.ItemType.Equals(input.ItemType)
                ) && 
                (
                    this.EventTimeMinutes == input.EventTimeMinutes ||
                    this.EventTimeMinutes.Equals(input.EventTimeMinutes)
                ) && 
                (
                    this.Ticketed == input.Ticketed ||
                    this.Ticketed.Equals(input.Ticketed)
                ) && 
                (
                    this.TicketStyleCode == input.TicketStyleCode ||
                    (this.TicketStyleCode != null &&
                    this.TicketStyleCode.Equals(input.TicketStyleCode))
                ) && 
                (
                    this.LocationCode == input.LocationCode ||
                    (this.LocationCode != null &&
                    this.LocationCode.Equals(input.LocationCode))
                ) && 
                (
                    this.SeatingTemplateCode == input.SeatingTemplateCode ||
                    (this.SeatingTemplateCode != null &&
                    this.SeatingTemplateCode.Equals(input.SeatingTemplateCode))
                ) && 
                (
                    this.EventDisplayColor == input.EventDisplayColor ||
                    (this.EventDisplayColor != null &&
                    this.EventDisplayColor.Equals(input.EventDisplayColor))
                ) && 
                (
                    this.AllowOrderTix == input.AllowOrderTix ||
                    this.AllowOrderTix.Equals(input.AllowOrderTix)
                ) && 
                (
                    this.InternetSeatsMinimumLimit == input.InternetSeatsMinimumLimit ||
                    this.InternetSeatsMinimumLimit.Equals(input.InternetSeatsMinimumLimit)
                ) && 
                (
                    this.EventStartDate == input.EventStartDate ||
                    (this.EventStartDate != null &&
                    this.EventStartDate.Equals(input.EventStartDate))
                ) && 
                (
                    this.EventEndDate == input.EventEndDate ||
                    (this.EventEndDate != null &&
                    this.EventEndDate.Equals(input.EventEndDate))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.EventTypeDetailCode == input.EventTypeDetailCode ||
                    (this.EventTypeDetailCode != null &&
                    this.EventTypeDetailCode.Equals(input.EventTypeDetailCode))
                ) && 
                (
                    this.CompTicketsSeatsMin == input.CompTicketsSeatsMin ||
                    this.CompTicketsSeatsMin.Equals(input.CompTicketsSeatsMin)
                ) && 
                (
                    this.CompTicketsStartDate == input.CompTicketsStartDate ||
                    (this.CompTicketsStartDate != null &&
                    this.CompTicketsStartDate.Equals(input.CompTicketsStartDate))
                ) && 
                (
                    this.TheaterLocation == input.TheaterLocation ||
                    this.TheaterLocation.Equals(input.TheaterLocation)
                ) && 
                (
                    this.EmpDiscDaysToShow == input.EmpDiscDaysToShow ||
                    this.EmpDiscDaysToShow.Equals(input.EmpDiscDaysToShow)
                ) && 
                (
                    this.EmpDiscPercent == input.EmpDiscPercent ||
                    this.EmpDiscPercent.Equals(input.EmpDiscPercent)
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) && 
                (
                    this.ExternalBooking == input.ExternalBooking ||
                    this.ExternalBooking.Equals(input.ExternalBooking)
                ) && 
                (
                    this.ExternalBookingThreshold == input.ExternalBookingThreshold ||
                    this.ExternalBookingThreshold.Equals(input.ExternalBookingThreshold)
                ) && 
                (
                    this.CompTicketsMax == input.CompTicketsMax ||
                    this.CompTicketsMax.Equals(input.CompTicketsMax)
                ) && 
                (
                    this.EmpDayTicketsMax == input.EmpDayTicketsMax ||
                    this.EmpDayTicketsMax.Equals(input.EmpDayTicketsMax)
                ) && 
                (
                    this.PremierShow == input.PremierShow ||
                    this.PremierShow.Equals(input.PremierShow)
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    this.Taxable.Equals(input.Taxable)
                ) && 
                (
                    this.AllowGroup == input.AllowGroup ||
                    this.AllowGroup.Equals(input.AllowGroup)
                ) && 
                (
                    this.EmpSeatsMin == input.EmpSeatsMin ||
                    this.EmpSeatsMin.Equals(input.EmpSeatsMin)
                ) && 
                (
                    this.EmpShowMinutes == input.EmpShowMinutes ||
                    this.EmpShowMinutes.Equals(input.EmpShowMinutes)
                ) && 
                (
                    this.EmpShowMinutesSeatsMin == input.EmpShowMinutesSeatsMin ||
                    this.EmpShowMinutesSeatsMin.Equals(input.EmpShowMinutesSeatsMin)
                ) && 
                (
                    this.PartnerEvent == input.PartnerEvent ||
                    this.PartnerEvent.Equals(input.PartnerEvent)
                ) && 
                (
                    this.EnTaxCode == input.EnTaxCode ||
                    (this.EnTaxCode != null &&
                    this.EnTaxCode.Equals(input.EnTaxCode))
                ) && 
                (
                    this.EventLogoUrl == input.EventLogoUrl ||
                    (this.EventLogoUrl != null &&
                    this.EventLogoUrl.Equals(input.EventLogoUrl))
                ) && 
                (
                    this.TxnCharge == input.TxnCharge ||
                    this.TxnCharge.Equals(input.TxnCharge)
                ) && 
                (
                    this.AllowGroupDisc == input.AllowGroupDisc ||
                    this.AllowGroupDisc.Equals(input.AllowGroupDisc)
                ) && 
                (
                    this.SortSequence == input.SortSequence ||
                    this.SortSequence.Equals(input.SortSequence)
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    this.Schedule != null &&
                    input.Schedule != null &&
                    this.Schedule.SequenceEqual(input.Schedule)
                ) && 
                (
                    this.ShowTrackingDetails == input.ShowTrackingDetails ||
                    this.ShowTrackingDetails != null &&
                    input.ShowTrackingDetails != null &&
                    this.ShowTrackingDetails.SequenceEqual(input.ShowTrackingDetails)
                ) && 
                (
                    this.Budget == input.Budget ||
                    (this.Budget != null &&
                    this.Budget.Equals(input.Budget))
                ) && 
                (
                    this.ZonedEventEndDateTime == input.ZonedEventEndDateTime ||
                    (this.ZonedEventEndDateTime != null &&
                    this.ZonedEventEndDateTime.Equals(input.ZonedEventEndDateTime))
                ) && 
                (
                    this.ZonedEventStartDateTime == input.ZonedEventStartDateTime ||
                    (this.ZonedEventStartDateTime != null &&
                    this.ZonedEventStartDateTime.Equals(input.ZonedEventStartDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                if (this.EventName != null)
                {
                    hashCode = (hashCode * 59) + this.EventName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                hashCode = (hashCode * 59) + this.EventTimeMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.Ticketed.GetHashCode();
                if (this.TicketStyleCode != null)
                {
                    hashCode = (hashCode * 59) + this.TicketStyleCode.GetHashCode();
                }
                if (this.LocationCode != null)
                {
                    hashCode = (hashCode * 59) + this.LocationCode.GetHashCode();
                }
                if (this.SeatingTemplateCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatingTemplateCode.GetHashCode();
                }
                if (this.EventDisplayColor != null)
                {
                    hashCode = (hashCode * 59) + this.EventDisplayColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowOrderTix.GetHashCode();
                hashCode = (hashCode * 59) + this.InternetSeatsMinimumLimit.GetHashCode();
                if (this.EventStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventStartDate.GetHashCode();
                }
                if (this.EventEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventEndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.EventTypeDetailCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypeDetailCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompTicketsSeatsMin.GetHashCode();
                if (this.CompTicketsStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompTicketsStartDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TheaterLocation.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpDiscDaysToShow.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpDiscPercent.GetHashCode();
                if (this.TaxCode != null)
                {
                    hashCode = (hashCode * 59) + this.TaxCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExternalBooking.GetHashCode();
                hashCode = (hashCode * 59) + this.ExternalBookingThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.CompTicketsMax.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpDayTicketsMax.GetHashCode();
                hashCode = (hashCode * 59) + this.PremierShow.GetHashCode();
                hashCode = (hashCode * 59) + this.Taxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowGroup.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpSeatsMin.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpShowMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.EmpShowMinutesSeatsMin.GetHashCode();
                hashCode = (hashCode * 59) + this.PartnerEvent.GetHashCode();
                if (this.EnTaxCode != null)
                {
                    hashCode = (hashCode * 59) + this.EnTaxCode.GetHashCode();
                }
                if (this.EventLogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.EventLogoUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TxnCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowGroupDisc.GetHashCode();
                hashCode = (hashCode * 59) + this.SortSequence.GetHashCode();
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                if (this.ShowTrackingDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ShowTrackingDetails.GetHashCode();
                }
                if (this.Budget != null)
                {
                    hashCode = (hashCode * 59) + this.Budget.GetHashCode();
                }
                if (this.ZonedEventEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ZonedEventEndDateTime.GetHashCode();
                }
                if (this.ZonedEventStartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ZonedEventStartDateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EventName (string) maxLength
            if (this.EventName != null && this.EventName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, length must be less than 50.", new [] { "EventName" });
            }

            // EventName (string) minLength
            if (this.EventName != null && this.EventName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventName, length must be greater than 0.", new [] { "EventName" });
            }

            // TicketStyleCode (string) maxLength
            if (this.TicketStyleCode != null && this.TicketStyleCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TicketStyleCode, length must be less than 10.", new [] { "TicketStyleCode" });
            }

            // TicketStyleCode (string) minLength
            if (this.TicketStyleCode != null && this.TicketStyleCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TicketStyleCode, length must be greater than 0.", new [] { "TicketStyleCode" });
            }

            // SeatingTemplateCode (string) maxLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be less than 30.", new [] { "SeatingTemplateCode" });
            }

            // SeatingTemplateCode (string) minLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be greater than 0.", new [] { "SeatingTemplateCode" });
            }

            // EventDisplayColor (string) maxLength
            if (this.EventDisplayColor != null && this.EventDisplayColor.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDisplayColor, length must be less than 10.", new [] { "EventDisplayColor" });
            }

            // EventDisplayColor (string) minLength
            if (this.EventDisplayColor != null && this.EventDisplayColor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDisplayColor, length must be greater than 0.", new [] { "EventDisplayColor" });
            }

            // EventTypeDetailCode (string) maxLength
            if (this.EventTypeDetailCode != null && this.EventTypeDetailCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventTypeDetailCode, length must be less than 20.", new [] { "EventTypeDetailCode" });
            }

            // EventTypeDetailCode (string) minLength
            if (this.EventTypeDetailCode != null && this.EventTypeDetailCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventTypeDetailCode, length must be greater than 0.", new [] { "EventTypeDetailCode" });
            }

            // EnTaxCode (string) maxLength
            if (this.EnTaxCode != null && this.EnTaxCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnTaxCode, length must be less than 20.", new [] { "EnTaxCode" });
            }

            // EnTaxCode (string) minLength
            if (this.EnTaxCode != null && this.EnTaxCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnTaxCode, length must be greater than 0.", new [] { "EnTaxCode" });
            }

            // EventLogoUrl (string) maxLength
            if (this.EventLogoUrl != null && this.EventLogoUrl.Length > 286)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventLogoUrl, length must be less than 286.", new [] { "EventLogoUrl" });
            }

            // EventLogoUrl (string) minLength
            if (this.EventLogoUrl != null && this.EventLogoUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventLogoUrl, length must be greater than 0.", new [] { "EventLogoUrl" });
            }

            yield break;
        }
    }

}
