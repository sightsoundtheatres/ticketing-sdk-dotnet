/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// SpecialSituationDefinition
    /// </summary>
    [DataContract(Name = "SpecialSituationDefinition")]
    public partial class SpecialSituationDefinition : IEquatable<SpecialSituationDefinition>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemTypeCode
        /// </summary>
        [DataMember(Name = "itemTypeCode", EmitDefaultValue = false)]
        public ItemType? ItemTypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialSituationDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpecialSituationDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialSituationDefinition" /> class.
        /// </summary>
        /// <param name="specialSituationCode">specialSituationCode (required).</param>
        /// <param name="display">display.</param>
        /// <param name="emailDestination">emailDestination.</param>
        /// <param name="itemTypeCode">itemTypeCode.</param>
        /// <param name="sendEmail">sendEmail.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="specialSituationDesc">specialSituationDesc.</param>
        public SpecialSituationDefinition(string specialSituationCode = default(string), bool display = default(bool), string emailDestination = default(string), ItemType? itemTypeCode = default(ItemType?), bool sendEmail = default(bool), int sortOrder = default(int), string specialSituationDesc = default(string))
        {
            // to ensure "specialSituationCode" is required (not null)
            if (specialSituationCode == null)
            {
                throw new ArgumentNullException("specialSituationCode is a required property for SpecialSituationDefinition and cannot be null");
            }
            this.SpecialSituationCode = specialSituationCode;
            this.Display = display;
            this.EmailDestination = emailDestination;
            this.ItemTypeCode = itemTypeCode;
            this.SendEmail = sendEmail;
            this.SortOrder = sortOrder;
            this.SpecialSituationDesc = specialSituationDesc;
        }

        /// <summary>
        /// Gets or Sets SpecialSituationCode
        /// </summary>
        [DataMember(Name = "specialSituationCode", IsRequired = true, EmitDefaultValue = false)]
        public string SpecialSituationCode { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name = "display", EmitDefaultValue = true)]
        public bool Display { get; set; }

        /// <summary>
        /// Gets or Sets EmailDestination
        /// </summary>
        [DataMember(Name = "emailDestination", EmitDefaultValue = false)]
        public string EmailDestination { get; set; }

        /// <summary>
        /// Gets or Sets SendEmail
        /// </summary>
        [DataMember(Name = "sendEmail", EmitDefaultValue = true)]
        public bool SendEmail { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "sortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets SpecialSituationDesc
        /// </summary>
        [DataMember(Name = "specialSituationDesc", EmitDefaultValue = false)]
        public string SpecialSituationDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecialSituationDefinition {\n");
            sb.Append("  SpecialSituationCode: ").Append(SpecialSituationCode).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  EmailDestination: ").Append(EmailDestination).Append("\n");
            sb.Append("  ItemTypeCode: ").Append(ItemTypeCode).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  SpecialSituationDesc: ").Append(SpecialSituationDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecialSituationDefinition);
        }

        /// <summary>
        /// Returns true if SpecialSituationDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecialSituationDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecialSituationDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SpecialSituationCode == input.SpecialSituationCode ||
                    (this.SpecialSituationCode != null &&
                    this.SpecialSituationCode.Equals(input.SpecialSituationCode))
                ) && 
                (
                    this.Display == input.Display ||
                    this.Display.Equals(input.Display)
                ) && 
                (
                    this.EmailDestination == input.EmailDestination ||
                    (this.EmailDestination != null &&
                    this.EmailDestination.Equals(input.EmailDestination))
                ) && 
                (
                    this.ItemTypeCode == input.ItemTypeCode ||
                    this.ItemTypeCode.Equals(input.ItemTypeCode)
                ) && 
                (
                    this.SendEmail == input.SendEmail ||
                    this.SendEmail.Equals(input.SendEmail)
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                ) && 
                (
                    this.SpecialSituationDesc == input.SpecialSituationDesc ||
                    (this.SpecialSituationDesc != null &&
                    this.SpecialSituationDesc.Equals(input.SpecialSituationDesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpecialSituationCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialSituationCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Display.GetHashCode();
                if (this.EmailDestination != null)
                {
                    hashCode = (hashCode * 59) + this.EmailDestination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemTypeCode.GetHashCode();
                hashCode = (hashCode * 59) + this.SendEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                if (this.SpecialSituationDesc != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialSituationDesc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SpecialSituationCode (string) maxLength
            if (this.SpecialSituationCode != null && this.SpecialSituationCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialSituationCode, length must be less than 20.", new [] { "SpecialSituationCode" });
            }

            // SpecialSituationCode (string) minLength
            if (this.SpecialSituationCode != null && this.SpecialSituationCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialSituationCode, length must be greater than 0.", new [] { "SpecialSituationCode" });
            }

            // EmailDestination (string) maxLength
            if (this.EmailDestination != null && this.EmailDestination.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailDestination, length must be less than 40.", new [] { "EmailDestination" });
            }

            // EmailDestination (string) minLength
            if (this.EmailDestination != null && this.EmailDestination.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailDestination, length must be greater than 0.", new [] { "EmailDestination" });
            }

            // SpecialSituationDesc (string) maxLength
            if (this.SpecialSituationDesc != null && this.SpecialSituationDesc.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialSituationDesc, length must be less than 50.", new [] { "SpecialSituationDesc" });
            }

            // SpecialSituationDesc (string) minLength
            if (this.SpecialSituationDesc != null && this.SpecialSituationDesc.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialSituationDesc, length must be greater than 0.", new [] { "SpecialSituationDesc" });
            }

            yield break;
        }
    }

}
