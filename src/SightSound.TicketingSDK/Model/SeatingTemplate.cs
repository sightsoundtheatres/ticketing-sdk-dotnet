/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// SeatingTemplate
    /// </summary>
    [DataContract(Name = "SeatingTemplate")]
    public partial class SeatingTemplate : IEquatable<SeatingTemplate>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LocationCode
        /// </summary>
        [DataMember(Name = "locationCode", IsRequired = true, EmitDefaultValue = false)]
        public TheaterLocation LocationCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeatingTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SeatingTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeatingTemplate" /> class.
        /// </summary>
        /// <param name="seatingTemplateCode">seatingTemplateCode (required).</param>
        /// <param name="seatingCapacity">seatingCapacity (required).</param>
        /// <param name="seatingTemplateDescription">seatingTemplateDescription.</param>
        /// <param name="overflow">overflow (required).</param>
        /// <param name="locationCode">locationCode (required).</param>
        /// <param name="masterTemplateYN">masterTemplateYN (required).</param>
        /// <param name="overflowMax">overflowMax (required).</param>
        /// <param name="seatProfileCode">seatProfileCode.</param>
        /// <param name="active">active (required).</param>
        /// <param name="wheelchairCapacity">wheelchairCapacity (required).</param>
        /// <param name="sections">sections.</param>
        /// <param name="seats">seats.</param>
        /// <param name="profile">profile.</param>
        /// <param name="xcoordCenter">xcoordCenter.</param>
        /// <param name="ycoordBestRow">ycoordBestRow.</param>
        public SeatingTemplate(string seatingTemplateCode = default(string), int seatingCapacity = default(int), string seatingTemplateDescription = default(string), bool overflow = default(bool), TheaterLocation locationCode = default(TheaterLocation), string masterTemplateYN = default(string), int overflowMax = default(int), string seatProfileCode = default(string), bool active = default(bool), int wheelchairCapacity = default(int), List<SeatingTemplateSection> sections = default(List<SeatingTemplateSection>), List<SeatingTemplateSectionSeat> seats = default(List<SeatingTemplateSectionSeat>), SeatingProfile profile = default(SeatingProfile), int xcoordCenter = default(int), int ycoordBestRow = default(int))
        {
            // to ensure "seatingTemplateCode" is required (not null)
            if (seatingTemplateCode == null)
            {
                throw new ArgumentNullException("seatingTemplateCode is a required property for SeatingTemplate and cannot be null");
            }
            this.SeatingTemplateCode = seatingTemplateCode;
            this.SeatingCapacity = seatingCapacity;
            this.Overflow = overflow;
            this.LocationCode = locationCode;
            // to ensure "masterTemplateYN" is required (not null)
            if (masterTemplateYN == null)
            {
                throw new ArgumentNullException("masterTemplateYN is a required property for SeatingTemplate and cannot be null");
            }
            this.MasterTemplateYN = masterTemplateYN;
            this.OverflowMax = overflowMax;
            this.Active = active;
            this.WheelchairCapacity = wheelchairCapacity;
            this.SeatingTemplateDescription = seatingTemplateDescription;
            this.SeatProfileCode = seatProfileCode;
            this.Sections = sections;
            this.Seats = seats;
            this.Profile = profile;
            this.XcoordCenter = xcoordCenter;
            this.YcoordBestRow = ycoordBestRow;
        }

        /// <summary>
        /// Gets or Sets SeatingTemplateCode
        /// </summary>
        [DataMember(Name = "seatingTemplateCode", IsRequired = true, EmitDefaultValue = false)]
        public string SeatingTemplateCode { get; set; }

        /// <summary>
        /// Gets or Sets SeatingCapacity
        /// </summary>
        [DataMember(Name = "seatingCapacity", IsRequired = true, EmitDefaultValue = false)]
        public int SeatingCapacity { get; set; }

        /// <summary>
        /// Gets or Sets SeatingTemplateDescription
        /// </summary>
        [DataMember(Name = "seatingTemplateDescription", EmitDefaultValue = false)]
        public string SeatingTemplateDescription { get; set; }

        /// <summary>
        /// Gets or Sets Overflow
        /// </summary>
        [DataMember(Name = "overflow", IsRequired = true, EmitDefaultValue = true)]
        public bool Overflow { get; set; }

        /// <summary>
        /// Gets or Sets MasterTemplateYN
        /// </summary>
        [DataMember(Name = "masterTemplateYN", IsRequired = true, EmitDefaultValue = false)]
        public string MasterTemplateYN { get; set; }

        /// <summary>
        /// Gets or Sets OverflowMax
        /// </summary>
        [DataMember(Name = "overflowMax", IsRequired = true, EmitDefaultValue = false)]
        public int OverflowMax { get; set; }

        /// <summary>
        /// Gets or Sets SeatProfileCode
        /// </summary>
        [DataMember(Name = "seatProfileCode", EmitDefaultValue = false)]
        public string SeatProfileCode { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets WheelchairCapacity
        /// </summary>
        [DataMember(Name = "wheelchairCapacity", IsRequired = true, EmitDefaultValue = false)]
        public int WheelchairCapacity { get; set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [DataMember(Name = "sections", EmitDefaultValue = false)]
        public List<SeatingTemplateSection> Sections { get; set; }

        /// <summary>
        /// Gets or Sets Seats
        /// </summary>
        [DataMember(Name = "seats", EmitDefaultValue = false)]
        public List<SeatingTemplateSectionSeat> Seats { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public SeatingProfile Profile { get; set; }

        /// <summary>
        /// Gets or Sets XcoordCenter
        /// </summary>
        [DataMember(Name = "xcoordCenter", EmitDefaultValue = false)]
        public int XcoordCenter { get; set; }

        /// <summary>
        /// Gets or Sets YcoordBestRow
        /// </summary>
        [DataMember(Name = "ycoordBestRow", EmitDefaultValue = false)]
        public int YcoordBestRow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SeatingTemplate {\n");
            sb.Append("  SeatingTemplateCode: ").Append(SeatingTemplateCode).Append("\n");
            sb.Append("  SeatingCapacity: ").Append(SeatingCapacity).Append("\n");
            sb.Append("  SeatingTemplateDescription: ").Append(SeatingTemplateDescription).Append("\n");
            sb.Append("  Overflow: ").Append(Overflow).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  MasterTemplateYN: ").Append(MasterTemplateYN).Append("\n");
            sb.Append("  OverflowMax: ").Append(OverflowMax).Append("\n");
            sb.Append("  SeatProfileCode: ").Append(SeatProfileCode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  WheelchairCapacity: ").Append(WheelchairCapacity).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  XcoordCenter: ").Append(XcoordCenter).Append("\n");
            sb.Append("  YcoordBestRow: ").Append(YcoordBestRow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeatingTemplate);
        }

        /// <summary>
        /// Returns true if SeatingTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of SeatingTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeatingTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SeatingTemplateCode == input.SeatingTemplateCode ||
                    (this.SeatingTemplateCode != null &&
                    this.SeatingTemplateCode.Equals(input.SeatingTemplateCode))
                ) && 
                (
                    this.SeatingCapacity == input.SeatingCapacity ||
                    this.SeatingCapacity.Equals(input.SeatingCapacity)
                ) && 
                (
                    this.SeatingTemplateDescription == input.SeatingTemplateDescription ||
                    (this.SeatingTemplateDescription != null &&
                    this.SeatingTemplateDescription.Equals(input.SeatingTemplateDescription))
                ) && 
                (
                    this.Overflow == input.Overflow ||
                    this.Overflow.Equals(input.Overflow)
                ) && 
                (
                    this.LocationCode == input.LocationCode ||
                    this.LocationCode.Equals(input.LocationCode)
                ) && 
                (
                    this.MasterTemplateYN == input.MasterTemplateYN ||
                    (this.MasterTemplateYN != null &&
                    this.MasterTemplateYN.Equals(input.MasterTemplateYN))
                ) && 
                (
                    this.OverflowMax == input.OverflowMax ||
                    this.OverflowMax.Equals(input.OverflowMax)
                ) && 
                (
                    this.SeatProfileCode == input.SeatProfileCode ||
                    (this.SeatProfileCode != null &&
                    this.SeatProfileCode.Equals(input.SeatProfileCode))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.WheelchairCapacity == input.WheelchairCapacity ||
                    this.WheelchairCapacity.Equals(input.WheelchairCapacity)
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    input.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.Seats == input.Seats ||
                    this.Seats != null &&
                    input.Seats != null &&
                    this.Seats.SequenceEqual(input.Seats)
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.XcoordCenter == input.XcoordCenter ||
                    this.XcoordCenter.Equals(input.XcoordCenter)
                ) && 
                (
                    this.YcoordBestRow == input.YcoordBestRow ||
                    this.YcoordBestRow.Equals(input.YcoordBestRow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SeatingTemplateCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatingTemplateCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeatingCapacity.GetHashCode();
                if (this.SeatingTemplateDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SeatingTemplateDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Overflow.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationCode.GetHashCode();
                if (this.MasterTemplateYN != null)
                {
                    hashCode = (hashCode * 59) + this.MasterTemplateYN.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverflowMax.GetHashCode();
                if (this.SeatProfileCode != null)
                {
                    hashCode = (hashCode * 59) + this.SeatProfileCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.WheelchairCapacity.GetHashCode();
                if (this.Sections != null)
                {
                    hashCode = (hashCode * 59) + this.Sections.GetHashCode();
                }
                if (this.Seats != null)
                {
                    hashCode = (hashCode * 59) + this.Seats.GetHashCode();
                }
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.XcoordCenter.GetHashCode();
                hashCode = (hashCode * 59) + this.YcoordBestRow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SeatingTemplateCode (string) maxLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be less than 30.", new [] { "SeatingTemplateCode" });
            }

            // SeatingTemplateCode (string) minLength
            if (this.SeatingTemplateCode != null && this.SeatingTemplateCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateCode, length must be greater than 0.", new [] { "SeatingTemplateCode" });
            }

            // SeatingTemplateDescription (string) maxLength
            if (this.SeatingTemplateDescription != null && this.SeatingTemplateDescription.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateDescription, length must be less than 30.", new [] { "SeatingTemplateDescription" });
            }

            // SeatingTemplateDescription (string) minLength
            if (this.SeatingTemplateDescription != null && this.SeatingTemplateDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatingTemplateDescription, length must be greater than 0.", new [] { "SeatingTemplateDescription" });
            }

            // MasterTemplateYN (string) maxLength
            if (this.MasterTemplateYN != null && this.MasterTemplateYN.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MasterTemplateYN, length must be less than 20.", new [] { "MasterTemplateYN" });
            }

            // MasterTemplateYN (string) minLength
            if (this.MasterTemplateYN != null && this.MasterTemplateYN.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MasterTemplateYN, length must be greater than 0.", new [] { "MasterTemplateYN" });
            }

            // SeatProfileCode (string) maxLength
            if (this.SeatProfileCode != null && this.SeatProfileCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatProfileCode, length must be less than 10.", new [] { "SeatProfileCode" });
            }

            // SeatProfileCode (string) minLength
            if (this.SeatProfileCode != null && this.SeatProfileCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeatProfileCode, length must be greater than 0.", new [] { "SeatProfileCode" });
            }

            yield break;
        }
    }

}
