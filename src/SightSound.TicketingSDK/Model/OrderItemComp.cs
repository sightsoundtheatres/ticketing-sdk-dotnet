/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// OrderItemComp
    /// </summary>
    [DataContract(Name = "OrderItemComp")]
    public partial class OrderItemComp : IEquatable<OrderItemComp>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CompType
        /// </summary>
        [DataMember(Name = "compType", IsRequired = true, EmitDefaultValue = false)]
        public CompCodeType CompType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemComp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItemComp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemComp" /> class.
        /// </summary>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="itemNumber">itemNumber.</param>
        /// <param name="compNumber">compNumber.</param>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="compType">compType (required).</param>
        /// <param name="uniqueCode">uniqueCode.</param>
        /// <param name="addUserId">addUserId (required).</param>
        /// <param name="addDate">addDate (required).</param>
        /// <param name="adult">adult.</param>
        /// <param name="teen">teen.</param>
        /// <param name="child">child.</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="discCountMax">discCountMax.</param>
        /// <param name="orderItem">orderItem.</param>
        public OrderItemComp(long orderNumber = default(long), int itemNumber = default(int), long compNumber = default(long), string eventCode = default(string), CompCodeType compType = default(CompCodeType), string uniqueCode = default(string), string addUserId = default(string), DateTime addDate = default(DateTime), int adult = default(int), int teen = default(int), int child = default(int), decimal discountPercent = default(decimal), int discCountMax = default(int), OrderItem orderItem = default(OrderItem))
        {
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for OrderItemComp and cannot be null");
            }
            this.EventCode = eventCode;
            this.CompType = compType;
            // to ensure "addUserId" is required (not null)
            if (addUserId == null)
            {
                throw new ArgumentNullException("addUserId is a required property for OrderItemComp and cannot be null");
            }
            this.AddUserId = addUserId;
            this.AddDate = addDate;
            this.OrderNumber = orderNumber;
            this.ItemNumber = itemNumber;
            this.CompNumber = compNumber;
            this.UniqueCode = uniqueCode;
            this.Adult = adult;
            this.Teen = teen;
            this.Child = child;
            this.DiscountPercent = discountPercent;
            this.DiscCountMax = discCountMax;
            this.OrderItem = orderItem;
        }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [DataMember(Name = "itemNumber", EmitDefaultValue = false)]
        public int ItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets CompNumber
        /// </summary>
        [DataMember(Name = "compNumber", EmitDefaultValue = false)]
        public long CompNumber { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets UniqueCode
        /// </summary>
        [DataMember(Name = "uniqueCode", EmitDefaultValue = false)]
        public string UniqueCode { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", IsRequired = true, EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets AddDate
        /// </summary>
        [DataMember(Name = "addDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime AddDate { get; set; }

        /// <summary>
        /// Gets or Sets Adult
        /// </summary>
        [DataMember(Name = "adult", EmitDefaultValue = false)]
        public int Adult { get; set; }

        /// <summary>
        /// Gets or Sets Teen
        /// </summary>
        [DataMember(Name = "teen", EmitDefaultValue = false)]
        public int Teen { get; set; }

        /// <summary>
        /// Gets or Sets Child
        /// </summary>
        [DataMember(Name = "child", EmitDefaultValue = false)]
        public int Child { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name = "discountPercent", EmitDefaultValue = false)]
        public decimal DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets DiscCountMax
        /// </summary>
        [DataMember(Name = "discCountMax", EmitDefaultValue = false)]
        public int DiscCountMax { get; set; }

        /// <summary>
        /// Gets or Sets OrderItem
        /// </summary>
        [DataMember(Name = "orderItem", EmitDefaultValue = false)]
        public OrderItem OrderItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItemComp {\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  CompNumber: ").Append(CompNumber).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  CompType: ").Append(CompType).Append("\n");
            sb.Append("  UniqueCode: ").Append(UniqueCode).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  AddDate: ").Append(AddDate).Append("\n");
            sb.Append("  Adult: ").Append(Adult).Append("\n");
            sb.Append("  Teen: ").Append(Teen).Append("\n");
            sb.Append("  Child: ").Append(Child).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  DiscCountMax: ").Append(DiscCountMax).Append("\n");
            sb.Append("  OrderItem: ").Append(OrderItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItemComp);
        }

        /// <summary>
        /// Returns true if OrderItemComp instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItemComp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemComp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderNumber == input.OrderNumber ||
                    this.OrderNumber.Equals(input.OrderNumber)
                ) && 
                (
                    this.ItemNumber == input.ItemNumber ||
                    this.ItemNumber.Equals(input.ItemNumber)
                ) && 
                (
                    this.CompNumber == input.CompNumber ||
                    this.CompNumber.Equals(input.CompNumber)
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.CompType == input.CompType ||
                    this.CompType.Equals(input.CompType)
                ) && 
                (
                    this.UniqueCode == input.UniqueCode ||
                    (this.UniqueCode != null &&
                    this.UniqueCode.Equals(input.UniqueCode))
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.AddDate == input.AddDate ||
                    (this.AddDate != null &&
                    this.AddDate.Equals(input.AddDate))
                ) && 
                (
                    this.Adult == input.Adult ||
                    this.Adult.Equals(input.Adult)
                ) && 
                (
                    this.Teen == input.Teen ||
                    this.Teen.Equals(input.Teen)
                ) && 
                (
                    this.Child == input.Child ||
                    this.Child.Equals(input.Child)
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    this.DiscountPercent.Equals(input.DiscountPercent)
                ) && 
                (
                    this.DiscCountMax == input.DiscCountMax ||
                    this.DiscCountMax.Equals(input.DiscCountMax)
                ) && 
                (
                    this.OrderItem == input.OrderItem ||
                    (this.OrderItem != null &&
                    this.OrderItem.Equals(input.OrderItem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.CompNumber.GetHashCode();
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompType.GetHashCode();
                if (this.UniqueCode != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueCode.GetHashCode();
                }
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                if (this.AddDate != null)
                {
                    hashCode = (hashCode * 59) + this.AddDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Adult.GetHashCode();
                hashCode = (hashCode * 59) + this.Teen.GetHashCode();
                hashCode = (hashCode * 59) + this.Child.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountPercent.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscCountMax.GetHashCode();
                if (this.OrderItem != null)
                {
                    hashCode = (hashCode * 59) + this.OrderItem.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // UniqueCode (string) maxLength
            if (this.UniqueCode != null && this.UniqueCode.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UniqueCode, length must be less than 50.", new [] { "UniqueCode" });
            }

            // UniqueCode (string) minLength
            if (this.UniqueCode != null && this.UniqueCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UniqueCode, length must be greater than 0.", new [] { "UniqueCode" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            yield break;
        }
    }

}
