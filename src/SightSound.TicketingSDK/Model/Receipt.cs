/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Receipt
    /// </summary>
    [DataContract(Name = "Receipt")]
    public partial class Receipt : IEquatable<Receipt>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", IsRequired = true, EmitDefaultValue = false)]
        public InvoiceCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptStatus
        /// </summary>
        [DataMember(Name = "receiptStatus", EmitDefaultValue = false)]
        public ReceiptStatus? ReceiptStatus { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name = "paymentType", EmitDefaultValue = false)]
        public ReceiptPaymentType? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptType
        /// </summary>
        [DataMember(Name = "receiptType", EmitDefaultValue = false)]
        public ReceiptType? ReceiptType { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
        public ReceiptReasonCode? ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets SyncSource
        /// </summary>
        [DataMember(Name = "syncSource", EmitDefaultValue = false)]
        public SyncSource? SyncSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Receipt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="receiptNumber">receiptNumber.</param>
        /// <param name="company">company (required).</param>
        /// <param name="checkNumber">checkNumber.</param>
        /// <param name="description">description.</param>
        /// <param name="receiptDate">receiptDate (required).</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="receiptAmount">receiptAmount.</param>
        /// <param name="receiptStatus">receiptStatus.</param>
        /// <param name="paidAmount">paidAmount.</param>
        /// <param name="glPeriod">glPeriod.</param>
        /// <param name="bankCode">bankCode.</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="receiptType">receiptType.</param>
        /// <param name="controlNumber">controlNumber.</param>
        /// <param name="reasonCode">reasonCode.</param>
        /// <param name="baseAmount">baseAmount.</param>
        /// <param name="location">location.</param>
        /// <param name="ccSeqNumber">ccSeqNumber.</param>
        /// <param name="modifyDate">modifyDate.</param>
        /// <param name="executiveSeriesReceiptNumber">executiveSeriesReceiptNumber.</param>
        /// <param name="syncSource">syncSource.</param>
        /// <param name="addUserId">addUserId.</param>
        /// <param name="editUserId">editUserId.</param>
        /// <param name="receiptDetails">receiptDetails.</param>
        /// <param name="customer">customer.</param>
        public Receipt(long receiptNumber = default(long), InvoiceCompany company = default(InvoiceCompany), string checkNumber = default(string), string description = default(string), DateTime receiptDate = default(DateTime), long customerNumber = default(long), decimal receiptAmount = default(decimal), ReceiptStatus? receiptStatus = default(ReceiptStatus?), decimal paidAmount = default(decimal), int glPeriod = default(int), string bankCode = default(string), ReceiptPaymentType? paymentType = default(ReceiptPaymentType?), ReceiptType? receiptType = default(ReceiptType?), long controlNumber = default(long), ReceiptReasonCode? reasonCode = default(ReceiptReasonCode?), decimal baseAmount = default(decimal), string location = default(string), long ccSeqNumber = default(long), DateTime modifyDate = default(DateTime), long executiveSeriesReceiptNumber = default(long), SyncSource? syncSource = default(SyncSource?), string addUserId = default(string), string editUserId = default(string), List<ReceiptDetail> receiptDetails = default(List<ReceiptDetail>), Customer customer = default(Customer))
        {
            this.Company = company;
            this.ReceiptDate = receiptDate;
            this.ReceiptNumber = receiptNumber;
            this.CheckNumber = checkNumber;
            this.Description = description;
            this.CustomerNumber = customerNumber;
            this.ReceiptAmount = receiptAmount;
            this.ReceiptStatus = receiptStatus;
            this.PaidAmount = paidAmount;
            this.GlPeriod = glPeriod;
            this.BankCode = bankCode;
            this.PaymentType = paymentType;
            this.ReceiptType = receiptType;
            this.ControlNumber = controlNumber;
            this.ReasonCode = reasonCode;
            this.BaseAmount = baseAmount;
            this.Location = location;
            this.CcSeqNumber = ccSeqNumber;
            this.ModifyDate = modifyDate;
            this.ExecutiveSeriesReceiptNumber = executiveSeriesReceiptNumber;
            this.SyncSource = syncSource;
            this.AddUserId = addUserId;
            this.EditUserId = editUserId;
            this.ReceiptDetails = receiptDetails;
            this.Customer = customer;
        }

        /// <summary>
        /// Gets or Sets ReceiptNumber
        /// </summary>
        [DataMember(Name = "receiptNumber", EmitDefaultValue = false)]
        public long ReceiptNumber { get; set; }

        /// <summary>
        /// Gets or Sets CheckNumber
        /// </summary>
        [DataMember(Name = "checkNumber", EmitDefaultValue = false)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptDate
        /// </summary>
        [DataMember(Name = "receiptDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ReceiptDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "customerNumber", EmitDefaultValue = false)]
        public long CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptAmount
        /// </summary>
        [DataMember(Name = "receiptAmount", EmitDefaultValue = false)]
        public decimal ReceiptAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name = "paidAmount", EmitDefaultValue = false)]
        public decimal PaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets GlPeriod
        /// </summary>
        [DataMember(Name = "glPeriod", EmitDefaultValue = false)]
        public int GlPeriod { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name = "bankCode", EmitDefaultValue = false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets ControlNumber
        /// </summary>
        [DataMember(Name = "controlNumber", EmitDefaultValue = false)]
        public long ControlNumber { get; set; }

        /// <summary>
        /// Gets or Sets BaseAmount
        /// </summary>
        [DataMember(Name = "baseAmount", EmitDefaultValue = false)]
        public decimal BaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets CcSeqNumber
        /// </summary>
        [DataMember(Name = "ccSeqNumber", EmitDefaultValue = false)]
        public long CcSeqNumber { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [DataMember(Name = "modifyDate", EmitDefaultValue = false)]
        public DateTime ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets ExecutiveSeriesReceiptNumber
        /// </summary>
        [DataMember(Name = "executiveSeriesReceiptNumber", EmitDefaultValue = false)]
        public long ExecutiveSeriesReceiptNumber { get; set; }

        /// <summary>
        /// Gets or Sets AddUserId
        /// </summary>
        [DataMember(Name = "addUserId", EmitDefaultValue = false)]
        public string AddUserId { get; set; }

        /// <summary>
        /// Gets or Sets EditUserId
        /// </summary>
        [DataMember(Name = "editUserId", EmitDefaultValue = false)]
        public string EditUserId { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptDetails
        /// </summary>
        [DataMember(Name = "receiptDetails", EmitDefaultValue = false)]
        public List<ReceiptDetail> ReceiptDetails { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  ReceiptNumber: ").Append(ReceiptNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReceiptDate: ").Append(ReceiptDate).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  ReceiptAmount: ").Append(ReceiptAmount).Append("\n");
            sb.Append("  ReceiptStatus: ").Append(ReceiptStatus).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  GlPeriod: ").Append(GlPeriod).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  ReceiptType: ").Append(ReceiptType).Append("\n");
            sb.Append("  ControlNumber: ").Append(ControlNumber).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  CcSeqNumber: ").Append(CcSeqNumber).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  ExecutiveSeriesReceiptNumber: ").Append(ExecutiveSeriesReceiptNumber).Append("\n");
            sb.Append("  SyncSource: ").Append(SyncSource).Append("\n");
            sb.Append("  AddUserId: ").Append(AddUserId).Append("\n");
            sb.Append("  EditUserId: ").Append(EditUserId).Append("\n");
            sb.Append("  ReceiptDetails: ").Append(ReceiptDetails).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Receipt);
        }

        /// <summary>
        /// Returns true if Receipt instances are equal
        /// </summary>
        /// <param name="input">Instance of Receipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Receipt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReceiptNumber == input.ReceiptNumber ||
                    this.ReceiptNumber.Equals(input.ReceiptNumber)
                ) && 
                (
                    this.Company == input.Company ||
                    this.Company.Equals(input.Company)
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ReceiptDate == input.ReceiptDate ||
                    (this.ReceiptDate != null &&
                    this.ReceiptDate.Equals(input.ReceiptDate))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    this.CustomerNumber.Equals(input.CustomerNumber)
                ) && 
                (
                    this.ReceiptAmount == input.ReceiptAmount ||
                    this.ReceiptAmount.Equals(input.ReceiptAmount)
                ) && 
                (
                    this.ReceiptStatus == input.ReceiptStatus ||
                    this.ReceiptStatus.Equals(input.ReceiptStatus)
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    this.PaidAmount.Equals(input.PaidAmount)
                ) && 
                (
                    this.GlPeriod == input.GlPeriod ||
                    this.GlPeriod.Equals(input.GlPeriod)
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    this.PaymentType.Equals(input.PaymentType)
                ) && 
                (
                    this.ReceiptType == input.ReceiptType ||
                    this.ReceiptType.Equals(input.ReceiptType)
                ) && 
                (
                    this.ControlNumber == input.ControlNumber ||
                    this.ControlNumber.Equals(input.ControlNumber)
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    this.ReasonCode.Equals(input.ReasonCode)
                ) && 
                (
                    this.BaseAmount == input.BaseAmount ||
                    this.BaseAmount.Equals(input.BaseAmount)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.CcSeqNumber == input.CcSeqNumber ||
                    this.CcSeqNumber.Equals(input.CcSeqNumber)
                ) && 
                (
                    this.ModifyDate == input.ModifyDate ||
                    (this.ModifyDate != null &&
                    this.ModifyDate.Equals(input.ModifyDate))
                ) && 
                (
                    this.ExecutiveSeriesReceiptNumber == input.ExecutiveSeriesReceiptNumber ||
                    this.ExecutiveSeriesReceiptNumber.Equals(input.ExecutiveSeriesReceiptNumber)
                ) && 
                (
                    this.SyncSource == input.SyncSource ||
                    this.SyncSource.Equals(input.SyncSource)
                ) && 
                (
                    this.AddUserId == input.AddUserId ||
                    (this.AddUserId != null &&
                    this.AddUserId.Equals(input.AddUserId))
                ) && 
                (
                    this.EditUserId == input.EditUserId ||
                    (this.EditUserId != null &&
                    this.EditUserId.Equals(input.EditUserId))
                ) && 
                (
                    this.ReceiptDetails == input.ReceiptDetails ||
                    this.ReceiptDetails != null &&
                    input.ReceiptDetails != null &&
                    this.ReceiptDetails.SequenceEqual(input.ReceiptDetails)
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReceiptNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Company.GetHashCode();
                if (this.CheckNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CheckNumber.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ReceiptDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomerNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiptAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiptStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.GlPeriod.GetHashCode();
                if (this.BankCode != null)
                {
                    hashCode = (hashCode * 59) + this.BankCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentType.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiptType.GetHashCode();
                hashCode = (hashCode * 59) + this.ControlNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ReasonCode.GetHashCode();
                hashCode = (hashCode * 59) + this.BaseAmount.GetHashCode();
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CcSeqNumber.GetHashCode();
                if (this.ModifyDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifyDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExecutiveSeriesReceiptNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.SyncSource.GetHashCode();
                if (this.AddUserId != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserId.GetHashCode();
                }
                if (this.EditUserId != null)
                {
                    hashCode = (hashCode * 59) + this.EditUserId.GetHashCode();
                }
                if (this.ReceiptDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptDetails.GetHashCode();
                }
                if (this.Customer != null)
                {
                    hashCode = (hashCode * 59) + this.Customer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CheckNumber (string) maxLength
            if (this.CheckNumber != null && this.CheckNumber.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckNumber, length must be less than 30.", new [] { "CheckNumber" });
            }

            // CheckNumber (string) minLength
            if (this.CheckNumber != null && this.CheckNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CheckNumber, length must be greater than 0.", new [] { "CheckNumber" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 100.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // BankCode (string) maxLength
            if (this.BankCode != null && this.BankCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankCode, length must be less than 10.", new [] { "BankCode" });
            }

            // BankCode (string) minLength
            if (this.BankCode != null && this.BankCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankCode, length must be greater than 0.", new [] { "BankCode" });
            }

            // Location (string) maxLength
            if (this.Location != null && this.Location.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be less than 50.", new [] { "Location" });
            }

            // Location (string) minLength
            if (this.Location != null && this.Location.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be greater than 0.", new [] { "Location" });
            }

            // AddUserId (string) maxLength
            if (this.AddUserId != null && this.AddUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be less than 50.", new [] { "AddUserId" });
            }

            // AddUserId (string) minLength
            if (this.AddUserId != null && this.AddUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddUserId, length must be greater than 0.", new [] { "AddUserId" });
            }

            // EditUserId (string) maxLength
            if (this.EditUserId != null && this.EditUserId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EditUserId, length must be less than 50.", new [] { "EditUserId" });
            }

            // EditUserId (string) minLength
            if (this.EditUserId != null && this.EditUserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EditUserId, length must be greater than 0.", new [] { "EditUserId" });
            }

            yield break;
        }
    }

}
