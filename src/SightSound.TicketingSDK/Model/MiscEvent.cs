/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// MiscEvent
    /// </summary>
    [DataContract(Name = "MiscEvent")]
    public partial class MiscEvent : IEquatable<MiscEvent>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", EmitDefaultValue = false)]
        public ItemType? ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MiscEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MiscEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MiscEvent" /> class.
        /// </summary>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="eventDescription">eventDescription.</param>
        /// <param name="effectiveStartDate">effectiveStartDate.</param>
        /// <param name="effectiveEndDate">effectiveEndDate.</param>
        /// <param name="showStartDate">showStartDate.</param>
        /// <param name="showEndDate">showEndDate.</param>
        /// <param name="price">price.</param>
        /// <param name="comments">comments.</param>
        public MiscEvent(string eventCode = default(string), ItemType? itemType = default(ItemType?), string eventDescription = default(string), DateTime effectiveStartDate = default(DateTime), DateTime effectiveEndDate = default(DateTime), DateTime showStartDate = default(DateTime), DateTime showEndDate = default(DateTime), decimal price = default(decimal), string comments = default(string))
        {
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for MiscEvent and cannot be null");
            }
            this.EventCode = eventCode;
            this.ItemType = itemType;
            this.EventDescription = eventDescription;
            this.EffectiveStartDate = effectiveStartDate;
            this.EffectiveEndDate = effectiveEndDate;
            this.ShowStartDate = showStartDate;
            this.ShowEndDate = showEndDate;
            this.Price = price;
            this.Comments = comments;
        }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets EventDescription
        /// </summary>
        [DataMember(Name = "eventDescription", EmitDefaultValue = false)]
        public string EventDescription { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveStartDate
        /// </summary>
        [DataMember(Name = "effectiveStartDate", EmitDefaultValue = false)]
        public DateTime EffectiveStartDate { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveEndDate
        /// </summary>
        [DataMember(Name = "effectiveEndDate", EmitDefaultValue = false)]
        public DateTime EffectiveEndDate { get; set; }

        /// <summary>
        /// Gets or Sets ShowStartDate
        /// </summary>
        [DataMember(Name = "showStartDate", EmitDefaultValue = false)]
        public DateTime ShowStartDate { get; set; }

        /// <summary>
        /// Gets or Sets ShowEndDate
        /// </summary>
        [DataMember(Name = "showEndDate", EmitDefaultValue = false)]
        public DateTime ShowEndDate { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MiscEvent {\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  EffectiveStartDate: ").Append(EffectiveStartDate).Append("\n");
            sb.Append("  EffectiveEndDate: ").Append(EffectiveEndDate).Append("\n");
            sb.Append("  ShowStartDate: ").Append(ShowStartDate).Append("\n");
            sb.Append("  ShowEndDate: ").Append(ShowEndDate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MiscEvent);
        }

        /// <summary>
        /// Returns true if MiscEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of MiscEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MiscEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    this.ItemType.Equals(input.ItemType)
                ) && 
                (
                    this.EventDescription == input.EventDescription ||
                    (this.EventDescription != null &&
                    this.EventDescription.Equals(input.EventDescription))
                ) && 
                (
                    this.EffectiveStartDate == input.EffectiveStartDate ||
                    (this.EffectiveStartDate != null &&
                    this.EffectiveStartDate.Equals(input.EffectiveStartDate))
                ) && 
                (
                    this.EffectiveEndDate == input.EffectiveEndDate ||
                    (this.EffectiveEndDate != null &&
                    this.EffectiveEndDate.Equals(input.EffectiveEndDate))
                ) && 
                (
                    this.ShowStartDate == input.ShowStartDate ||
                    (this.ShowStartDate != null &&
                    this.ShowStartDate.Equals(input.ShowStartDate))
                ) && 
                (
                    this.ShowEndDate == input.ShowEndDate ||
                    (this.ShowEndDate != null &&
                    this.ShowEndDate.Equals(input.ShowEndDate))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemType.GetHashCode();
                if (this.EventDescription != null)
                {
                    hashCode = (hashCode * 59) + this.EventDescription.GetHashCode();
                }
                if (this.EffectiveStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveStartDate.GetHashCode();
                }
                if (this.EffectiveEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveEndDate.GetHashCode();
                }
                if (this.ShowStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShowStartDate.GetHashCode();
                }
                if (this.ShowEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShowEndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EventDescription (string) maxLength
            if (this.EventDescription != null && this.EventDescription.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDescription, length must be less than 30.", new [] { "EventDescription" });
            }

            // EventDescription (string) minLength
            if (this.EventDescription != null && this.EventDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDescription, length must be greater than 0.", new [] { "EventDescription" });
            }

            // Comments (string) maxLength
            if (this.Comments != null && this.Comments.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 200.", new [] { "Comments" });
            }

            // Comments (string) minLength
            if (this.Comments != null && this.Comments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be greater than 0.", new [] { "Comments" });
            }

            yield break;
        }
    }

}
