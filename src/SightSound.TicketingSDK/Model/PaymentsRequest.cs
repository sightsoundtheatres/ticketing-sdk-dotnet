/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// PaymentsRequest
    /// </summary>
    [DataContract(Name = "PaymentsRequest")]
    public partial class PaymentsRequest : IEquatable<PaymentsRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public ChannelEnum? Channel { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public EntityTypeEnum? EntityType { get; set; }

        /// <summary>
        /// Gets or Sets ShopperInteraction
        /// </summary>
        [DataMember(Name = "shopperInteraction", EmitDefaultValue = false)]
        public ShopperInteractionEnum? ShopperInteraction { get; set; }

        /// <summary>
        /// Gets or Sets RecurringProcessingModel
        /// </summary>
        [DataMember(Name = "recurringProcessingModel", EmitDefaultValue = false)]
        public RecurringProcessingModelEnum? RecurringProcessingModel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsRequest" /> class.
        /// </summary>
        /// <param name="accountInfo">accountInfo.</param>
        /// <param name="additionalData">additionalData.</param>
        /// <param name="amount">amount.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="captureDelayHours">captureDelayHours.</param>
        /// <param name="checkoutAttemptId">checkoutAttemptId.</param>
        /// <param name="channel">channel.</param>
        /// <param name="company">company.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="dccQuote">dccQuote.</param>
        /// <param name="deliveryAddress">deliveryAddress.</param>
        /// <param name="deliveryDate">deliveryDate.</param>
        /// <param name="enableOneClick">enableOneClick.</param>
        /// <param name="enablePayOut">enablePayOut.</param>
        /// <param name="enableRecurring">enableRecurring.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="fraudOffset">fraudOffset.</param>
        /// <param name="installments">installments.</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="mcc">mcc.</param>
        /// <param name="merchantAccount">merchantAccount.</param>
        /// <param name="merchantOrderReference">merchantOrderReference.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="orderReference">orderReference.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="reference">reference.</param>
        /// <param name="returnUrl">returnUrl.</param>
        /// <param name="sessionValidity">sessionValidity.</param>
        /// <param name="shopperEmail">shopperEmail.</param>
        /// <param name="shopperIP">shopperIP.</param>
        /// <param name="shopperInteraction">shopperInteraction.</param>
        /// <param name="shopperLocale">shopperLocale.</param>
        /// <param name="shopperName">shopperName.</param>
        /// <param name="shopperReference">shopperReference.</param>
        /// <param name="shopperStatement">shopperStatement.</param>
        /// <param name="socialSecurityNumber">socialSecurityNumber.</param>
        /// <param name="telephoneNumber">telephoneNumber.</param>
        /// <param name="browserInfo">browserInfo.</param>
        /// <param name="deviceFingerprint">deviceFingerprint.</param>
        /// <param name="applicationInfo">applicationInfo.</param>
        /// <param name="splits">splits.</param>
        /// <param name="merchantRiskIndicator">merchantRiskIndicator.</param>
        /// <param name="threeDS2RequestData">threeDS2RequestData.</param>
        /// <param name="trustedShopper">trustedShopper.</param>
        /// <param name="origin">origin.</param>
        /// <param name="recurringProcessingModel">recurringProcessingModel.</param>
        /// <param name="mpiData">mpiData.</param>
        /// <param name="redirectFromIssuerMethod">redirectFromIssuerMethod.</param>
        /// <param name="redirectToIssuerMethod">redirectToIssuerMethod.</param>
        /// <param name="order">order.</param>
        /// <param name="storePaymentMethod">storePaymentMethod.</param>
        /// <param name="store">store.</param>
        /// <param name="threeDSAuthenticationOnly">threeDSAuthenticationOnly.</param>
        /// <param name="riskData">riskData.</param>
        /// <param name="conversionId">conversionId.</param>
        /// <param name="recurringExpiry">recurringExpiry.</param>
        /// <param name="recurringFrequency">recurringFrequency.</param>
        /// <param name="mandate">mandate.</param>
        public PaymentsRequest(AccountInfo accountInfo = default(AccountInfo), Dictionary<string, string> additionalData = default(Dictionary<string, string>), Amount amount = default(Amount), Address billingAddress = default(Address), int captureDelayHours = default(int), string checkoutAttemptId = default(string), ChannelEnum? channel = default(ChannelEnum?), Company company = default(Company), string countryCode = default(string), DateTime dateOfBirth = default(DateTime), ForexQuote dccQuote = default(ForexQuote), Address deliveryAddress = default(Address), DateTime deliveryDate = default(DateTime), bool enableOneClick = default(bool), bool enablePayOut = default(bool), bool enableRecurring = default(bool), EntityTypeEnum? entityType = default(EntityTypeEnum?), int fraudOffset = default(int), Installments installments = default(Installments), List<LineItem> lineItems = default(List<LineItem>), string mcc = default(string), string merchantAccount = default(string), string merchantOrderReference = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string orderReference = default(string), PaymentMethodDetails paymentMethod = default(PaymentMethodDetails), string reference = default(string), string returnUrl = default(string), string sessionValidity = default(string), string shopperEmail = default(string), string shopperIP = default(string), ShopperInteractionEnum? shopperInteraction = default(ShopperInteractionEnum?), string shopperLocale = default(string), Name shopperName = default(Name), string shopperReference = default(string), string shopperStatement = default(string), string socialSecurityNumber = default(string), string telephoneNumber = default(string), BrowserInfo browserInfo = default(BrowserInfo), string deviceFingerprint = default(string), ApplicationInfo applicationInfo = default(ApplicationInfo), List<Split> splits = default(List<Split>), MerchantRiskIndicator merchantRiskIndicator = default(MerchantRiskIndicator), ThreeDS2RequestData threeDS2RequestData = default(ThreeDS2RequestData), bool trustedShopper = default(bool), string origin = default(string), RecurringProcessingModelEnum? recurringProcessingModel = default(RecurringProcessingModelEnum?), ThreeDSecureData mpiData = default(ThreeDSecureData), string redirectFromIssuerMethod = default(string), string redirectToIssuerMethod = default(string), CheckoutOrder order = default(CheckoutOrder), bool storePaymentMethod = default(bool), string store = default(string), bool threeDSAuthenticationOnly = default(bool), RiskData riskData = default(RiskData), string conversionId = default(string), string recurringExpiry = default(string), string recurringFrequency = default(string), Mandate mandate = default(Mandate))
        {
            this.AccountInfo = accountInfo;
            this.AdditionalData = additionalData;
            this.Amount = amount;
            this.BillingAddress = billingAddress;
            this.CaptureDelayHours = captureDelayHours;
            this.CheckoutAttemptId = checkoutAttemptId;
            this.Channel = channel;
            this.Company = company;
            this.CountryCode = countryCode;
            this.DateOfBirth = dateOfBirth;
            this.DccQuote = dccQuote;
            this.DeliveryAddress = deliveryAddress;
            this.DeliveryDate = deliveryDate;
            this.EnableOneClick = enableOneClick;
            this.EnablePayOut = enablePayOut;
            this.EnableRecurring = enableRecurring;
            this.EntityType = entityType;
            this.FraudOffset = fraudOffset;
            this.Installments = installments;
            this.LineItems = lineItems;
            this.Mcc = mcc;
            this.MerchantAccount = merchantAccount;
            this.MerchantOrderReference = merchantOrderReference;
            this.Metadata = metadata;
            this.OrderReference = orderReference;
            this.PaymentMethod = paymentMethod;
            this.Reference = reference;
            this.ReturnUrl = returnUrl;
            this.SessionValidity = sessionValidity;
            this.ShopperEmail = shopperEmail;
            this.ShopperIP = shopperIP;
            this.ShopperInteraction = shopperInteraction;
            this.ShopperLocale = shopperLocale;
            this.ShopperName = shopperName;
            this.ShopperReference = shopperReference;
            this.ShopperStatement = shopperStatement;
            this.SocialSecurityNumber = socialSecurityNumber;
            this.TelephoneNumber = telephoneNumber;
            this.BrowserInfo = browserInfo;
            this.DeviceFingerprint = deviceFingerprint;
            this.ApplicationInfo = applicationInfo;
            this.Splits = splits;
            this.MerchantRiskIndicator = merchantRiskIndicator;
            this.ThreeDS2RequestData = threeDS2RequestData;
            this.TrustedShopper = trustedShopper;
            this.Origin = origin;
            this.RecurringProcessingModel = recurringProcessingModel;
            this.MpiData = mpiData;
            this.RedirectFromIssuerMethod = redirectFromIssuerMethod;
            this.RedirectToIssuerMethod = redirectToIssuerMethod;
            this.Order = order;
            this.StorePaymentMethod = storePaymentMethod;
            this.Store = store;
            this.ThreeDSAuthenticationOnly = threeDSAuthenticationOnly;
            this.RiskData = riskData;
            this.ConversionId = conversionId;
            this.RecurringExpiry = recurringExpiry;
            this.RecurringFrequency = recurringFrequency;
            this.Mandate = mandate;
        }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [DataMember(Name = "accountInfo", EmitDefaultValue = false)]
        public AccountInfo AccountInfo { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public Dictionary<string, string> AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", EmitDefaultValue = false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets CaptureDelayHours
        /// </summary>
        [DataMember(Name = "captureDelayHours", EmitDefaultValue = false)]
        public int CaptureDelayHours { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutAttemptId
        /// </summary>
        [DataMember(Name = "checkoutAttemptId", EmitDefaultValue = false)]
        public string CheckoutAttemptId { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "dateOfBirth", EmitDefaultValue = false)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets DccQuote
        /// </summary>
        [DataMember(Name = "dccQuote", EmitDefaultValue = false)]
        public ForexQuote DccQuote { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [DataMember(Name = "deliveryAddress", EmitDefaultValue = false)]
        public Address DeliveryAddress { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [DataMember(Name = "deliveryDate", EmitDefaultValue = false)]
        public DateTime DeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets EnableOneClick
        /// </summary>
        [DataMember(Name = "enableOneClick", EmitDefaultValue = true)]
        public bool EnableOneClick { get; set; }

        /// <summary>
        /// Gets or Sets EnablePayOut
        /// </summary>
        [DataMember(Name = "enablePayOut", EmitDefaultValue = true)]
        public bool EnablePayOut { get; set; }

        /// <summary>
        /// Gets or Sets EnableRecurring
        /// </summary>
        [DataMember(Name = "enableRecurring", EmitDefaultValue = true)]
        public bool EnableRecurring { get; set; }

        /// <summary>
        /// Gets or Sets FraudOffset
        /// </summary>
        [DataMember(Name = "fraudOffset", EmitDefaultValue = false)]
        public int FraudOffset { get; set; }

        /// <summary>
        /// Gets or Sets Installments
        /// </summary>
        [DataMember(Name = "installments", EmitDefaultValue = false)]
        public Installments Installments { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Mcc
        /// </summary>
        [DataMember(Name = "mcc", EmitDefaultValue = false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAccount
        /// </summary>
        [DataMember(Name = "merchantAccount", EmitDefaultValue = false)]
        public string MerchantAccount { get; set; }

        /// <summary>
        /// Gets or Sets MerchantOrderReference
        /// </summary>
        [DataMember(Name = "merchantOrderReference", EmitDefaultValue = false)]
        public string MerchantOrderReference { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets OrderReference
        /// </summary>
        [DataMember(Name = "orderReference", EmitDefaultValue = false)]
        public string OrderReference { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public PaymentMethodDetails PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name = "returnUrl", EmitDefaultValue = false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets SessionValidity
        /// </summary>
        [DataMember(Name = "sessionValidity", EmitDefaultValue = false)]
        public string SessionValidity { get; set; }

        /// <summary>
        /// Gets or Sets ShopperEmail
        /// </summary>
        [DataMember(Name = "shopperEmail", EmitDefaultValue = false)]
        public string ShopperEmail { get; set; }

        /// <summary>
        /// Gets or Sets ShopperIP
        /// </summary>
        [DataMember(Name = "shopperIP", EmitDefaultValue = false)]
        public string ShopperIP { get; set; }

        /// <summary>
        /// Gets or Sets ShopperLocale
        /// </summary>
        [DataMember(Name = "shopperLocale", EmitDefaultValue = false)]
        public string ShopperLocale { get; set; }

        /// <summary>
        /// Gets or Sets ShopperName
        /// </summary>
        [DataMember(Name = "shopperName", EmitDefaultValue = false)]
        public Name ShopperName { get; set; }

        /// <summary>
        /// Gets or Sets ShopperReference
        /// </summary>
        [DataMember(Name = "shopperReference", EmitDefaultValue = false)]
        public string ShopperReference { get; set; }

        /// <summary>
        /// Gets or Sets ShopperStatement
        /// </summary>
        [DataMember(Name = "shopperStatement", EmitDefaultValue = false)]
        public string ShopperStatement { get; set; }

        /// <summary>
        /// Gets or Sets SocialSecurityNumber
        /// </summary>
        [DataMember(Name = "socialSecurityNumber", EmitDefaultValue = false)]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneNumber
        /// </summary>
        [DataMember(Name = "telephoneNumber", EmitDefaultValue = false)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets BrowserInfo
        /// </summary>
        [DataMember(Name = "browserInfo", EmitDefaultValue = false)]
        public BrowserInfo BrowserInfo { get; set; }

        /// <summary>
        /// Gets or Sets DeviceFingerprint
        /// </summary>
        [DataMember(Name = "deviceFingerprint", EmitDefaultValue = false)]
        public string DeviceFingerprint { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationInfo
        /// </summary>
        [DataMember(Name = "applicationInfo", EmitDefaultValue = false)]
        public ApplicationInfo ApplicationInfo { get; set; }

        /// <summary>
        /// Gets or Sets Splits
        /// </summary>
        [DataMember(Name = "splits", EmitDefaultValue = false)]
        public List<Split> Splits { get; set; }

        /// <summary>
        /// Gets or Sets MerchantRiskIndicator
        /// </summary>
        [DataMember(Name = "merchantRiskIndicator", EmitDefaultValue = false)]
        public MerchantRiskIndicator MerchantRiskIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDS2RequestData
        /// </summary>
        [DataMember(Name = "threeDS2RequestData", EmitDefaultValue = false)]
        public ThreeDS2RequestData ThreeDS2RequestData { get; set; }

        /// <summary>
        /// Gets or Sets TrustedShopper
        /// </summary>
        [DataMember(Name = "trustedShopper", EmitDefaultValue = true)]
        public bool TrustedShopper { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets MpiData
        /// </summary>
        [DataMember(Name = "mpiData", EmitDefaultValue = false)]
        public ThreeDSecureData MpiData { get; set; }

        /// <summary>
        /// Gets or Sets RedirectFromIssuerMethod
        /// </summary>
        [DataMember(Name = "redirectFromIssuerMethod", EmitDefaultValue = false)]
        public string RedirectFromIssuerMethod { get; set; }

        /// <summary>
        /// Gets or Sets RedirectToIssuerMethod
        /// </summary>
        [DataMember(Name = "redirectToIssuerMethod", EmitDefaultValue = false)]
        public string RedirectToIssuerMethod { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public CheckoutOrder Order { get; set; }

        /// <summary>
        /// Gets or Sets StorePaymentMethod
        /// </summary>
        [DataMember(Name = "storePaymentMethod", EmitDefaultValue = true)]
        public bool StorePaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Store
        /// </summary>
        [DataMember(Name = "store", EmitDefaultValue = false)]
        public string Store { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSAuthenticationOnly
        /// </summary>
        [DataMember(Name = "threeDSAuthenticationOnly", EmitDefaultValue = true)]
        public bool ThreeDSAuthenticationOnly { get; set; }

        /// <summary>
        /// Gets or Sets RiskData
        /// </summary>
        [DataMember(Name = "riskData", EmitDefaultValue = false)]
        public RiskData RiskData { get; set; }

        /// <summary>
        /// Gets or Sets ConversionId
        /// </summary>
        [DataMember(Name = "conversionId", EmitDefaultValue = false)]
        public string ConversionId { get; set; }

        /// <summary>
        /// Gets or Sets RecurringExpiry
        /// </summary>
        [DataMember(Name = "recurringExpiry", EmitDefaultValue = false)]
        public string RecurringExpiry { get; set; }

        /// <summary>
        /// Gets or Sets RecurringFrequency
        /// </summary>
        [DataMember(Name = "recurringFrequency", EmitDefaultValue = false)]
        public string RecurringFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Mandate
        /// </summary>
        [DataMember(Name = "mandate", EmitDefaultValue = false)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentsRequest {\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CaptureDelayHours: ").Append(CaptureDelayHours).Append("\n");
            sb.Append("  CheckoutAttemptId: ").Append(CheckoutAttemptId).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DccQuote: ").Append(DccQuote).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  EnableOneClick: ").Append(EnableOneClick).Append("\n");
            sb.Append("  EnablePayOut: ").Append(EnablePayOut).Append("\n");
            sb.Append("  EnableRecurring: ").Append(EnableRecurring).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  FraudOffset: ").Append(FraudOffset).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantAccount: ").Append(MerchantAccount).Append("\n");
            sb.Append("  MerchantOrderReference: ").Append(MerchantOrderReference).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OrderReference: ").Append(OrderReference).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  SessionValidity: ").Append(SessionValidity).Append("\n");
            sb.Append("  ShopperEmail: ").Append(ShopperEmail).Append("\n");
            sb.Append("  ShopperIP: ").Append(ShopperIP).Append("\n");
            sb.Append("  ShopperInteraction: ").Append(ShopperInteraction).Append("\n");
            sb.Append("  ShopperLocale: ").Append(ShopperLocale).Append("\n");
            sb.Append("  ShopperName: ").Append(ShopperName).Append("\n");
            sb.Append("  ShopperReference: ").Append(ShopperReference).Append("\n");
            sb.Append("  ShopperStatement: ").Append(ShopperStatement).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  BrowserInfo: ").Append(BrowserInfo).Append("\n");
            sb.Append("  DeviceFingerprint: ").Append(DeviceFingerprint).Append("\n");
            sb.Append("  ApplicationInfo: ").Append(ApplicationInfo).Append("\n");
            sb.Append("  Splits: ").Append(Splits).Append("\n");
            sb.Append("  MerchantRiskIndicator: ").Append(MerchantRiskIndicator).Append("\n");
            sb.Append("  ThreeDS2RequestData: ").Append(ThreeDS2RequestData).Append("\n");
            sb.Append("  TrustedShopper: ").Append(TrustedShopper).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RecurringProcessingModel: ").Append(RecurringProcessingModel).Append("\n");
            sb.Append("  MpiData: ").Append(MpiData).Append("\n");
            sb.Append("  RedirectFromIssuerMethod: ").Append(RedirectFromIssuerMethod).Append("\n");
            sb.Append("  RedirectToIssuerMethod: ").Append(RedirectToIssuerMethod).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  StorePaymentMethod: ").Append(StorePaymentMethod).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  ThreeDSAuthenticationOnly: ").Append(ThreeDSAuthenticationOnly).Append("\n");
            sb.Append("  RiskData: ").Append(RiskData).Append("\n");
            sb.Append("  ConversionId: ").Append(ConversionId).Append("\n");
            sb.Append("  RecurringExpiry: ").Append(RecurringExpiry).Append("\n");
            sb.Append("  RecurringFrequency: ").Append(RecurringFrequency).Append("\n");
            sb.Append("  Mandate: ").Append(Mandate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsRequest);
        }

        /// <summary>
        /// Returns true if PaymentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountInfo == input.AccountInfo ||
                    (this.AccountInfo != null &&
                    this.AccountInfo.Equals(input.AccountInfo))
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    this.AdditionalData != null &&
                    input.AdditionalData != null &&
                    this.AdditionalData.SequenceEqual(input.AdditionalData)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.CaptureDelayHours == input.CaptureDelayHours ||
                    this.CaptureDelayHours.Equals(input.CaptureDelayHours)
                ) && 
                (
                    this.CheckoutAttemptId == input.CheckoutAttemptId ||
                    (this.CheckoutAttemptId != null &&
                    this.CheckoutAttemptId.Equals(input.CheckoutAttemptId))
                ) && 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.DccQuote == input.DccQuote ||
                    (this.DccQuote != null &&
                    this.DccQuote.Equals(input.DccQuote))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.EnableOneClick == input.EnableOneClick ||
                    this.EnableOneClick.Equals(input.EnableOneClick)
                ) && 
                (
                    this.EnablePayOut == input.EnablePayOut ||
                    this.EnablePayOut.Equals(input.EnablePayOut)
                ) && 
                (
                    this.EnableRecurring == input.EnableRecurring ||
                    this.EnableRecurring.Equals(input.EnableRecurring)
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    this.EntityType.Equals(input.EntityType)
                ) && 
                (
                    this.FraudOffset == input.FraudOffset ||
                    this.FraudOffset.Equals(input.FraudOffset)
                ) && 
                (
                    this.Installments == input.Installments ||
                    (this.Installments != null &&
                    this.Installments.Equals(input.Installments))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.MerchantAccount == input.MerchantAccount ||
                    (this.MerchantAccount != null &&
                    this.MerchantAccount.Equals(input.MerchantAccount))
                ) && 
                (
                    this.MerchantOrderReference == input.MerchantOrderReference ||
                    (this.MerchantOrderReference != null &&
                    this.MerchantOrderReference.Equals(input.MerchantOrderReference))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.OrderReference == input.OrderReference ||
                    (this.OrderReference != null &&
                    this.OrderReference.Equals(input.OrderReference))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.SessionValidity == input.SessionValidity ||
                    (this.SessionValidity != null &&
                    this.SessionValidity.Equals(input.SessionValidity))
                ) && 
                (
                    this.ShopperEmail == input.ShopperEmail ||
                    (this.ShopperEmail != null &&
                    this.ShopperEmail.Equals(input.ShopperEmail))
                ) && 
                (
                    this.ShopperIP == input.ShopperIP ||
                    (this.ShopperIP != null &&
                    this.ShopperIP.Equals(input.ShopperIP))
                ) && 
                (
                    this.ShopperInteraction == input.ShopperInteraction ||
                    this.ShopperInteraction.Equals(input.ShopperInteraction)
                ) && 
                (
                    this.ShopperLocale == input.ShopperLocale ||
                    (this.ShopperLocale != null &&
                    this.ShopperLocale.Equals(input.ShopperLocale))
                ) && 
                (
                    this.ShopperName == input.ShopperName ||
                    (this.ShopperName != null &&
                    this.ShopperName.Equals(input.ShopperName))
                ) && 
                (
                    this.ShopperReference == input.ShopperReference ||
                    (this.ShopperReference != null &&
                    this.ShopperReference.Equals(input.ShopperReference))
                ) && 
                (
                    this.ShopperStatement == input.ShopperStatement ||
                    (this.ShopperStatement != null &&
                    this.ShopperStatement.Equals(input.ShopperStatement))
                ) && 
                (
                    this.SocialSecurityNumber == input.SocialSecurityNumber ||
                    (this.SocialSecurityNumber != null &&
                    this.SocialSecurityNumber.Equals(input.SocialSecurityNumber))
                ) && 
                (
                    this.TelephoneNumber == input.TelephoneNumber ||
                    (this.TelephoneNumber != null &&
                    this.TelephoneNumber.Equals(input.TelephoneNumber))
                ) && 
                (
                    this.BrowserInfo == input.BrowserInfo ||
                    (this.BrowserInfo != null &&
                    this.BrowserInfo.Equals(input.BrowserInfo))
                ) && 
                (
                    this.DeviceFingerprint == input.DeviceFingerprint ||
                    (this.DeviceFingerprint != null &&
                    this.DeviceFingerprint.Equals(input.DeviceFingerprint))
                ) && 
                (
                    this.ApplicationInfo == input.ApplicationInfo ||
                    (this.ApplicationInfo != null &&
                    this.ApplicationInfo.Equals(input.ApplicationInfo))
                ) && 
                (
                    this.Splits == input.Splits ||
                    this.Splits != null &&
                    input.Splits != null &&
                    this.Splits.SequenceEqual(input.Splits)
                ) && 
                (
                    this.MerchantRiskIndicator == input.MerchantRiskIndicator ||
                    (this.MerchantRiskIndicator != null &&
                    this.MerchantRiskIndicator.Equals(input.MerchantRiskIndicator))
                ) && 
                (
                    this.ThreeDS2RequestData == input.ThreeDS2RequestData ||
                    (this.ThreeDS2RequestData != null &&
                    this.ThreeDS2RequestData.Equals(input.ThreeDS2RequestData))
                ) && 
                (
                    this.TrustedShopper == input.TrustedShopper ||
                    this.TrustedShopper.Equals(input.TrustedShopper)
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.RecurringProcessingModel == input.RecurringProcessingModel ||
                    this.RecurringProcessingModel.Equals(input.RecurringProcessingModel)
                ) && 
                (
                    this.MpiData == input.MpiData ||
                    (this.MpiData != null &&
                    this.MpiData.Equals(input.MpiData))
                ) && 
                (
                    this.RedirectFromIssuerMethod == input.RedirectFromIssuerMethod ||
                    (this.RedirectFromIssuerMethod != null &&
                    this.RedirectFromIssuerMethod.Equals(input.RedirectFromIssuerMethod))
                ) && 
                (
                    this.RedirectToIssuerMethod == input.RedirectToIssuerMethod ||
                    (this.RedirectToIssuerMethod != null &&
                    this.RedirectToIssuerMethod.Equals(input.RedirectToIssuerMethod))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.StorePaymentMethod == input.StorePaymentMethod ||
                    this.StorePaymentMethod.Equals(input.StorePaymentMethod)
                ) && 
                (
                    this.Store == input.Store ||
                    (this.Store != null &&
                    this.Store.Equals(input.Store))
                ) && 
                (
                    this.ThreeDSAuthenticationOnly == input.ThreeDSAuthenticationOnly ||
                    this.ThreeDSAuthenticationOnly.Equals(input.ThreeDSAuthenticationOnly)
                ) && 
                (
                    this.RiskData == input.RiskData ||
                    (this.RiskData != null &&
                    this.RiskData.Equals(input.RiskData))
                ) && 
                (
                    this.ConversionId == input.ConversionId ||
                    (this.ConversionId != null &&
                    this.ConversionId.Equals(input.ConversionId))
                ) && 
                (
                    this.RecurringExpiry == input.RecurringExpiry ||
                    (this.RecurringExpiry != null &&
                    this.RecurringExpiry.Equals(input.RecurringExpiry))
                ) && 
                (
                    this.RecurringFrequency == input.RecurringFrequency ||
                    (this.RecurringFrequency != null &&
                    this.RecurringFrequency.Equals(input.RecurringFrequency))
                ) && 
                (
                    this.Mandate == input.Mandate ||
                    (this.Mandate != null &&
                    this.Mandate.Equals(input.Mandate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AccountInfo.GetHashCode();
                }
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CaptureDelayHours.GetHashCode();
                if (this.CheckoutAttemptId != null)
                {
                    hashCode = (hashCode * 59) + this.CheckoutAttemptId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.DccQuote != null)
                {
                    hashCode = (hashCode * 59) + this.DccQuote.GetHashCode();
                }
                if (this.DeliveryAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryAddress.GetHashCode();
                }
                if (this.DeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableOneClick.GetHashCode();
                hashCode = (hashCode * 59) + this.EnablePayOut.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableRecurring.GetHashCode();
                hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                hashCode = (hashCode * 59) + this.FraudOffset.GetHashCode();
                if (this.Installments != null)
                {
                    hashCode = (hashCode * 59) + this.Installments.GetHashCode();
                }
                if (this.LineItems != null)
                {
                    hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
                }
                if (this.Mcc != null)
                {
                    hashCode = (hashCode * 59) + this.Mcc.GetHashCode();
                }
                if (this.MerchantAccount != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantAccount.GetHashCode();
                }
                if (this.MerchantOrderReference != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantOrderReference.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.OrderReference != null)
                {
                    hashCode = (hashCode * 59) + this.OrderReference.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.ReturnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUrl.GetHashCode();
                }
                if (this.SessionValidity != null)
                {
                    hashCode = (hashCode * 59) + this.SessionValidity.GetHashCode();
                }
                if (this.ShopperEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperEmail.GetHashCode();
                }
                if (this.ShopperIP != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperIP.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShopperInteraction.GetHashCode();
                if (this.ShopperLocale != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperLocale.GetHashCode();
                }
                if (this.ShopperName != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperName.GetHashCode();
                }
                if (this.ShopperReference != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperReference.GetHashCode();
                }
                if (this.ShopperStatement != null)
                {
                    hashCode = (hashCode * 59) + this.ShopperStatement.GetHashCode();
                }
                if (this.SocialSecurityNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SocialSecurityNumber.GetHashCode();
                }
                if (this.TelephoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TelephoneNumber.GetHashCode();
                }
                if (this.BrowserInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BrowserInfo.GetHashCode();
                }
                if (this.DeviceFingerprint != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceFingerprint.GetHashCode();
                }
                if (this.ApplicationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationInfo.GetHashCode();
                }
                if (this.Splits != null)
                {
                    hashCode = (hashCode * 59) + this.Splits.GetHashCode();
                }
                if (this.MerchantRiskIndicator != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantRiskIndicator.GetHashCode();
                }
                if (this.ThreeDS2RequestData != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDS2RequestData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TrustedShopper.GetHashCode();
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecurringProcessingModel.GetHashCode();
                if (this.MpiData != null)
                {
                    hashCode = (hashCode * 59) + this.MpiData.GetHashCode();
                }
                if (this.RedirectFromIssuerMethod != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectFromIssuerMethod.GetHashCode();
                }
                if (this.RedirectToIssuerMethod != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectToIssuerMethod.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StorePaymentMethod.GetHashCode();
                if (this.Store != null)
                {
                    hashCode = (hashCode * 59) + this.Store.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThreeDSAuthenticationOnly.GetHashCode();
                if (this.RiskData != null)
                {
                    hashCode = (hashCode * 59) + this.RiskData.GetHashCode();
                }
                if (this.ConversionId != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionId.GetHashCode();
                }
                if (this.RecurringExpiry != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringExpiry.GetHashCode();
                }
                if (this.RecurringFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringFrequency.GetHashCode();
                }
                if (this.Mandate != null)
                {
                    hashCode = (hashCode * 59) + this.Mandate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
