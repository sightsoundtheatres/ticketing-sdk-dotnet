/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// Special
    /// </summary>
    [DataContract(Name = "Special")]
    public partial class Special : IEquatable<Special>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SpecialTypeCode
        /// </summary>
        [DataMember(Name = "specialTypeCode", IsRequired = true, EmitDefaultValue = false)]
        public SpecialTypeCode SpecialTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets SubTypeCode
        /// </summary>
        [DataMember(Name = "subTypeCode", EmitDefaultValue = false)]
        public SpecialSubTypeCode? SubTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets Restriction
        /// </summary>
        [DataMember(Name = "restriction", EmitDefaultValue = false)]
        public SpecialRestrictionType? Restriction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Special" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Special() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Special" /> class.
        /// </summary>
        /// <param name="specialCode">specialCode (required).</param>
        /// <param name="longDescription">longDescription.</param>
        /// <param name="active">active.</param>
        /// <param name="seatsAvailableLimit">seatsAvailableLimit.</param>
        /// <param name="numberEventsInCombo">numberEventsInCombo (required).</param>
        /// <param name="allowCustTypeDisc">allowCustTypeDisc.</param>
        /// <param name="acceptOrderStartDate">acceptOrderStartDate (required).</param>
        /// <param name="acceptOrderEndDate">acceptOrderEndDate (required).</param>
        /// <param name="specialTypeCode">specialTypeCode (required).</param>
        /// <param name="custFirstOrder">custFirstOrder.</param>
        /// <param name="detailsValueTypeCode">detailsValueTypeCode (required).</param>
        /// <param name="couponLine1">couponLine1.</param>
        /// <param name="couponLine2">couponLine2.</param>
        /// <param name="couponLine3">couponLine3.</param>
        /// <param name="couponLine4">couponLine4.</param>
        /// <param name="couponLine5">couponLine5.</param>
        /// <param name="showSpanDays">showSpanDays.</param>
        /// <param name="autoApply">autoApply.</param>
        /// <param name="groupMinimum">groupMinimum.</param>
        /// <param name="groupMaximum">groupMaximum.</param>
        /// <param name="finalSale">finalSale.</param>
        /// <param name="waiveTrans">waiveTrans.</param>
        /// <param name="heldBatch">heldBatch.</param>
        /// <param name="allowTier">allowTier.</param>
        /// <param name="allowHot">allowHot.</param>
        /// <param name="allowFit">allowFit.</param>
        /// <param name="allowOrdertix">allowOrdertix.</param>
        /// <param name="custDiscAddonOnly">custDiscAddonOnly.</param>
        /// <param name="subTypeCode">subTypeCode.</param>
        /// <param name="specialComments">specialComments.</param>
        /// <param name="showDayMins">showDayMins.</param>
        /// <param name="allowEmployee">allowEmployee.</param>
        /// <param name="validateZipCode">validateZipCode.</param>
        /// <param name="allowGroupDisc">allowGroupDisc.</param>
        /// <param name="waiveDeposit">waiveDeposit.</param>
        /// <param name="allowFreeTicket">allowFreeTicket.</param>
        /// <param name="maxDiscCount">maxDiscCount.</param>
        /// <param name="rptColor">rptColor.</param>
        /// <param name="rptDescription">rptDescription.</param>
        /// <param name="rptNotes">rptNotes.</param>
        /// <param name="rptGroupName">rptGroupName.</param>
        /// <param name="rptDisplayName">rptDisplayName.</param>
        /// <param name="allowIndividual">allowIndividual.</param>
        /// <param name="restriction">restriction.</param>
        /// <param name="salesConf">salesConf.</param>
        /// <param name="salesConfCat">salesConfCat.</param>
        /// <param name="detail">detail.</param>
        /// <param name="events">events.</param>
        /// <param name="corpAffilCodes">corpAffilCodes.</param>
        /// <param name="specialAutoApplied">specialAutoApplied.</param>
        /// <param name="savings">savings.</param>
        /// <param name="validForOrderTix">validForOrderTix.</param>
        /// <param name="compsSpecial">compsSpecial.</param>
        /// <param name="validForIndividual">validForIndividual.</param>
        public Special(string specialCode = default(string), string longDescription = default(string), bool active = default(bool), int seatsAvailableLimit = default(int), string numberEventsInCombo = default(string), bool allowCustTypeDisc = default(bool), DateTime acceptOrderStartDate = default(DateTime), DateTime acceptOrderEndDate = default(DateTime), SpecialTypeCode specialTypeCode = default(SpecialTypeCode), bool custFirstOrder = default(bool), string detailsValueTypeCode = default(string), string couponLine1 = default(string), string couponLine2 = default(string), string couponLine3 = default(string), string couponLine4 = default(string), string couponLine5 = default(string), int showSpanDays = default(int), bool autoApply = default(bool), long groupMinimum = default(long), long groupMaximum = default(long), bool finalSale = default(bool), bool waiveTrans = default(bool), bool heldBatch = default(bool), bool allowTier = default(bool), bool allowHot = default(bool), bool allowFit = default(bool), bool allowOrdertix = default(bool), bool custDiscAddonOnly = default(bool), SpecialSubTypeCode? subTypeCode = default(SpecialSubTypeCode?), string specialComments = default(string), int showDayMins = default(int), bool allowEmployee = default(bool), bool validateZipCode = default(bool), bool allowGroupDisc = default(bool), bool waiveDeposit = default(bool), bool allowFreeTicket = default(bool), int maxDiscCount = default(int), string rptColor = default(string), string rptDescription = default(string), string rptNotes = default(string), string rptGroupName = default(string), string rptDisplayName = default(string), bool allowIndividual = default(bool), SpecialRestrictionType? restriction = default(SpecialRestrictionType?), bool salesConf = default(bool), string salesConfCat = default(string), List<SpecialDetail> detail = default(List<SpecialDetail>), List<SpecialAssociatedEvent> events = default(List<SpecialAssociatedEvent>), List<SpecialType> corpAffilCodes = default(List<SpecialType>), bool specialAutoApplied = default(bool), decimal savings = default(decimal), bool validForOrderTix = default(bool), bool compsSpecial = default(bool), bool validForIndividual = default(bool))
        {
            // to ensure "specialCode" is required (not null)
            if (specialCode == null)
            {
                throw new ArgumentNullException("specialCode is a required property for Special and cannot be null");
            }
            this.SpecialCode = specialCode;
            // to ensure "numberEventsInCombo" is required (not null)
            if (numberEventsInCombo == null)
            {
                throw new ArgumentNullException("numberEventsInCombo is a required property for Special and cannot be null");
            }
            this.NumberEventsInCombo = numberEventsInCombo;
            this.AcceptOrderStartDate = acceptOrderStartDate;
            this.AcceptOrderEndDate = acceptOrderEndDate;
            this.SpecialTypeCode = specialTypeCode;
            // to ensure "detailsValueTypeCode" is required (not null)
            if (detailsValueTypeCode == null)
            {
                throw new ArgumentNullException("detailsValueTypeCode is a required property for Special and cannot be null");
            }
            this.DetailsValueTypeCode = detailsValueTypeCode;
            this.LongDescription = longDescription;
            this.Active = active;
            this.SeatsAvailableLimit = seatsAvailableLimit;
            this.AllowCustTypeDisc = allowCustTypeDisc;
            this.CustFirstOrder = custFirstOrder;
            this.CouponLine1 = couponLine1;
            this.CouponLine2 = couponLine2;
            this.CouponLine3 = couponLine3;
            this.CouponLine4 = couponLine4;
            this.CouponLine5 = couponLine5;
            this.ShowSpanDays = showSpanDays;
            this.AutoApply = autoApply;
            this.GroupMinimum = groupMinimum;
            this.GroupMaximum = groupMaximum;
            this.FinalSale = finalSale;
            this.WaiveTrans = waiveTrans;
            this.HeldBatch = heldBatch;
            this.AllowTier = allowTier;
            this.AllowHot = allowHot;
            this.AllowFit = allowFit;
            this.AllowOrdertix = allowOrdertix;
            this.CustDiscAddonOnly = custDiscAddonOnly;
            this.SubTypeCode = subTypeCode;
            this.SpecialComments = specialComments;
            this.ShowDayMins = showDayMins;
            this.AllowEmployee = allowEmployee;
            this.ValidateZipCode = validateZipCode;
            this.AllowGroupDisc = allowGroupDisc;
            this.WaiveDeposit = waiveDeposit;
            this.AllowFreeTicket = allowFreeTicket;
            this.MaxDiscCount = maxDiscCount;
            this.RptColor = rptColor;
            this.RptDescription = rptDescription;
            this.RptNotes = rptNotes;
            this.RptGroupName = rptGroupName;
            this.RptDisplayName = rptDisplayName;
            this.AllowIndividual = allowIndividual;
            this.Restriction = restriction;
            this.SalesConf = salesConf;
            this.SalesConfCat = salesConfCat;
            this.Detail = detail;
            this.Events = events;
            this.CorpAffilCodes = corpAffilCodes;
            this.SpecialAutoApplied = specialAutoApplied;
            this.Savings = savings;
            this.ValidForOrderTix = validForOrderTix;
            this.CompsSpecial = compsSpecial;
            this.ValidForIndividual = validForIndividual;
        }

        /// <summary>
        /// Gets or Sets SpecialCode
        /// </summary>
        [DataMember(Name = "specialCode", IsRequired = true, EmitDefaultValue = false)]
        public string SpecialCode { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name = "longDescription", EmitDefaultValue = false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets SeatsAvailableLimit
        /// </summary>
        [DataMember(Name = "seatsAvailableLimit", EmitDefaultValue = false)]
        public int SeatsAvailableLimit { get; set; }

        /// <summary>
        /// Gets or Sets NumberEventsInCombo
        /// </summary>
        [DataMember(Name = "numberEventsInCombo", IsRequired = true, EmitDefaultValue = false)]
        public string NumberEventsInCombo { get; set; }

        /// <summary>
        /// Gets or Sets AllowCustTypeDisc
        /// </summary>
        [DataMember(Name = "allowCustTypeDisc", EmitDefaultValue = true)]
        public bool AllowCustTypeDisc { get; set; }

        /// <summary>
        /// Gets or Sets AcceptOrderStartDate
        /// </summary>
        [DataMember(Name = "acceptOrderStartDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime AcceptOrderStartDate { get; set; }

        /// <summary>
        /// Gets or Sets AcceptOrderEndDate
        /// </summary>
        [DataMember(Name = "acceptOrderEndDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime AcceptOrderEndDate { get; set; }

        /// <summary>
        /// Gets or Sets CustFirstOrder
        /// </summary>
        [DataMember(Name = "custFirstOrder", EmitDefaultValue = true)]
        public bool CustFirstOrder { get; set; }

        /// <summary>
        /// Gets or Sets DetailsValueTypeCode
        /// </summary>
        [DataMember(Name = "detailsValueTypeCode", IsRequired = true, EmitDefaultValue = false)]
        public string DetailsValueTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets CouponLine1
        /// </summary>
        [DataMember(Name = "couponLine1", EmitDefaultValue = false)]
        public string CouponLine1 { get; set; }

        /// <summary>
        /// Gets or Sets CouponLine2
        /// </summary>
        [DataMember(Name = "couponLine2", EmitDefaultValue = false)]
        public string CouponLine2 { get; set; }

        /// <summary>
        /// Gets or Sets CouponLine3
        /// </summary>
        [DataMember(Name = "couponLine3", EmitDefaultValue = false)]
        public string CouponLine3 { get; set; }

        /// <summary>
        /// Gets or Sets CouponLine4
        /// </summary>
        [DataMember(Name = "couponLine4", EmitDefaultValue = false)]
        public string CouponLine4 { get; set; }

        /// <summary>
        /// Gets or Sets CouponLine5
        /// </summary>
        [DataMember(Name = "couponLine5", EmitDefaultValue = false)]
        public string CouponLine5 { get; set; }

        /// <summary>
        /// Gets or Sets ShowSpanDays
        /// </summary>
        [DataMember(Name = "showSpanDays", EmitDefaultValue = false)]
        public int ShowSpanDays { get; set; }

        /// <summary>
        /// Gets or Sets AutoApply
        /// </summary>
        [DataMember(Name = "autoApply", EmitDefaultValue = true)]
        public bool AutoApply { get; set; }

        /// <summary>
        /// Gets or Sets GroupMinimum
        /// </summary>
        [DataMember(Name = "groupMinimum", EmitDefaultValue = false)]
        public long GroupMinimum { get; set; }

        /// <summary>
        /// Gets or Sets GroupMaximum
        /// </summary>
        [DataMember(Name = "groupMaximum", EmitDefaultValue = false)]
        public long GroupMaximum { get; set; }

        /// <summary>
        /// Gets or Sets FinalSale
        /// </summary>
        [DataMember(Name = "finalSale", EmitDefaultValue = true)]
        public bool FinalSale { get; set; }

        /// <summary>
        /// Gets or Sets WaiveTrans
        /// </summary>
        [DataMember(Name = "waiveTrans", EmitDefaultValue = true)]
        public bool WaiveTrans { get; set; }

        /// <summary>
        /// Gets or Sets HeldBatch
        /// </summary>
        [DataMember(Name = "heldBatch", EmitDefaultValue = true)]
        public bool HeldBatch { get; set; }

        /// <summary>
        /// Gets or Sets AllowTier
        /// </summary>
        [DataMember(Name = "allowTier", EmitDefaultValue = true)]
        public bool AllowTier { get; set; }

        /// <summary>
        /// Gets or Sets AllowHot
        /// </summary>
        [DataMember(Name = "allowHot", EmitDefaultValue = true)]
        public bool AllowHot { get; set; }

        /// <summary>
        /// Gets or Sets AllowFit
        /// </summary>
        [DataMember(Name = "allowFit", EmitDefaultValue = true)]
        public bool AllowFit { get; set; }

        /// <summary>
        /// Gets or Sets AllowOrdertix
        /// </summary>
        [DataMember(Name = "allowOrdertix", EmitDefaultValue = true)]
        public bool AllowOrdertix { get; set; }

        /// <summary>
        /// Gets or Sets CustDiscAddonOnly
        /// </summary>
        [DataMember(Name = "custDiscAddonOnly", EmitDefaultValue = true)]
        public bool CustDiscAddonOnly { get; set; }

        /// <summary>
        /// Gets or Sets SpecialComments
        /// </summary>
        [DataMember(Name = "specialComments", EmitDefaultValue = false)]
        public string SpecialComments { get; set; }

        /// <summary>
        /// Gets or Sets ShowDayMins
        /// </summary>
        [DataMember(Name = "showDayMins", EmitDefaultValue = false)]
        public int ShowDayMins { get; set; }

        /// <summary>
        /// Gets or Sets AllowEmployee
        /// </summary>
        [DataMember(Name = "allowEmployee", EmitDefaultValue = true)]
        public bool AllowEmployee { get; set; }

        /// <summary>
        /// Gets or Sets ValidateZipCode
        /// </summary>
        [DataMember(Name = "validateZipCode", EmitDefaultValue = true)]
        public bool ValidateZipCode { get; set; }

        /// <summary>
        /// Gets or Sets AllowGroupDisc
        /// </summary>
        [DataMember(Name = "allowGroupDisc", EmitDefaultValue = true)]
        public bool AllowGroupDisc { get; set; }

        /// <summary>
        /// Gets or Sets WaiveDeposit
        /// </summary>
        [DataMember(Name = "waiveDeposit", EmitDefaultValue = true)]
        public bool WaiveDeposit { get; set; }

        /// <summary>
        /// Gets or Sets AllowFreeTicket
        /// </summary>
        [DataMember(Name = "allowFreeTicket", EmitDefaultValue = true)]
        public bool AllowFreeTicket { get; set; }

        /// <summary>
        /// Gets or Sets MaxDiscCount
        /// </summary>
        [DataMember(Name = "maxDiscCount", EmitDefaultValue = false)]
        public int MaxDiscCount { get; set; }

        /// <summary>
        /// Gets or Sets RptColor
        /// </summary>
        [DataMember(Name = "rptColor", EmitDefaultValue = false)]
        public string RptColor { get; set; }

        /// <summary>
        /// Gets or Sets RptDescription
        /// </summary>
        [DataMember(Name = "rptDescription", EmitDefaultValue = false)]
        public string RptDescription { get; set; }

        /// <summary>
        /// Gets or Sets RptNotes
        /// </summary>
        [DataMember(Name = "rptNotes", EmitDefaultValue = false)]
        public string RptNotes { get; set; }

        /// <summary>
        /// Gets or Sets RptGroupName
        /// </summary>
        [DataMember(Name = "rptGroupName", EmitDefaultValue = false)]
        public string RptGroupName { get; set; }

        /// <summary>
        /// Gets or Sets RptDisplayName
        /// </summary>
        [DataMember(Name = "rptDisplayName", EmitDefaultValue = false)]
        public string RptDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets AllowIndividual
        /// </summary>
        [DataMember(Name = "allowIndividual", EmitDefaultValue = true)]
        public bool AllowIndividual { get; set; }

        /// <summary>
        /// Gets or Sets SalesConf
        /// </summary>
        [DataMember(Name = "salesConf", EmitDefaultValue = true)]
        public bool SalesConf { get; set; }

        /// <summary>
        /// Gets or Sets SalesConfCat
        /// </summary>
        [DataMember(Name = "salesConfCat", EmitDefaultValue = false)]
        public string SalesConfCat { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public List<SpecialDetail> Detail { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<SpecialAssociatedEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets CorpAffilCodes
        /// </summary>
        [DataMember(Name = "corpAffilCodes", EmitDefaultValue = false)]
        public List<SpecialType> CorpAffilCodes { get; set; }

        /// <summary>
        /// Gets or Sets SpecialAutoApplied
        /// </summary>
        [DataMember(Name = "specialAutoApplied", EmitDefaultValue = true)]
        public bool SpecialAutoApplied { get; set; }

        /// <summary>
        /// Gets or Sets Savings
        /// </summary>
        [DataMember(Name = "savings", EmitDefaultValue = false)]
        public decimal Savings { get; set; }

        /// <summary>
        /// Gets or Sets ValidForOrderTix
        /// </summary>
        [DataMember(Name = "validForOrderTix", EmitDefaultValue = true)]
        public bool ValidForOrderTix { get; set; }

        /// <summary>
        /// Gets or Sets CompsSpecial
        /// </summary>
        [DataMember(Name = "compsSpecial", EmitDefaultValue = true)]
        public bool CompsSpecial { get; set; }

        /// <summary>
        /// Gets or Sets ValidForIndividual
        /// </summary>
        [DataMember(Name = "validForIndividual", EmitDefaultValue = true)]
        public bool ValidForIndividual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Special {\n");
            sb.Append("  SpecialCode: ").Append(SpecialCode).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  SeatsAvailableLimit: ").Append(SeatsAvailableLimit).Append("\n");
            sb.Append("  NumberEventsInCombo: ").Append(NumberEventsInCombo).Append("\n");
            sb.Append("  AllowCustTypeDisc: ").Append(AllowCustTypeDisc).Append("\n");
            sb.Append("  AcceptOrderStartDate: ").Append(AcceptOrderStartDate).Append("\n");
            sb.Append("  AcceptOrderEndDate: ").Append(AcceptOrderEndDate).Append("\n");
            sb.Append("  SpecialTypeCode: ").Append(SpecialTypeCode).Append("\n");
            sb.Append("  CustFirstOrder: ").Append(CustFirstOrder).Append("\n");
            sb.Append("  DetailsValueTypeCode: ").Append(DetailsValueTypeCode).Append("\n");
            sb.Append("  CouponLine1: ").Append(CouponLine1).Append("\n");
            sb.Append("  CouponLine2: ").Append(CouponLine2).Append("\n");
            sb.Append("  CouponLine3: ").Append(CouponLine3).Append("\n");
            sb.Append("  CouponLine4: ").Append(CouponLine4).Append("\n");
            sb.Append("  CouponLine5: ").Append(CouponLine5).Append("\n");
            sb.Append("  ShowSpanDays: ").Append(ShowSpanDays).Append("\n");
            sb.Append("  AutoApply: ").Append(AutoApply).Append("\n");
            sb.Append("  GroupMinimum: ").Append(GroupMinimum).Append("\n");
            sb.Append("  GroupMaximum: ").Append(GroupMaximum).Append("\n");
            sb.Append("  FinalSale: ").Append(FinalSale).Append("\n");
            sb.Append("  WaiveTrans: ").Append(WaiveTrans).Append("\n");
            sb.Append("  HeldBatch: ").Append(HeldBatch).Append("\n");
            sb.Append("  AllowTier: ").Append(AllowTier).Append("\n");
            sb.Append("  AllowHot: ").Append(AllowHot).Append("\n");
            sb.Append("  AllowFit: ").Append(AllowFit).Append("\n");
            sb.Append("  AllowOrdertix: ").Append(AllowOrdertix).Append("\n");
            sb.Append("  CustDiscAddonOnly: ").Append(CustDiscAddonOnly).Append("\n");
            sb.Append("  SubTypeCode: ").Append(SubTypeCode).Append("\n");
            sb.Append("  SpecialComments: ").Append(SpecialComments).Append("\n");
            sb.Append("  ShowDayMins: ").Append(ShowDayMins).Append("\n");
            sb.Append("  AllowEmployee: ").Append(AllowEmployee).Append("\n");
            sb.Append("  ValidateZipCode: ").Append(ValidateZipCode).Append("\n");
            sb.Append("  AllowGroupDisc: ").Append(AllowGroupDisc).Append("\n");
            sb.Append("  WaiveDeposit: ").Append(WaiveDeposit).Append("\n");
            sb.Append("  AllowFreeTicket: ").Append(AllowFreeTicket).Append("\n");
            sb.Append("  MaxDiscCount: ").Append(MaxDiscCount).Append("\n");
            sb.Append("  RptColor: ").Append(RptColor).Append("\n");
            sb.Append("  RptDescription: ").Append(RptDescription).Append("\n");
            sb.Append("  RptNotes: ").Append(RptNotes).Append("\n");
            sb.Append("  RptGroupName: ").Append(RptGroupName).Append("\n");
            sb.Append("  RptDisplayName: ").Append(RptDisplayName).Append("\n");
            sb.Append("  AllowIndividual: ").Append(AllowIndividual).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  SalesConf: ").Append(SalesConf).Append("\n");
            sb.Append("  SalesConfCat: ").Append(SalesConfCat).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  CorpAffilCodes: ").Append(CorpAffilCodes).Append("\n");
            sb.Append("  SpecialAutoApplied: ").Append(SpecialAutoApplied).Append("\n");
            sb.Append("  Savings: ").Append(Savings).Append("\n");
            sb.Append("  ValidForOrderTix: ").Append(ValidForOrderTix).Append("\n");
            sb.Append("  CompsSpecial: ").Append(CompsSpecial).Append("\n");
            sb.Append("  ValidForIndividual: ").Append(ValidForIndividual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Special);
        }

        /// <summary>
        /// Returns true if Special instances are equal
        /// </summary>
        /// <param name="input">Instance of Special to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Special input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SpecialCode == input.SpecialCode ||
                    (this.SpecialCode != null &&
                    this.SpecialCode.Equals(input.SpecialCode))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.SeatsAvailableLimit == input.SeatsAvailableLimit ||
                    this.SeatsAvailableLimit.Equals(input.SeatsAvailableLimit)
                ) && 
                (
                    this.NumberEventsInCombo == input.NumberEventsInCombo ||
                    (this.NumberEventsInCombo != null &&
                    this.NumberEventsInCombo.Equals(input.NumberEventsInCombo))
                ) && 
                (
                    this.AllowCustTypeDisc == input.AllowCustTypeDisc ||
                    this.AllowCustTypeDisc.Equals(input.AllowCustTypeDisc)
                ) && 
                (
                    this.AcceptOrderStartDate == input.AcceptOrderStartDate ||
                    (this.AcceptOrderStartDate != null &&
                    this.AcceptOrderStartDate.Equals(input.AcceptOrderStartDate))
                ) && 
                (
                    this.AcceptOrderEndDate == input.AcceptOrderEndDate ||
                    (this.AcceptOrderEndDate != null &&
                    this.AcceptOrderEndDate.Equals(input.AcceptOrderEndDate))
                ) && 
                (
                    this.SpecialTypeCode == input.SpecialTypeCode ||
                    this.SpecialTypeCode.Equals(input.SpecialTypeCode)
                ) && 
                (
                    this.CustFirstOrder == input.CustFirstOrder ||
                    this.CustFirstOrder.Equals(input.CustFirstOrder)
                ) && 
                (
                    this.DetailsValueTypeCode == input.DetailsValueTypeCode ||
                    (this.DetailsValueTypeCode != null &&
                    this.DetailsValueTypeCode.Equals(input.DetailsValueTypeCode))
                ) && 
                (
                    this.CouponLine1 == input.CouponLine1 ||
                    (this.CouponLine1 != null &&
                    this.CouponLine1.Equals(input.CouponLine1))
                ) && 
                (
                    this.CouponLine2 == input.CouponLine2 ||
                    (this.CouponLine2 != null &&
                    this.CouponLine2.Equals(input.CouponLine2))
                ) && 
                (
                    this.CouponLine3 == input.CouponLine3 ||
                    (this.CouponLine3 != null &&
                    this.CouponLine3.Equals(input.CouponLine3))
                ) && 
                (
                    this.CouponLine4 == input.CouponLine4 ||
                    (this.CouponLine4 != null &&
                    this.CouponLine4.Equals(input.CouponLine4))
                ) && 
                (
                    this.CouponLine5 == input.CouponLine5 ||
                    (this.CouponLine5 != null &&
                    this.CouponLine5.Equals(input.CouponLine5))
                ) && 
                (
                    this.ShowSpanDays == input.ShowSpanDays ||
                    this.ShowSpanDays.Equals(input.ShowSpanDays)
                ) && 
                (
                    this.AutoApply == input.AutoApply ||
                    this.AutoApply.Equals(input.AutoApply)
                ) && 
                (
                    this.GroupMinimum == input.GroupMinimum ||
                    this.GroupMinimum.Equals(input.GroupMinimum)
                ) && 
                (
                    this.GroupMaximum == input.GroupMaximum ||
                    this.GroupMaximum.Equals(input.GroupMaximum)
                ) && 
                (
                    this.FinalSale == input.FinalSale ||
                    this.FinalSale.Equals(input.FinalSale)
                ) && 
                (
                    this.WaiveTrans == input.WaiveTrans ||
                    this.WaiveTrans.Equals(input.WaiveTrans)
                ) && 
                (
                    this.HeldBatch == input.HeldBatch ||
                    this.HeldBatch.Equals(input.HeldBatch)
                ) && 
                (
                    this.AllowTier == input.AllowTier ||
                    this.AllowTier.Equals(input.AllowTier)
                ) && 
                (
                    this.AllowHot == input.AllowHot ||
                    this.AllowHot.Equals(input.AllowHot)
                ) && 
                (
                    this.AllowFit == input.AllowFit ||
                    this.AllowFit.Equals(input.AllowFit)
                ) && 
                (
                    this.AllowOrdertix == input.AllowOrdertix ||
                    this.AllowOrdertix.Equals(input.AllowOrdertix)
                ) && 
                (
                    this.CustDiscAddonOnly == input.CustDiscAddonOnly ||
                    this.CustDiscAddonOnly.Equals(input.CustDiscAddonOnly)
                ) && 
                (
                    this.SubTypeCode == input.SubTypeCode ||
                    this.SubTypeCode.Equals(input.SubTypeCode)
                ) && 
                (
                    this.SpecialComments == input.SpecialComments ||
                    (this.SpecialComments != null &&
                    this.SpecialComments.Equals(input.SpecialComments))
                ) && 
                (
                    this.ShowDayMins == input.ShowDayMins ||
                    this.ShowDayMins.Equals(input.ShowDayMins)
                ) && 
                (
                    this.AllowEmployee == input.AllowEmployee ||
                    this.AllowEmployee.Equals(input.AllowEmployee)
                ) && 
                (
                    this.ValidateZipCode == input.ValidateZipCode ||
                    this.ValidateZipCode.Equals(input.ValidateZipCode)
                ) && 
                (
                    this.AllowGroupDisc == input.AllowGroupDisc ||
                    this.AllowGroupDisc.Equals(input.AllowGroupDisc)
                ) && 
                (
                    this.WaiveDeposit == input.WaiveDeposit ||
                    this.WaiveDeposit.Equals(input.WaiveDeposit)
                ) && 
                (
                    this.AllowFreeTicket == input.AllowFreeTicket ||
                    this.AllowFreeTicket.Equals(input.AllowFreeTicket)
                ) && 
                (
                    this.MaxDiscCount == input.MaxDiscCount ||
                    this.MaxDiscCount.Equals(input.MaxDiscCount)
                ) && 
                (
                    this.RptColor == input.RptColor ||
                    (this.RptColor != null &&
                    this.RptColor.Equals(input.RptColor))
                ) && 
                (
                    this.RptDescription == input.RptDescription ||
                    (this.RptDescription != null &&
                    this.RptDescription.Equals(input.RptDescription))
                ) && 
                (
                    this.RptNotes == input.RptNotes ||
                    (this.RptNotes != null &&
                    this.RptNotes.Equals(input.RptNotes))
                ) && 
                (
                    this.RptGroupName == input.RptGroupName ||
                    (this.RptGroupName != null &&
                    this.RptGroupName.Equals(input.RptGroupName))
                ) && 
                (
                    this.RptDisplayName == input.RptDisplayName ||
                    (this.RptDisplayName != null &&
                    this.RptDisplayName.Equals(input.RptDisplayName))
                ) && 
                (
                    this.AllowIndividual == input.AllowIndividual ||
                    this.AllowIndividual.Equals(input.AllowIndividual)
                ) && 
                (
                    this.Restriction == input.Restriction ||
                    this.Restriction.Equals(input.Restriction)
                ) && 
                (
                    this.SalesConf == input.SalesConf ||
                    this.SalesConf.Equals(input.SalesConf)
                ) && 
                (
                    this.SalesConfCat == input.SalesConfCat ||
                    (this.SalesConfCat != null &&
                    this.SalesConfCat.Equals(input.SalesConfCat))
                ) && 
                (
                    this.Detail == input.Detail ||
                    this.Detail != null &&
                    input.Detail != null &&
                    this.Detail.SequenceEqual(input.Detail)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.CorpAffilCodes == input.CorpAffilCodes ||
                    this.CorpAffilCodes != null &&
                    input.CorpAffilCodes != null &&
                    this.CorpAffilCodes.SequenceEqual(input.CorpAffilCodes)
                ) && 
                (
                    this.SpecialAutoApplied == input.SpecialAutoApplied ||
                    this.SpecialAutoApplied.Equals(input.SpecialAutoApplied)
                ) && 
                (
                    this.Savings == input.Savings ||
                    this.Savings.Equals(input.Savings)
                ) && 
                (
                    this.ValidForOrderTix == input.ValidForOrderTix ||
                    this.ValidForOrderTix.Equals(input.ValidForOrderTix)
                ) && 
                (
                    this.CompsSpecial == input.CompsSpecial ||
                    this.CompsSpecial.Equals(input.CompsSpecial)
                ) && 
                (
                    this.ValidForIndividual == input.ValidForIndividual ||
                    this.ValidForIndividual.Equals(input.ValidForIndividual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpecialCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialCode.GetHashCode();
                }
                if (this.LongDescription != null)
                {
                    hashCode = (hashCode * 59) + this.LongDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.SeatsAvailableLimit.GetHashCode();
                if (this.NumberEventsInCombo != null)
                {
                    hashCode = (hashCode * 59) + this.NumberEventsInCombo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowCustTypeDisc.GetHashCode();
                if (this.AcceptOrderStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptOrderStartDate.GetHashCode();
                }
                if (this.AcceptOrderEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptOrderEndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpecialTypeCode.GetHashCode();
                hashCode = (hashCode * 59) + this.CustFirstOrder.GetHashCode();
                if (this.DetailsValueTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.DetailsValueTypeCode.GetHashCode();
                }
                if (this.CouponLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.CouponLine1.GetHashCode();
                }
                if (this.CouponLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.CouponLine2.GetHashCode();
                }
                if (this.CouponLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.CouponLine3.GetHashCode();
                }
                if (this.CouponLine4 != null)
                {
                    hashCode = (hashCode * 59) + this.CouponLine4.GetHashCode();
                }
                if (this.CouponLine5 != null)
                {
                    hashCode = (hashCode * 59) + this.CouponLine5.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowSpanDays.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoApply.GetHashCode();
                hashCode = (hashCode * 59) + this.GroupMinimum.GetHashCode();
                hashCode = (hashCode * 59) + this.GroupMaximum.GetHashCode();
                hashCode = (hashCode * 59) + this.FinalSale.GetHashCode();
                hashCode = (hashCode * 59) + this.WaiveTrans.GetHashCode();
                hashCode = (hashCode * 59) + this.HeldBatch.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowTier.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowHot.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowFit.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowOrdertix.GetHashCode();
                hashCode = (hashCode * 59) + this.CustDiscAddonOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.SubTypeCode.GetHashCode();
                if (this.SpecialComments != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialComments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowDayMins.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowEmployee.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidateZipCode.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowGroupDisc.GetHashCode();
                hashCode = (hashCode * 59) + this.WaiveDeposit.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowFreeTicket.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxDiscCount.GetHashCode();
                if (this.RptColor != null)
                {
                    hashCode = (hashCode * 59) + this.RptColor.GetHashCode();
                }
                if (this.RptDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RptDescription.GetHashCode();
                }
                if (this.RptNotes != null)
                {
                    hashCode = (hashCode * 59) + this.RptNotes.GetHashCode();
                }
                if (this.RptGroupName != null)
                {
                    hashCode = (hashCode * 59) + this.RptGroupName.GetHashCode();
                }
                if (this.RptDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.RptDisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowIndividual.GetHashCode();
                hashCode = (hashCode * 59) + this.Restriction.GetHashCode();
                hashCode = (hashCode * 59) + this.SalesConf.GetHashCode();
                if (this.SalesConfCat != null)
                {
                    hashCode = (hashCode * 59) + this.SalesConfCat.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.CorpAffilCodes != null)
                {
                    hashCode = (hashCode * 59) + this.CorpAffilCodes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpecialAutoApplied.GetHashCode();
                hashCode = (hashCode * 59) + this.Savings.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidForOrderTix.GetHashCode();
                hashCode = (hashCode * 59) + this.CompsSpecial.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidForIndividual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SpecialCode (string) maxLength
            if (this.SpecialCode != null && this.SpecialCode.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be less than 40.", new [] { "SpecialCode" });
            }

            // SpecialCode (string) minLength
            if (this.SpecialCode != null && this.SpecialCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be greater than 0.", new [] { "SpecialCode" });
            }

            // LongDescription (string) maxLength
            if (this.LongDescription != null && this.LongDescription.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LongDescription, length must be less than 100.", new [] { "LongDescription" });
            }

            // LongDescription (string) minLength
            if (this.LongDescription != null && this.LongDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LongDescription, length must be greater than 0.", new [] { "LongDescription" });
            }

            // NumberEventsInCombo (string) maxLength
            if (this.NumberEventsInCombo != null && this.NumberEventsInCombo.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberEventsInCombo, length must be less than 1.", new [] { "NumberEventsInCombo" });
            }

            // NumberEventsInCombo (string) minLength
            if (this.NumberEventsInCombo != null && this.NumberEventsInCombo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberEventsInCombo, length must be greater than 0.", new [] { "NumberEventsInCombo" });
            }

            // DetailsValueTypeCode (string) maxLength
            if (this.DetailsValueTypeCode != null && this.DetailsValueTypeCode.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DetailsValueTypeCode, length must be less than 1.", new [] { "DetailsValueTypeCode" });
            }

            // DetailsValueTypeCode (string) minLength
            if (this.DetailsValueTypeCode != null && this.DetailsValueTypeCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DetailsValueTypeCode, length must be greater than 0.", new [] { "DetailsValueTypeCode" });
            }

            // CouponLine1 (string) maxLength
            if (this.CouponLine1 != null && this.CouponLine1.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine1, length must be less than 500.", new [] { "CouponLine1" });
            }

            // CouponLine1 (string) minLength
            if (this.CouponLine1 != null && this.CouponLine1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine1, length must be greater than 0.", new [] { "CouponLine1" });
            }

            // CouponLine2 (string) maxLength
            if (this.CouponLine2 != null && this.CouponLine2.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine2, length must be less than 500.", new [] { "CouponLine2" });
            }

            // CouponLine2 (string) minLength
            if (this.CouponLine2 != null && this.CouponLine2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine2, length must be greater than 0.", new [] { "CouponLine2" });
            }

            // CouponLine3 (string) maxLength
            if (this.CouponLine3 != null && this.CouponLine3.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine3, length must be less than 500.", new [] { "CouponLine3" });
            }

            // CouponLine3 (string) minLength
            if (this.CouponLine3 != null && this.CouponLine3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine3, length must be greater than 0.", new [] { "CouponLine3" });
            }

            // CouponLine4 (string) maxLength
            if (this.CouponLine4 != null && this.CouponLine4.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine4, length must be less than 500.", new [] { "CouponLine4" });
            }

            // CouponLine4 (string) minLength
            if (this.CouponLine4 != null && this.CouponLine4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine4, length must be greater than 0.", new [] { "CouponLine4" });
            }

            // CouponLine5 (string) maxLength
            if (this.CouponLine5 != null && this.CouponLine5.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine5, length must be less than 500.", new [] { "CouponLine5" });
            }

            // CouponLine5 (string) minLength
            if (this.CouponLine5 != null && this.CouponLine5.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponLine5, length must be greater than 0.", new [] { "CouponLine5" });
            }

            // SpecialComments (string) maxLength
            if (this.SpecialComments != null && this.SpecialComments.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialComments, length must be less than 100.", new [] { "SpecialComments" });
            }

            // SpecialComments (string) minLength
            if (this.SpecialComments != null && this.SpecialComments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialComments, length must be greater than 0.", new [] { "SpecialComments" });
            }

            // RptColor (string) maxLength
            if (this.RptColor != null && this.RptColor.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptColor, length must be less than 6.", new [] { "RptColor" });
            }

            // RptColor (string) minLength
            if (this.RptColor != null && this.RptColor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptColor, length must be greater than 0.", new [] { "RptColor" });
            }

            // RptDescription (string) maxLength
            if (this.RptDescription != null && this.RptDescription.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptDescription, length must be less than 500.", new [] { "RptDescription" });
            }

            // RptDescription (string) minLength
            if (this.RptDescription != null && this.RptDescription.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptDescription, length must be greater than 0.", new [] { "RptDescription" });
            }

            // RptNotes (string) maxLength
            if (this.RptNotes != null && this.RptNotes.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptNotes, length must be less than 500.", new [] { "RptNotes" });
            }

            // RptNotes (string) minLength
            if (this.RptNotes != null && this.RptNotes.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptNotes, length must be greater than 0.", new [] { "RptNotes" });
            }

            // RptGroupName (string) maxLength
            if (this.RptGroupName != null && this.RptGroupName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptGroupName, length must be less than 50.", new [] { "RptGroupName" });
            }

            // RptGroupName (string) minLength
            if (this.RptGroupName != null && this.RptGroupName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptGroupName, length must be greater than 0.", new [] { "RptGroupName" });
            }

            // RptDisplayName (string) maxLength
            if (this.RptDisplayName != null && this.RptDisplayName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptDisplayName, length must be less than 100.", new [] { "RptDisplayName" });
            }

            // RptDisplayName (string) minLength
            if (this.RptDisplayName != null && this.RptDisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RptDisplayName, length must be greater than 0.", new [] { "RptDisplayName" });
            }

            // SalesConfCat (string) maxLength
            if (this.SalesConfCat != null && this.SalesConfCat.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesConfCat, length must be less than 20.", new [] { "SalesConfCat" });
            }

            // SalesConfCat (string) minLength
            if (this.SalesConfCat != null && this.SalesConfCat.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesConfCat, length must be greater than 0.", new [] { "SalesConfCat" });
            }

            yield break;
        }
    }

}
