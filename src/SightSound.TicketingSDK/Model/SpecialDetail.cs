/*
 * Partner Ticketing API
 *
 * Sight & Sound Theatres Partner Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SightSound.TicketingSDK.Client.OpenAPIDateConverter;

namespace SightSound.TicketingSDK.Model
{
    /// <summary>
    /// SpecialDetail
    /// </summary>
    [DataContract(Name = "SpecialDetail")]
    public partial class SpecialDetail : IEquatable<SpecialDetail>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DesignationCode
        /// </summary>
        [DataMember(Name = "designationCode", IsRequired = true, EmitDefaultValue = false)]
        public Designation DesignationCode { get; set; }

        /// <summary>
        /// Gets or Sets DiscTypeCode
        /// </summary>
        [DataMember(Name = "discTypeCode", IsRequired = true, EmitDefaultValue = false)]
        public DiscountType DiscTypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpecialDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialDetail" /> class.
        /// </summary>
        /// <param name="specialCode">specialCode (required).</param>
        /// <param name="eventCode">eventCode (required).</param>
        /// <param name="designationCode">designationCode (required).</param>
        /// <param name="buyCount">buyCount.</param>
        /// <param name="designationMax">designationMax.</param>
        /// <param name="designationMin">designationMin.</param>
        /// <param name="discCount">discCount.</param>
        /// <param name="discTypeCode">discTypeCode (required).</param>
        /// <param name="discValue">discValue (required).</param>
        /// <param name="getCount">getCount.</param>
        /// <param name="maxDiscCount">maxDiscCount.</param>
        /// <param name="special">special.</param>
        public SpecialDetail(string specialCode = default(string), string eventCode = default(string), Designation designationCode = default(Designation), int buyCount = default(int), int designationMax = default(int), int designationMin = default(int), int discCount = default(int), DiscountType discTypeCode = default(DiscountType), decimal discValue = default(decimal), int getCount = default(int), int maxDiscCount = default(int), Special special = default(Special))
        {
            // to ensure "specialCode" is required (not null)
            if (specialCode == null)
            {
                throw new ArgumentNullException("specialCode is a required property for SpecialDetail and cannot be null");
            }
            this.SpecialCode = specialCode;
            // to ensure "eventCode" is required (not null)
            if (eventCode == null)
            {
                throw new ArgumentNullException("eventCode is a required property for SpecialDetail and cannot be null");
            }
            this.EventCode = eventCode;
            this.DesignationCode = designationCode;
            this.DiscTypeCode = discTypeCode;
            this.DiscValue = discValue;
            this.BuyCount = buyCount;
            this.DesignationMax = designationMax;
            this.DesignationMin = designationMin;
            this.DiscCount = discCount;
            this.GetCount = getCount;
            this.MaxDiscCount = maxDiscCount;
            this.Special = special;
        }

        /// <summary>
        /// Gets or Sets SpecialCode
        /// </summary>
        [DataMember(Name = "specialCode", IsRequired = true, EmitDefaultValue = false)]
        public string SpecialCode { get; set; }

        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name = "eventCode", IsRequired = true, EmitDefaultValue = false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets BuyCount
        /// </summary>
        [DataMember(Name = "buyCount", EmitDefaultValue = false)]
        public int BuyCount { get; set; }

        /// <summary>
        /// Gets or Sets DesignationMax
        /// </summary>
        [DataMember(Name = "designationMax", EmitDefaultValue = false)]
        public int DesignationMax { get; set; }

        /// <summary>
        /// Gets or Sets DesignationMin
        /// </summary>
        [DataMember(Name = "designationMin", EmitDefaultValue = false)]
        public int DesignationMin { get; set; }

        /// <summary>
        /// Gets or Sets DiscCount
        /// </summary>
        [DataMember(Name = "discCount", EmitDefaultValue = false)]
        public int DiscCount { get; set; }

        /// <summary>
        /// Gets or Sets DiscValue
        /// </summary>
        [DataMember(Name = "discValue", IsRequired = true, EmitDefaultValue = false)]
        public decimal DiscValue { get; set; }

        /// <summary>
        /// Gets or Sets GetCount
        /// </summary>
        [DataMember(Name = "getCount", EmitDefaultValue = false)]
        public int GetCount { get; set; }

        /// <summary>
        /// Gets or Sets MaxDiscCount
        /// </summary>
        [DataMember(Name = "maxDiscCount", EmitDefaultValue = false)]
        public int MaxDiscCount { get; set; }

        /// <summary>
        /// Gets or Sets Special
        /// </summary>
        [DataMember(Name = "special", EmitDefaultValue = false)]
        public Special Special { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecialDetail {\n");
            sb.Append("  SpecialCode: ").Append(SpecialCode).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  DesignationCode: ").Append(DesignationCode).Append("\n");
            sb.Append("  BuyCount: ").Append(BuyCount).Append("\n");
            sb.Append("  DesignationMax: ").Append(DesignationMax).Append("\n");
            sb.Append("  DesignationMin: ").Append(DesignationMin).Append("\n");
            sb.Append("  DiscCount: ").Append(DiscCount).Append("\n");
            sb.Append("  DiscTypeCode: ").Append(DiscTypeCode).Append("\n");
            sb.Append("  DiscValue: ").Append(DiscValue).Append("\n");
            sb.Append("  GetCount: ").Append(GetCount).Append("\n");
            sb.Append("  MaxDiscCount: ").Append(MaxDiscCount).Append("\n");
            sb.Append("  Special: ").Append(Special).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecialDetail);
        }

        /// <summary>
        /// Returns true if SpecialDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecialDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecialDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SpecialCode == input.SpecialCode ||
                    (this.SpecialCode != null &&
                    this.SpecialCode.Equals(input.SpecialCode))
                ) && 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.DesignationCode == input.DesignationCode ||
                    this.DesignationCode.Equals(input.DesignationCode)
                ) && 
                (
                    this.BuyCount == input.BuyCount ||
                    this.BuyCount.Equals(input.BuyCount)
                ) && 
                (
                    this.DesignationMax == input.DesignationMax ||
                    this.DesignationMax.Equals(input.DesignationMax)
                ) && 
                (
                    this.DesignationMin == input.DesignationMin ||
                    this.DesignationMin.Equals(input.DesignationMin)
                ) && 
                (
                    this.DiscCount == input.DiscCount ||
                    this.DiscCount.Equals(input.DiscCount)
                ) && 
                (
                    this.DiscTypeCode == input.DiscTypeCode ||
                    this.DiscTypeCode.Equals(input.DiscTypeCode)
                ) && 
                (
                    this.DiscValue == input.DiscValue ||
                    this.DiscValue.Equals(input.DiscValue)
                ) && 
                (
                    this.GetCount == input.GetCount ||
                    this.GetCount.Equals(input.GetCount)
                ) && 
                (
                    this.MaxDiscCount == input.MaxDiscCount ||
                    this.MaxDiscCount.Equals(input.MaxDiscCount)
                ) && 
                (
                    this.Special == input.Special ||
                    (this.Special != null &&
                    this.Special.Equals(input.Special))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpecialCode != null)
                {
                    hashCode = (hashCode * 59) + this.SpecialCode.GetHashCode();
                }
                if (this.EventCode != null)
                {
                    hashCode = (hashCode * 59) + this.EventCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DesignationCode.GetHashCode();
                hashCode = (hashCode * 59) + this.BuyCount.GetHashCode();
                hashCode = (hashCode * 59) + this.DesignationMax.GetHashCode();
                hashCode = (hashCode * 59) + this.DesignationMin.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscCount.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscTypeCode.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscValue.GetHashCode();
                hashCode = (hashCode * 59) + this.GetCount.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxDiscCount.GetHashCode();
                if (this.Special != null)
                {
                    hashCode = (hashCode * 59) + this.Special.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SpecialCode (string) maxLength
            if (this.SpecialCode != null && this.SpecialCode.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be less than 40.", new [] { "SpecialCode" });
            }

            // SpecialCode (string) minLength
            if (this.SpecialCode != null && this.SpecialCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialCode, length must be greater than 0.", new [] { "SpecialCode" });
            }

            // EventCode (string) maxLength
            if (this.EventCode != null && this.EventCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventCode, length must be less than 10.", new [] { "EventCode" });
            }

            // EventCode (string) minLength
            if (this.EventCode != null && this.EventCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventCode, length must be greater than 0.", new [] { "EventCode" });
            }

            yield break;
        }
    }

}
